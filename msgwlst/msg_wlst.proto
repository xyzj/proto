syntax = "proto3";
package wlst.gb;

option optimize_for = SPEED;

// rabbitmq过滤器命名规则：
//    下行：[wlst-micro].devdown.[dataparser-wlst].[mq标识，默认0].gb-open-[2位十六进制fun功能码][2位十六进制afn功能码].[12位设备地址].[areacode]
//    上行：[wlst-micro].devuplink.[devmanager-gbopen].[mq标识，默认0].gb-open-[2位十六进制fun功能码][2位十六进制afn功能码].[12位设备地址].[areacode]
//
// [fun][afn]列表：
// 发起（主要为主站下行，也包括设备主报）：
//  0101-复位
//  0a04-设置参数
//  0a05-控制命令
//  0b03-中继站命令
//  0b06-身份认证以及密钥协商
//  0b08-请求被级联终端主动上报
//  0b09-请求终端配置
//  0b0a-查询参数
//  0b0b-请求任务数据
//  0b0c-请求实时数据
//  0b0d-请求历史数据
//  0b0e-请求事件数据
//  0b0f-文件传输（保留）ods
//  0b10-数据转发
// 应答（主要为设备应答，对于设备主报，通讯层直接进行高优先级应答，无需上层下发）：
//  0000-复位应答
//  0800-设置/控制类应答
//  0803-中继站命令应答
//  0806-身份认证以及密钥协商应答
//  0808-请求被级联终端主动上报应答
//  0809-请求终端配置应答
//  080a-查询参数应答
//  080b-请求任务数据应答
//  080c-请求实时数据应答
//  080d-请求历史数据应答
//  080e-请求事件数据应答
//  0810-数据转发应答

// 结构体命名说明
// Afn[2位十六进制afn代码]_P[十进制代码]_F[十进制代码]
// 未标记（上行，下行）方向的结构体，默认为下行填充

// 串口配置
message RS_Setting {
  // 目标端口序号，默认0，上行254表示设备无应答，255表示主报
  int32 idx = 1;
  // 波特率,0表示300bps；1表示600 bps；2表示1200 bps；3表示2400 bps；4表示4800 bps；5表示9600 bps；6表示14400；7表示19200；8表示38400；9表示56000；A表示57600；B表示115200
  int32 bps = 2;
  // 校验方式0-无，1-奇，2-偶
  int32 rc = 3;
}
// 数据单元标识
message UnitIdentification {
  // 信息点DA
  int32 pn = 1;
  // 信息类DT
  int32 fn = 2;
}
// 数据标识信息
message DataIdentification {
  // 数据单元标识
  repeated UnitIdentification uintID = 1;
  // dir 数据方向,0-下行，1-上行
  int32 dir = 2;
  // 指令有效的分钟数，0-不启用（默认），>0指令在指定的分钟内才有效，超时丢弃（下行有，暂不用）
  int32 tp = 3;
  // 认证码(未支持)
  string pw = 5;
  // 高优先级事件数量（上行才有）
  int32 ec1 = 6;
  // 普通优先级事件数量（上行才有）
  int32 ec2 = 7;
  // 顺序码0-15
  int32 seq = 8;
  // afn 功能码
  int32 afn = 9;
  // fun 功能码
  int32 fun = 10;
  // 区域码，默认"0000"
  string area = 11;
  // 设备地址，1-65534，（65535为广播地址下行不可使用）
  int64 addr = 12;
  // 命令优先级,0-普通，1-高，普通优先级命令先进先出，高优先级命令后进先出
  int32 sp = 13;
}

message MsgGBOpen {
  // 指令头
  // 依据DataID.unitid的内容读取对应结构体数据
  // 一条指令可能存在多个unitid，因此可以读取多个结构体数据
  // 但是注意：多个unitid必须属于同一个fun和afn的组合
  DataIdentification DataID = 1;
  // 通用应答
  // 全部确认
  Afn00_P0_F1 afn00_p0_f1 = 10;
  // 全部否认
  Afn00_P0_F1 afn00_p0_f2 = 11;
  // 按单元标识确认/否认
  Afn00_P0_F3 afn00_p0_f3 = 12;
  // 复位（下行无数据区）通用应答
  //  pn: 0
  //  fn: 1-硬件初始化（重启），2-数据区初始化，3-恢复出厂值，4-参数全体数据区
  // 设置参数，所有设置指令均为通用应答
  // 终端上行通信口通信参数设置
  Afn04_P0_F1 afn04_p0_f1 = 100;
  // 主站 IP 地址  和端口设置
  Afn04_P0_F3 afn04_p0_f3 = 101;
  // 终端事件记录配置设置
  Afn04_P0_F9 afn04_p0_f9 = 102;
  // 设备状态输入参数
  Afn04_P0_F10 afn04_p0_f10 = 103;
  // GPS 地理位置信息
  Afn04_P0_F11 afn04_p0_f11 = 104;
  // 扩展设备配置参数
  // pn: n为0-99
  repeated Afn04_Pn_F14 afn04_pn_f14 = 105;
  // 继电器输出控制方案
  // pn: n为方案号，1-8
  // 当有多个方案同时下发时，对应填充多少个数据结构
  // 清除方案指令应单独下发，将时段数设置为0，并标识需要清除的开关量输出即可，其他字段可不填。
  repeated Afn04_Pn_F15 afn04_pn_f15 = 106;
  // 开关量输出参数关联
  Afn04_P0_F41 afn04_p0_f41 = 107;
  // 模拟量采集参数关联
  Afn04_P0_F42 afn04_p0_f42 = 108;
  // 周回路控制表
  Afn04_P0_F46 afn04_p0_f46 = 109;
  // 经纬度开关灯偏移
  Afn04_P0_F49 afn04_p0_f49 = 110;
  // 设定全数据上送周期
  Afn04_P0_F50 afn04_p0_f50 = 111;
  // 设置模拟量上下限
  Afn04_P0_F51 afn04_p0_f51 = 112;
  // 设置漏电保护参数
  Afn04_P0_F52 afn04_p0_f52 = 113;
  // 设置光照度限值 参数
  Afn04_P0_F53 afn04_p0_f53 = 114;
  // 停运/投运
  Afn04_P0_F57 afn04_p0_f57 = 115;
  // 电流回路矢量
  Afn04_P0_F65 afn04_p0_f65 = 116;
  // 电流回路对应的开关量输出序号
  Afn04_P0_F66 afn04_p0_f66 = 117;
  // 开关量输出矢量
  Afn04_P0_F67 afn04_p0_f67 = 118;
  // 设置断电保护参数
  Afn04_P0_F68 afn04_p0_f68 = 119;

  // 控制命令，所有控制指令均为通用应答
  // pn:0
  // fn: 29-允许主报，37-禁止主报（这两个下行没有数据单元）
  // 允许合闸/跳闸
  Afn05_P0_F1 afn05_p0_f1 = 200;
  // 消除漏电分闸/报警
  Afn05_P0_F9 afn05_p0_f9 = 201;
  // 对时命令
  Afn05_P0_F31 afn05_p0_f31 = 202;
  // 消除相位断电保护
  Afn05_P0_F57 afn05_p0_f57 = 203;

  // 查询终端信息，下行均无数据单元
  // 终端版本信息（上行格式）
  Afn09_P0_F1 afn09_p0_f1 = 300;
  // 查询参数，下行大多无数据单元
  // 终端上行通信口通信参数设置（上行）
  Afn04_P0_F1 afn0a_p0_f1 = 400;
  // 主站 IP 地址  和端口（上行）
  Afn04_P0_F3 afn0a_p0_f3 = 401;
  // 终端事件记录配置设置（上行）
  Afn04_P0_F9 afn0a_p0_f9 = 406;
  // 设备状态输入参数（上行）
  Afn04_P0_F10 afn0a_p0_f10 = 407;
  // GPS 地理位置信息（上行）
  Afn04_P0_F11 afn0a_p0_f11 = 408;
  // 扩展设备配置参数（上行）
  repeated Afn04_Pn_F14 afn0a_pn_f14 = 411;
  // 继电器输出控制方案（上行）
  // pn: n为方案号，1-8
  repeated Afn04_Pn_F15 afn0a_pn_f15 = 412;
  // 开关量输出参数关联（上行）
  Afn04_P0_F41 afn0a_p0_f41 = 415;
  // 模拟量采集参数关联（上行）
  Afn04_P0_F42 afn0a_p0_f42 = 416;
  // 周回路控制表（上行）
  Afn04_P0_F46 afn0a_p0_f46 = 417;
  // 经纬度开关灯偏移（上行）
  Afn04_P0_F49 afn0a_p0_f49 = 418;
  // 查询全数据上送周期（上行）
  Afn04_P0_F50 afn0a_p0_f50 = 419;
  // 查询模拟量上下限（上行）
  Afn04_P0_F51 afn0a_p0_f51 = 420;
  // 查询漏电保护参数（上行）
  Afn04_P0_F52 afn0a_p0_f52 = 421;
  // 查询光照度限值 参数（上行）
  Afn04_P0_F53 afn0a_p0_f53 = 422;
  // 停运/投运（上行）
  Afn04_P0_F57 afn0a_p0_f57 = 423;
  // 电流回路矢量
  Afn04_P0_F65 afn0a_p0_f65 = 424;
  // 电流回路对应的开关量输出序号
  Afn04_P0_F66 afn0a_p0_f66 = 425;
  // 开关量输出矢量
  Afn04_P0_F67 afn0a_p0_f67 = 426;
  // 设置断电保护参数
  Afn04_P0_F68 afn0a_p0_f68 = 427;

  // 请求实时数据，下行无数据单元，数据结构均为上行结构
  // 出线模拟量数据(全数据)(报警主报)（上行）
  // pn: n是模拟量回路序号，0xff表示所有回路(只用所有回路)
  Afn0c_Pn_F1 afn0c_pn_f1 = 500;
  // 终端日历时钟（上行）
  Afn0c_P0_F2 afn0c_p0_f2 = 501;
  // 进线模拟量数据(全数据)(报警主报)（上行）
  Afn0c_P0_F3 afn0c_p0_f3 = 502;
  // 终端上行通信状态（上行）
  Afn0c_P0_F4 afn0c_p0_f4 = 503;
  // 终端当前控制状态（上行）
  Afn0c_P0_F6 afn0c_p0_f6 = 504;
  // 终端事件计数器当前值（上行）
  Afn0c_P0_F7 afn0c_p0_f7 = 505;
  // 终端状态量及变位标志(全数据)（上行）
  Afn0c_P0_F9 afn0c_p0_f9 = 506;
  // 终端回路事件报警状态(全数据)（上行）
  Afn0c_P0_F18 afn0c_p0_f18 = 507;
  // 漏电检测数据(全数据)（上行）
  Afn0c_P0_F19 afn0c_p0_f19 = 508;
  // 光照度数据(主报)（上行）
  Afn0c_P0_F20 afn0c_p0_f20 = 509;
  // 终端保护状态(主报)（上行）
  Afn0c_P0_F25 afn0c_p0_f25 = 510;
  // 请求历史数据
  // 模拟量历史数据曲线(出线)
  // pn：n为电流回路1-48
  Afn0d_Pn_F1 afn0d_pn_f1 = 600;
  // 模拟量历史数据曲线(进线)
  Afn0d_P0_F2 afn0d_p0_f2 = 601;
  // 漏电历史数据曲线
  // pn：n为漏电回路1-8
  Afn0d_Pn_F3 afn0d_pn_f3 = 602;
  // 请求事件记录
  // 请求重要/一般事件（上下行）
  // 查询重要事件时pn=0,fn=1
  // 查询一般事件时pn=0,fn=2
  Afn0e_P0_F1 afn0e_p0_f1 = 700;
  // 数据转发
  // 透明转发
  Afn10_P0_F2 afn10_p0_f2 = 800;
  // FTP升级命令
  Afn10_P0_F9 afn10_p0_f9 = 801;
  // 终端FTP升级结果
  Afn10_P0_F10 afn10_p0_f10 = 802;
  // 模块FTP升级结果
  Afn10_P0_F10 afn10_p0_f41 = 803;
}
// 确认否认（仅上行）
message Afn00_P0_F1 {
  // 被确认的功能码
  int32 afn = 1;
}
// 按单元标识确认/否认（仅上行）
message Afn00_P0_F3 {
  // 被确认的功能码
  int32 afn = 1;
  // 数据单元标识
  repeated UnitIdentification unit_id = 2;
  // 单元标识状态，0-失败，1-正确（原始数据为0-正确，1-错误，通讯层解析时反转）
  repeated int32 status = 3 [ packed = true ];
}
// 设置参数
// 终端上行通信口通信参数设置
message Afn04_P0_F1 {
  // 终端数据传输延时时间 RTS 20ms*value
  int32 rts = 1;
  // 终端作为启动站允许发送传输延时时间,分钟
  int32 master_rts = 2;
  // 终端等待从动站响应的超时时间,秒
  int32 resend_timeout = 3;
  // 终端等待从动站响应的重发次数，0-3,0-不重发
  int32 resend_num = 4;
  // 主动上报是否需要主站下发确认0-不需要，1-需要,
  // 依次：实时数据，历史数据，事件记录
  repeated int32 report_mark = 5 [ packed = true ];
  // 心跳周期,分钟
  int32 keep_alive = 6;
}
// 主站 IP 地址  和端口设置
message Afn04_P0_F3 {
  // 主ip
  string main_ip = 1;
  // 主端口
  int32 main_port = 2;
  // 备用ip
  string backup_ip = 3;
  // 备用端口
  int32 backup_port = 4;
  // apn
  string apn = 5;
  // 用户名
  string user = 6;
  // 密码
  string pwd = 7;
}
// 终端事件记录配置设置
message Afn04_P0_F9 {
  // 事件代码：（1）-终端目前支持的事件
  // 1 数据初始化和版本变更
  // 2 参数丢失
  // 3 参数变更
  // 4 终端状态量变位（1）
  // 5 终端遥控跳闸（1）
  // 6 电流回路异常
  // 7 电能表参数变更
  // 8 电压回路异常
  // 9 消息认∕否认证错误
  // 10 电压越限
  // 11 电流越限
  // 12 路灯控制器批量设置参数异常
  // 13 终端停/上电（1）
  // 14 直流模拟量越限
  // 15 电压/电流不平衡越限
  // 16 终端故障
  // 17 终端和路灯控制器通信失败
  // 18 路灯控制器运行状态字变位
  // 19 路灯控制器异常
  // 20 漏电报警（1）
  // 21 保护跳闸（1）
  // 22 缺相报警（1）
  // 23 过压（1）
  // 24 欠压（1）
  // 25 过流（1）
  // 26 欠流（1）
  // 27 接触器未释放 ( 有I&开关闭合)（1）
  // 28 接触器断开(无 I&开关断开)（1）
  // 29 白天亮灯(有 I&开关断开)（1）
  // 30 夜间灭灯(无 I&开关闭合)（1）
  // 31 欠压保护断电（1）
  // 32 过压保护断电（1）
  // 需要记录的事件标识，直接填写需要记录的事件id，如[10,11,29]
  repeated int32 events_available = 1 [ packed = true ];
  // 需要主报的事件标识，直接填写需要主报的事件id
  repeated int32 events_report = 2 [ packed = true ];
}
// 设备状态输入参数
message Afn04_P0_F10 {
  // 状态量接入标志位(对应 1~32 路状态量)1-接入，0-未接入
  repeated int32 switchin_available = 1 [ packed = true ];
  // 状态量属性标志位(对应 1~32 路状态量) 1-常开，0-常闭
  repeated int32 switchin_hopping = 2 [ packed = true ];
}
// GPS 地理位置信息
message Afn04_P0_F11 {
  // 经度
  double longitude = 1;
  // 纬度
  double latitude = 2;
  // 标识，0-东经，1-西经
  int32 longitude_mark = 3;
  // 标识，0-北纬，1-南纬
  int32 latitude_mark = 4;
}
// 扩展设备配置参数(不用)
// pn:n 0-99,0-无效配置（删除配置）
message Afn04_Pn_F14 {
  // 串口配置
  RS_Setting rs_setting = 1;
  // 串口设备类型1 为交采,调整2 为路灯控制器,调整3 为表计（说是电表）,
  // 4为回路控制器,5 为电缆防盗检测器,6 为漏电检测器,7 为光控仪,
  // 8为支路交流采集,9 为车流量传感器
  int32 rs_type = 2;
  // 优先级0-普通，1-重点
  int32 sp = 3;
  // 端口号数值 范围 0~255
  // 0表示删除该测量点的配置参数,1:交流模拟量（备用）;2~30:第 1 路~第 29 路RS485
  // 31: 载波;32:无线;48~63 :1~16路电压采集;64~127:1~64 路电流;其他备用
  int32 rs_port = 4;
  // 协议版本，1-97协议，2-07协议
  int32 ver = 5;
  // 所属回路，电表填0,漏电，防盗等按设置填
  int32 loop_no = 6;
  // 启用数量（含义不明，填1）
  int32 number = 7;
  // 所属相位0-a,1-b,2-c
  int32 phase = 8;
  // 设备地址，6字节bcd
  int64 addr = 9;
  // 漏电设置，仅当rs_type==6时 填
  Elu_Setting elu_setting = 10;
  // 漏电额外设置
  message Elu_Setting {
    // 是否允许断电0-否，1-允许
    int32 enable_off = 1;
    // 关联的开关量输出号1-16
    int32 switchout_no = 2;
    // 重合闸次数0-不启用，1-255,重试次数
    int32 retry = 3;
    // 延时间隔1-255秒
    int32 delay = 4;
  }
}
// 继电器输出控制方案（年设置）
// pn:n 方案序号1-n
message Afn04_Pn_F15 {
  // 起始年月日，yyMMdd
  string dt_start = 1;
  // 持续时间1-31天，2月按29天算
  int32 dt_days = 2;
  // 开关量输出启用标识,依次K1-16,1-启用下方时段，0-不用，需填满
  repeated int32 switchout_no = 3 [ packed = true ];
  // 时段设置，留空表示清除所有时段
  // 数量1-4为有效时段
  repeated Time_Slot time_slot = 4;
  message Time_Slot {
    // 开灯时间hh*60+mm，1500表示不操作
    int32 time_on = 1;
    // 关灯时间hh*60+mm，1500表示不操作
    int32 time_off = 2;
  }
}
// 开关量输出参数关联
message Afn04_P0_F41 {
  // 每个开关量输出控制回路数量，有多少个输出就填充多少个数据，依次为k1-kn
  repeated int32 switchout_loops = 1 [ packed = true ];
}
// 模拟量采集参数关联
message Afn04_P0_F42 {
  // 电压互感比，默认1，如互感器的比值为100:5，则变比为20，下同
  int32 voltage_transformer = 1;
  // A相电能互感比
  int32 energy_a_transformer = 2;
  // B相电能互感比
  int32 energy_b_transformer = 3;
  // C相电能互感比
  int32 energy_c_transformer = 4;
  // 启用了多少回路，填充多少数据
  repeated Current_Setting current_setting = 5;
  // 电流参数
  message Current_Setting {
    // 互感比
    int32 transformer = 1;
    // 相位，0-a相，1-b相，2-c相
    int32 phase = 2;
  }
}
// 周回路控制表,仅支持k1-k8（国标设备不建议使用）
message Afn04_P0_F46 {
  // 周一设置,k1~k8
  repeated Time_Slot week_day1 = 1;
  // 周二设置,k1~k8
  repeated Time_Slot week_day2 = 2;
  // 周三设置,k1~k8
  repeated Time_Slot week_day3 = 3;
  // 周四设置,k1~k8
  repeated Time_Slot week_day4 = 4;
  // 周五设置,k1~k8
  repeated Time_Slot week_day5 = 5;
  // 周六设置,k1~k8
  repeated Time_Slot week_day6 = 6;
  // 周日设置,k1~k8
  repeated Time_Slot week_day7 = 7;
  message Time_Slot {
    // 开灯时间hh*60+mm，15555保留当前值,1500清除对应设置
    int32 time_on = 1;
    // 关灯时间hh*60+mm，15555保留当前值,1500清除对应设置
    int32 time_off = 2;
  }
}
// 经纬度开关灯偏移
message Afn04_P0_F49 {
  // 开灯偏移（分钟）-120～120
  int32 offset_on = 1;
  // 关灯偏移（分钟）-120～120
  int32 offset_off = 2;
}
// 设定全数据上送周期
message Afn04_P0_F50 {
  // 全数据主报周期（分钟）1-255
  int32 report_timer = 1;
}
// 设置模拟量上下限
message Afn04_P0_F51 {
  // 电压下限(1位小数bcd)
  double voltage_lower_limit = 1;
  // 电压上限(1位小数bcd)
  double voltage_upper_limit = 2;
  // 回路电流上下限设置（从回路1开始，填充到最后一个回路即可（最大64），中间不允许跳过回路）
  repeated Current_Setting current_setting = 3;
  message Current_Setting {
    // 依次时段设置（最大4,有多少填多少，若要清除某回路的上下限设置，初始化一个空的loop_setting即可）
    repeated Loop_Setting loop_setting = 1;
  }
  // 回路设置
  message Loop_Setting {
    // 启用时刻hh*60+mm
    // 第一时段可使用特殊值：6039-终端自动判断每日第一次开灯或经纬度
    // 最后一个时段（依据F15设置而定），可使用特殊值：5368-使用经纬度自动计算
    int32 time_start = 1;
    int32 time_end = 2;
    // 电流下限（有符号3位小数）
    double current_lower_limit = 3;
    // 电流上限（有符号3位小数）
    double current_upper_limit = 4;
  }
}
// 设置漏电保护参数
message Afn04_P0_F52 {
  // 漏电参数，依次1-8路填满，不启用或要擦除的回路全部填0即可
  repeated Leakage_Limit leakage_limit = 1;
  message Leakage_Limit{
  // 是否启用(0-不启用，1-启用)
  int32 loop_enable = 1;
  // 关联的开关量输出号（1-255）
  int32 loop_switchout = 2;
  // 一级越限值(单位mA,下同)
  int32 level1_limit = 3;
  // 二级越限值
  int32 level2_limit = 4;
  // 三级越限值
  int32 level3_limit = 5;
  // 四级越限值（断电）
  int32 level4_limit = 6;
  }
}
// 设置光照度限值 参数
message Afn04_P0_F53 {
  // 光照度阀值
  int32 lux_threshold = 1;
  // 数据传输间隔（秒）
  int32 time_tick = 2;
}
// 停运/投运
message Afn04_P0_F57 {
  // 设备停运标识，0-停运，1-投运
  int32 runtime_mark = 1;
  // 回路停运标识,48个，0-停运，1-投运（没用，不用填）
  repeated int32 loop_mark = 2 [ packed = true ];
}
// 电流回路矢量
message Afn04_P0_F65{
  // 电流回路矢量，从0开始
  repeated int32 switchin_vector = 1 [packed=true];
}
// 电流回路和开关量输出对应关系
message Afn04_P0_F66{
  // 填写每个回路对应的开关量输出序号，0开始，如果不对应开关量输出，如门，则填255
  repeated int32 switchin_switchout = 2 [packed=true];
}
// 开关量输出矢量
message Afn04_P0_F67 {
  // 开关量输出矢量，从0开始
  repeated int32 switchout_vector =1 [packed=true];
}
// 电压过/欠保护，触发后需手动发送消除断电保护命令（afn05_p0_f57）
message Afn04_P0_F68 {
  // 三相报警下限，三相统一设置，当值小于100时，则认为不启用报警
  double voltage_lower_limit = 1;
  // 三相报警上限，三相统一设置，当值大于300时，则认为不启用报警
  double voltage_upper_limit = 2;
  // 越下限跳闸,0-不跳，1-跳
  int32 voltage_lower_break = 3;
  // 越上限跳闸,0-不跳，1-跳
  int32 voltage_upper_break = 4;
}
// 控制命令
// 允许合闸/跳闸
message Afn05_P0_F1 {
  // 是否操作对应的输出，16个0-不操作
  repeated Switchout_Ctrl switchout_ctrl = 1;
  message Switchout_Ctrl {
    // 开关量输出序号1-16
    int32 switchout_no = 1;
    // 开关量输出操作，0-关，1-开
    int32 switchout_do = 2;
    // 开关量输出操作时间，0-立即执行，>0-unix时间戳，表示在指定时间执行该操作
    int64 switchout_time = 3;
  }
}
// 消除漏电分闸/报警
message Afn05_P0_F9 {
  // 消除漏电报警标识,0-不消除，1-消除，1-n回路，不能跳回路
  repeated int32 loop_mark = 1 [ packed = true ];
}
// 对时命令
message Afn05_P0_F31 {
  // 时间，unix时间戳,0-表示使用通讯服务所在服务器时间，>0-表示使用设置值
  int64 time_unix = 1;
}
// 消除电压保护断电
// 这协议莫名其妙，设置时候分相位，执行/消除都不分相位，什么脑回路。。。
message Afn05_P0_F57 {
  // 断电保护消除标识，0-不消除，1-消除
  int32 dismiss = 1;
}
// 查询终端信息
// 终端版本信息
message Afn09_P0_F1 {
  // 厂商代码
  string company = 1;
  // 设备编号
  string device_num = 2;
  // 终端软件版本号
  string software_ver = 3;
  // 终端软件发布日期：YYMMDD
  int32 software_date = 4;
  // 终端配置容量信息码
  string device_info = 5;
  // 终端硬件版本号
  string hardware_ver = 6;
  // 终端硬件发布日期：YYMMDD
  int32 hardware_date = 7;
  // 远程通讯模块版本号
  string remote_com_ver = 8;
  // 远程通讯模块发布日期：YYMMDD
  int32 remote_com_date = 9;
  // 本地通讯模块版本号
  string local_com_ver = 10;
  // 本地通讯模块发布日期：YYMMDD
  int32 local_com_date = 11;
}

// 查询参数，结构和afn04相同

// 请求实时数据，下行无数据单元
// 出线模拟量数据(全数据)(报警主报)
// pn: n是模拟量回路序号，0xffff表示所有回路
message Afn0c_Pn_F1 {
  // 主报时间
  int64 dt_report = 1;
  // 回路数据，几个回路就几个数据
  repeated Loop_Data loop_data = 2;
  message Loop_Data {
    // 电压(1位小数bcd)
    double voltage = 1;
    // 电流(有符号3位小数bcd)
    double current = 2;
    // 有功功率(有符号4位小数bcd)
    double active_power = 3;
    // 无功功率(有符号4位小数bcd)
    double reactive_power = 4;
    // 功率因数(有符号1位小数bcd)
    double power_factor = 5;
    // 光控值？？？（0位小数bcd）
    double lux_value = 6;
    // 其他模拟量（没这玩意）
    double other = 7;
    // 回路号，从1开始
    int32 loop_no = 8;
  }
}
// 终端日历时钟
message Afn0c_P0_F2 {
  // 设备时钟，unix时间戳
  int64 time_unix = 1;
}
// 进线模拟量数据(全数据)(报警主报)
message Afn0c_P0_F3 {
  // 三相数据，依次ABC三相数据
  repeated Phase_Data phase_data = 1;
  // 频率（1位小数bcd）
  double frequency = 2;
  message Phase_Data {
    // 电压（1位小数bcd）
    double voltage = 1;
    // 电流（有符号3位小数bcd）
    double current = 2;
    // 有功功率（有符号4位小数bcd）
    double active_power = 3;
    // 无功功率（有符号4位小数bcd）
    double reactive_power = 4;
    // 功率因数（有符号1位小数bcd）
    double power_factor = 5;
    // 有功电能（2位小数bcd）
    double active_energy = 6;
    // 无功电能（2位小数bcd）
    double reactive_energy = 7;
  }
}
// 终端上行通信状态
message Afn0c_P0_F4 {
  // 是否允许主报,0-禁止，1-允许，（设备为1-允许，2-禁止）
  int32 enable_report = 1;
}
// 终端当前控制状态
message Afn0c_P0_F6 {
  // 依次k1-k16状态，0-断，1-通（设备为1-断，0-通）
  repeated int32 switchout_status = 1 [ packed = true ];
}
// 终端事件计数器当前值
message Afn0c_P0_F7 {
  // 重要事件计数器
  int32 ec1 = 1;
  // 一般事件计数器
  int32 ec2 = 2;
}
// 终端状态量及变位标志(全数据)
message Afn0c_P0_F9 {
  // 回路状态量状态，依次为1-32路
  repeated Loop_Status loop_status = 1;
  message Loop_Status {
    // 回路当前状态，0-断，1-通
    int32 st_now = 1;
    // 回路状态自上次读取后，是否变化过，0-未变化，1-有变化
    int32 st_changed = 2;
  }
}
// 终端回路事件报警状态(全数据)
message Afn0c_P0_F18 {
  // 回路序号,0xee表示非回路事件
  int32 loop_no = 1;
  // 回路相位，非回路事件填0xee
  int32 loop_phase = 2;
  // 事件状态，参考Afn04_P0_F9的事件代码，1-64个事件，0-无事件，1-发生对应事件
  repeated int32 events_do = 3 [ packed = true ];
}
// 漏电检测数据(全数据)
message Afn0c_P0_F19 {
  // 一次n个回路漏电流，不跳回路（有符号3位小数bcd）
  repeated double leakage_current = 1 [ packed = true ];
}
// 光照度数据(主报)
message Afn0c_P0_F20 {
  // 光照度（0位小数bcd）
  double lux = 1;
  // 温度（有符号2位小数bcd）
  double temperature = 2;
}
// 断电/漏电状态（三相）
message Afn0c_P0_F25 {
  // 欠压断电保护状态,0-正常，1-断电
  int32 voltage_over_lower = 1;
  // 过压断电保护状态,0-正常，1-断电
  int32 voltage_over_upper = 2;
  // 漏电跳闸保护状态，依次16个回路，0-正常，1-断电
  repeated int32 leakage_break = 3 [packed=true];
}
// 请求历史数据
// 模拟量历史数据曲线(出线)
// pn: n 1-48，模拟量回路数量
message Afn0d_Pn_F1 {
  // 起始时间，unix时间戳(上下行)
  int64 dt_start = 1;
  // 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
  int32 data_density = 2;
  // 数据点数(上下行)（最大20）
  int32 data_num = 3;
  // 模拟量(上下行，下行可填充多个回路，1-48,上行为单回路)
  repeated int32 loop_no = 4 [ packed = true ];
  // 以下开始为上行填充
  // 回路数据，依次为每个数据点的数据
  repeated Loop_Data loop_data = 5;
  message Loop_Data {
    // 电压（1位小数bcd）
    double voltage = 1;
    // 电流（有符号3位小数bcd）
    double current = 2;
    // 有功功率（有符号4位小数bcd）
    double active_power = 3;
    // 无功功率（有符号4位小数bcd）
    double reactive_power = 4;
    // 功率因数（有符号1位小数bcd）
    double power_factor = 5;
    // 光控值？？？（0位小数bcd）
    double lux_value = 6;
    // 其他模拟量（没这玩意）
    double other = 7;
  }
}
// 模拟量历史数据曲线(进线)
message Afn0d_P0_F2 {
  // 起始时间，unix时间戳(上下行)
  int64 dt_start = 1;
  // 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
  int32 data_density = 2;
  // 数据点数(上下行)（最大20）
  int32 data_num = 3;
  // 模拟量(上下行)
  int32 loop_no = 4;
  // 以下开始为上行填充
  // A相位数据，依次为每个数据点的数据
  repeated Phase_Data phase_a_data = 5;
  // B相位数据，依次为每个数据点的数据
  repeated Phase_Data phase_b_data = 6;
  // C相位数据，依次为每个数据点的数据
  repeated Phase_Data phase_c_data = 7;
  message Phase_Data {
    // 电压（1位小数bcd）
    double voltage = 1;
    // 电流（有符号3位小数bcd）
    double current = 2;
    // 有功功率（有符号4位小数bcd）
    double active_power = 3;
    // 无功功率（有符号4位小数bcd）
    double reactive_power = 4;
    // 功率因数（有符号1位小数bcd）
    double power_factor = 5;
  }
}
// 漏电历史数据曲线
// pn:n1-8,漏电回路数量
message Afn0d_Pn_F3 {
  // 起始时间，unix时间戳(上下行)
  int64 dt_start = 1;
  // 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
  int32 data_density = 2;
  // 数据点数(上下行)（最大20）
  int32 data_num = 3;
  // 模拟量(上下行，下行可填充多个回路，1-8,上行为单回路)
  repeated int32 loop_no = 4 [ packed = true ];
  // 以下开始为上行填充
  // 依次为每个数据点数据（有符号3位小数bcd）
  repeated double leakage_current = 5 [ packed = true ];
}
// 请求事件记录
// 请求重要/一般事件
message Afn0e_P0_F1 {
  // pn应大于pm
  // 事件起始指针（上下行）0-254
  int32 pm = 1;
  // 事件结束指针（上下行）1-255
  int32 pn = 2;
  // 以下为上行填充字段
  // 当前读到的位置
  int32 ec_now = 3;
  // 事件信息
  repeated Events_Data events_data = 4;
  message Events_Data {
    // 事件号
    int32 event_id = 1;
    // 发生时间
    int64 event_time = 2;
    // 事件数据
    Erc04_Data erc04 = 10;
    Erc05_Data erc05 = 11;
    Erc13_Data erc13 = 12;
    Erc20_Data erc20 = 13;
    Erc20_Data erc21 = 14;
    Erc22_Data erc22 = 15;
    Erc22_Data erc23 = 16;
    Erc22_Data erc24 = 17;
    Erc25_Data erc25 = 18;
    Erc25_Data erc26 = 19;
    Erc25_Data erc27 = 20;
    Erc25_Data erc28 = 21;
    Erc25_Data erc29 = 22;
    Erc25_Data erc30 = 23;
    Erc13_Data erc31 = 24;
    Erc13_Data erc32 = 25;
  }
  // ERC4终端状态量变位记录，该事件可用于门开关报警，但软件需进行状态量序号的匹配
  message Erc04_Data {
    // 变化类型，0-由通到断，1-由断到通
    int32 di_status = 1;
    // 变化的状态量回路
    int32 di_no = 2;
  }
  // ERC5终端遥控跳闸记录
  message Erc05_Data {
    // 开关量输出序号1-16
    int32 switchout_no = 1;
    // 控制类型,0-关，1-开（设备为0-开，1-关，通信服务反向）
    int32 switchout_do = 2;
    // 控制源0-4：分别表示主台控制、液晶控制、最后开关灯时限、时控、光控
    int32 switchout_source = 3;
  }
  // ERC13终端停/上电记录
  message Erc13_Data {
    // 记录类型：0恢复；1报警。
    int32 report_type = 1;
  }
  // ERC20漏电报警记录
  message Erc20_Data {
    // 记录类型：0恢复；1报警。
    int32 report_type = 1;
    // 漏电回路号
    int32 leakage_no = 2;
    // 漏电等级
    int32 leakage_level = 3;
    // 漏电值
    double leakage_current = 4;
  }
  // ERC21 保护跳闸记录（同erc20,不填充leakage_level)
  // ERC22 缺相报警记录
  message Erc22_Data {
    // 记录类型：0恢复；1报警。
    int32 report_type = 1;
    // 相位0--A 相,调整1--B 相,调整2--C 相
    int32 phase = 2;
  }
  // ERC23 过压记录(同erc22)
  // ERC24 欠压记录(同erc22)
  // ERC25 过流记录
  message Erc25_Data {
    // 记录类型：0恢复；1报警。
    int32 report_type = 1;
    // 回路号
    int32 loop_no = 2;
  }
  // ERC26 欠流记录(同erc25)
  // ERC27 接触器未释放记录(同erc25)，硬件报警条件：有电流，继电器断开，开关量输入闭合; 消警：继电器断开，开关量输入断开
  // ERC28 接触器断开记录(同erc25)，硬件报警条件：无电流，继电器闭合，开关量输入断开; 消警：继电器闭合，开关量输入断开
  // ERC29 白天亮灯记录(同erc25)，硬件报警条件：有电流，继电器断开，开关量输入断开; 消警：继电器断开，无电流
  // ERC30 夜间灭灯记录(同erc25)，硬件报警条件：无电流，继电器闭合，开关量输入闭合; 消警：继电器闭合，有电流
  // ERC31 欠压断电记录（同erc13）
  // ERC32 过压断电记录（同erc13）
}
// 数据转发
// 透明转发（上下行）
message Afn10_P0_F2 {
  // 串口配置
  RS_Setting rs_setting = 1;
  // 透传数据命令定义，同二代命令格式，具体见下方每个命令结构体内说明
  string cmd = 2;
  // 抄表
  Wlst_mru_9100 wlst_mru_9100 = 10; // 电表数据
  message Wlst_mru_9100 {
    // cmd: wlst.mru.1100-读数据，wlst.mru.9100-读数据应答，wlst.mru.1300-读地址, wlst.mru.9300-读地址应答
    // 电表地址（该字段与二代不同，请注意）
    int64 addr = 1;
    //抄表类型(1A相，2B相，3C相，4正向有功总电能，5组合有功总电能)
    int32 meter_reading_type = 2;
    //抄表时间段（0当前，1上月，2上上月。。。）
    int32 meter_reading_date = 3;
    //协议版本，1-1997协议，2-2007协议
    int32 ver = 4;
    //数据（wlst.mru.9100上行填充）
    double meter_value = 5;
  }
}
// FTP升级命令
message Afn10_P0_F9 {
  // ftpip,int64算法
  int64 ftp_ip = 1;
  // ftp 端口号
  int32 ftp_port = 2;
  // ftp用户名，最大10个英文字符
  string ftp_user = 3;
  // ftp 密码，最大10个英文字符
  string ftp_pwd = 4;
  // 服务器文件路径，默认'/'，最大20个英文字符，不能有空格
  string ftp_dir = 5;
  // 文件名，最大10个英文字符（含扩展名）
  string ftp_file = 6;
}
// 终端/模块FTP升级结果（上行）
message Afn10_P0_F10 {
  // 升级前软件版本号
  string software_ver_old = 1;
  // 升级前软件发布日期：YYMMDD
  int32 software_date_old = 2;
  // 升级后软件版本号
  string software_ver_new = 3;
  // 升级后软件发布日期：YYMMDD
  int32 software_date_new = 4;
  // 升级发生时间,unix时间戳
  int64 dt_upgrade = 5;
  // 设备类型（f41上行填写）
  string dev_type = 6;
}