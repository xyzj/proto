// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_wlst.proto

package wlst_gb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 串口配置
type RS_Setting struct {
	// 目标端口序号，默认0，上行254表示设备无应答，255表示主报
	Idx int32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	// 波特率,0表示300bps；1表示600 bps；2表示1200 bps；3表示2400 bps；4表示4800 bps；5表示9600 bps；6表示14400；7表示19200；8表示38400；9表示56000；A表示57600；B表示115200
	Bps int32 `protobuf:"varint,2,opt,name=bps,proto3" json:"bps,omitempty"`
	// 校验方式0-无，1-奇，2-偶
	Rc int32 `protobuf:"varint,3,opt,name=rc,proto3" json:"rc,omitempty"`
}

func (m *RS_Setting) Reset()         { *m = RS_Setting{} }
func (m *RS_Setting) String() string { return proto.CompactTextString(m) }
func (*RS_Setting) ProtoMessage()    {}
func (*RS_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{0}
}
func (m *RS_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RS_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RS_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RS_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RS_Setting.Merge(m, src)
}
func (m *RS_Setting) XXX_Size() int {
	return m.Size()
}
func (m *RS_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_RS_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_RS_Setting proto.InternalMessageInfo

func (m *RS_Setting) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *RS_Setting) GetBps() int32 {
	if m != nil {
		return m.Bps
	}
	return 0
}

func (m *RS_Setting) GetRc() int32 {
	if m != nil {
		return m.Rc
	}
	return 0
}

// 数据单元标识
type UnitIdentification struct {
	// 信息点DA
	Pn int32 `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	// 信息类DT
	Fn int32 `protobuf:"varint,2,opt,name=fn,proto3" json:"fn,omitempty"`
}

func (m *UnitIdentification) Reset()         { *m = UnitIdentification{} }
func (m *UnitIdentification) String() string { return proto.CompactTextString(m) }
func (*UnitIdentification) ProtoMessage()    {}
func (*UnitIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{1}
}
func (m *UnitIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnitIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitIdentification.Merge(m, src)
}
func (m *UnitIdentification) XXX_Size() int {
	return m.Size()
}
func (m *UnitIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_UnitIdentification proto.InternalMessageInfo

func (m *UnitIdentification) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UnitIdentification) GetFn() int32 {
	if m != nil {
		return m.Fn
	}
	return 0
}

// 数据标识信息
type DataIdentification struct {
	// 数据单元标识
	UintID []*UnitIdentification `protobuf:"bytes,1,rep,name=uintID,proto3" json:"uintID,omitempty"`
	// dir 数据方向,0-下行，1-上行
	Dir int32 `protobuf:"varint,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// 指令有效的分钟数，0-不启用（默认），>0指令在指定的分钟内才有效，超时丢弃（下行有，暂不用）
	Tp int32 `protobuf:"varint,3,opt,name=tp,proto3" json:"tp,omitempty"`
	// 认证码(未支持)
	Pw string `protobuf:"bytes,5,opt,name=pw,proto3" json:"pw,omitempty"`
	// 高优先级事件数量（上行才有）
	Ec1 int32 `protobuf:"varint,6,opt,name=ec1,proto3" json:"ec1,omitempty"`
	// 普通优先级事件数量（上行才有）
	Ec2 int32 `protobuf:"varint,7,opt,name=ec2,proto3" json:"ec2,omitempty"`
	// 顺序码0-15
	Seq int32 `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
	// afn 功能码
	Afn int32 `protobuf:"varint,9,opt,name=afn,proto3" json:"afn,omitempty"`
	// fun 功能码
	Fun int32 `protobuf:"varint,10,opt,name=fun,proto3" json:"fun,omitempty"`
	// 区域码，默认"0000"
	Area string `protobuf:"bytes,11,opt,name=area,proto3" json:"area,omitempty"`
	// 设备地址，1-65534，（65535为广播地址下行不可使用）
	Addr int64 `protobuf:"varint,12,opt,name=addr,proto3" json:"addr,omitempty"`
	// 命令优先级,0-普通，1-高，普通优先级命令先进先出，高优先级命令后进先出
	Sp int32 `protobuf:"varint,13,opt,name=sp,proto3" json:"sp,omitempty"`
}

func (m *DataIdentification) Reset()         { *m = DataIdentification{} }
func (m *DataIdentification) String() string { return proto.CompactTextString(m) }
func (*DataIdentification) ProtoMessage()    {}
func (*DataIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{2}
}
func (m *DataIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataIdentification.Merge(m, src)
}
func (m *DataIdentification) XXX_Size() int {
	return m.Size()
}
func (m *DataIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_DataIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_DataIdentification proto.InternalMessageInfo

func (m *DataIdentification) GetUintID() []*UnitIdentification {
	if m != nil {
		return m.UintID
	}
	return nil
}

func (m *DataIdentification) GetDir() int32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

func (m *DataIdentification) GetTp() int32 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *DataIdentification) GetPw() string {
	if m != nil {
		return m.Pw
	}
	return ""
}

func (m *DataIdentification) GetEc1() int32 {
	if m != nil {
		return m.Ec1
	}
	return 0
}

func (m *DataIdentification) GetEc2() int32 {
	if m != nil {
		return m.Ec2
	}
	return 0
}

func (m *DataIdentification) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DataIdentification) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

func (m *DataIdentification) GetFun() int32 {
	if m != nil {
		return m.Fun
	}
	return 0
}

func (m *DataIdentification) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *DataIdentification) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *DataIdentification) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

type MsgGBOpen struct {
	// 指令头
	// 依据DataID.unitid的内容读取对应结构体数据
	// 一条指令可能存在多个unitid，因此可以读取多个结构体数据
	// 但是注意：多个unitid必须属于同一个fun和afn的组合
	DataID *DataIdentification `protobuf:"bytes,1,opt,name=DataID,proto3" json:"DataID,omitempty"`
	// 通用应答
	// 全部确认
	Afn00P0F1 *Afn00_P0_F1 `protobuf:"bytes,10,opt,name=afn00_p0_f1,json=afn00P0F1,proto3" json:"afn00_p0_f1,omitempty"`
	// 全部否认
	Afn00P0F2 *Afn00_P0_F1 `protobuf:"bytes,11,opt,name=afn00_p0_f2,json=afn00P0F2,proto3" json:"afn00_p0_f2,omitempty"`
	// 按单元标识确认/否认
	Afn00P0F3 *Afn00_P0_F3 `protobuf:"bytes,12,opt,name=afn00_p0_f3,json=afn00P0F3,proto3" json:"afn00_p0_f3,omitempty"`
	// 复位（下行无数据区）通用应答
	//  pn: 0
	//  fn: 1-硬件初始化（重启），2-数据区初始化，3-恢复出厂值，4-参数全体数据区
	// 设置参数，所有设置指令均为通用应答
	// 终端上行通信口通信参数设置
	Afn04P0F1 *Afn04_P0_F1 `protobuf:"bytes,100,opt,name=afn04_p0_f1,json=afn04P0F1,proto3" json:"afn04_p0_f1,omitempty"`
	// 主站 IP 地址  和端口设置
	Afn04P0F3 *Afn04_P0_F3 `protobuf:"bytes,101,opt,name=afn04_p0_f3,json=afn04P0F3,proto3" json:"afn04_p0_f3,omitempty"`
	// 终端事件记录配置设置
	Afn04P0F9 *Afn04_P0_F9 `protobuf:"bytes,102,opt,name=afn04_p0_f9,json=afn04P0F9,proto3" json:"afn04_p0_f9,omitempty"`
	// 设备状态输入参数
	Afn04P0F10 *Afn04_P0_F10 `protobuf:"bytes,103,opt,name=afn04_p0_f10,json=afn04P0F10,proto3" json:"afn04_p0_f10,omitempty"`
	// GPS 地理位置信息
	Afn04P0F11 *Afn04_P0_F11 `protobuf:"bytes,104,opt,name=afn04_p0_f11,json=afn04P0F11,proto3" json:"afn04_p0_f11,omitempty"`
	// 扩展设备配置参数
	// pn: n为0-99
	Afn04PnF14 []*Afn04_Pn_F14 `protobuf:"bytes,105,rep,name=afn04_pn_f14,json=afn04PnF14,proto3" json:"afn04_pn_f14,omitempty"`
	// 继电器输出控制方案
	// pn: n为方案号，1-8
	// 当有多个方案同时下发时，对应填充多少个数据结构
	// 清除方案指令应单独下发，将时段数设置为0，并标识需要清除的开关量输出即可，其他字段可不填。
	Afn04PnF15 []*Afn04_Pn_F15 `protobuf:"bytes,106,rep,name=afn04_pn_f15,json=afn04PnF15,proto3" json:"afn04_pn_f15,omitempty"`
	// 开关量输出参数关联
	Afn04P0F41 *Afn04_P0_F41 `protobuf:"bytes,107,opt,name=afn04_p0_f41,json=afn04P0F41,proto3" json:"afn04_p0_f41,omitempty"`
	// 模拟量采集参数关联
	Afn04P0F42 *Afn04_P0_F42 `protobuf:"bytes,108,opt,name=afn04_p0_f42,json=afn04P0F42,proto3" json:"afn04_p0_f42,omitempty"`
	// 周回路控制表
	Afn04P0F46 *Afn04_P0_F46 `protobuf:"bytes,109,opt,name=afn04_p0_f46,json=afn04P0F46,proto3" json:"afn04_p0_f46,omitempty"`
	// 经纬度开关灯偏移
	Afn04P0F49 *Afn04_P0_F49 `protobuf:"bytes,110,opt,name=afn04_p0_f49,json=afn04P0F49,proto3" json:"afn04_p0_f49,omitempty"`
	// 设定全数据上送周期
	Afn04P0F50 *Afn04_P0_F50 `protobuf:"bytes,111,opt,name=afn04_p0_f50,json=afn04P0F50,proto3" json:"afn04_p0_f50,omitempty"`
	// 设置模拟量上下限
	Afn04P0F51 *Afn04_P0_F51 `protobuf:"bytes,112,opt,name=afn04_p0_f51,json=afn04P0F51,proto3" json:"afn04_p0_f51,omitempty"`
	// 设置漏电保护参数
	Afn04P0F52 *Afn04_P0_F52 `protobuf:"bytes,113,opt,name=afn04_p0_f52,json=afn04P0F52,proto3" json:"afn04_p0_f52,omitempty"`
	// 设置光照度限值 参数
	Afn04P0F53 *Afn04_P0_F53 `protobuf:"bytes,114,opt,name=afn04_p0_f53,json=afn04P0F53,proto3" json:"afn04_p0_f53,omitempty"`
	// 停运/投运
	Afn04P0F57 *Afn04_P0_F57 `protobuf:"bytes,115,opt,name=afn04_p0_f57,json=afn04P0F57,proto3" json:"afn04_p0_f57,omitempty"`
	// 控制命令，所有控制指令均为通用应答
	// pn:0
	// fn: 29-允许主报，37-禁止主报（这两个下行没有数据单元）
	// 允许合闸/跳闸
	Afn05P0F1 *Afn05_P0_F1 `protobuf:"bytes,200,opt,name=afn05_p0_f1,json=afn05P0F1,proto3" json:"afn05_p0_f1,omitempty"`
	// 消除漏电分闸/报警
	Afn05P0F9 *Afn05_P0_F9 `protobuf:"bytes,201,opt,name=afn05_p0_f9,json=afn05P0F9,proto3" json:"afn05_p0_f9,omitempty"`
	// 对时命令
	Afn05P0F31 *Afn05_P0_F31 `protobuf:"bytes,202,opt,name=afn05_p0_f31,json=afn05P0F31,proto3" json:"afn05_p0_f31,omitempty"`
	// 查询终端信息，下行均无数据单元
	// 终端版本信息（上行格式）
	Afn09P0F1 *Afn09_P0_F1 `protobuf:"bytes,300,opt,name=afn09_p0_f1,json=afn09P0F1,proto3" json:"afn09_p0_f1,omitempty"`
	// 查询参数，下行大多无数据单元
	// 终端上行通信口通信参数设置（上行）
	Afn0AP0F1 *Afn04_P0_F1 `protobuf:"bytes,400,opt,name=afn0a_p0_f1,json=afn0aP0F1,proto3" json:"afn0a_p0_f1,omitempty"`
	// 主站 IP 地址  和端口（上行）
	Afn0AP0F3 *Afn04_P0_F3 `protobuf:"bytes,401,opt,name=afn0a_p0_f3,json=afn0aP0F3,proto3" json:"afn0a_p0_f3,omitempty"`
	// 终端事件记录配置设置（上行）
	Afn0AP0F9 *Afn04_P0_F9 `protobuf:"bytes,406,opt,name=afn0a_p0_f9,json=afn0aP0F9,proto3" json:"afn0a_p0_f9,omitempty"`
	// 设备状态输入参数（上行）
	Afn0AP0F10 *Afn04_P0_F10 `protobuf:"bytes,407,opt,name=afn0a_p0_f10,json=afn0aP0F10,proto3" json:"afn0a_p0_f10,omitempty"`
	// GPS 地理位置信息（上行）
	Afn0AP0F11 *Afn04_P0_F11 `protobuf:"bytes,408,opt,name=afn0a_p0_f11,json=afn0aP0F11,proto3" json:"afn0a_p0_f11,omitempty"`
	// 扩展设备配置参数（上行）
	Afn0APnF14 []*Afn04_Pn_F14 `protobuf:"bytes,411,rep,name=afn0a_pn_f14,json=afn0aPnF14,proto3" json:"afn0a_pn_f14,omitempty"`
	// 继电器输出控制方案（上行）
	// pn: n为方案号，1-8
	Afn0APnF15 []*Afn04_Pn_F15 `protobuf:"bytes,412,rep,name=afn0a_pn_f15,json=afn0aPnF15,proto3" json:"afn0a_pn_f15,omitempty"`
	// 开关量输出参数关联（上行）
	Afn0AP0F41 *Afn04_P0_F41 `protobuf:"bytes,415,opt,name=afn0a_p0_f41,json=afn0aP0F41,proto3" json:"afn0a_p0_f41,omitempty"`
	// 模拟量采集参数关联（上行）
	Afn0AP0F42 *Afn04_P0_F42 `protobuf:"bytes,416,opt,name=afn0a_p0_f42,json=afn0aP0F42,proto3" json:"afn0a_p0_f42,omitempty"`
	// 周回路控制表（上行）
	Afn0AP0F46 *Afn04_P0_F46 `protobuf:"bytes,417,opt,name=afn0a_p0_f46,json=afn0aP0F46,proto3" json:"afn0a_p0_f46,omitempty"`
	// 经纬度开关灯偏移（上行）
	Afn0AP0F49 *Afn04_P0_F49 `protobuf:"bytes,418,opt,name=afn0a_p0_f49,json=afn0aP0F49,proto3" json:"afn0a_p0_f49,omitempty"`
	// 查询全数据上送周期（上行）
	Afn0AP0F50 *Afn04_P0_F50 `protobuf:"bytes,419,opt,name=afn0a_p0_f50,json=afn0aP0F50,proto3" json:"afn0a_p0_f50,omitempty"`
	// 查询模拟量上下限（上行）
	Afn0AP0F51 *Afn04_P0_F51 `protobuf:"bytes,420,opt,name=afn0a_p0_f51,json=afn0aP0F51,proto3" json:"afn0a_p0_f51,omitempty"`
	// 查询漏电保护参数（上行）
	Afn0AP0F52 *Afn04_P0_F52 `protobuf:"bytes,421,opt,name=afn0a_p0_f52,json=afn0aP0F52,proto3" json:"afn0a_p0_f52,omitempty"`
	// 查询光照度限值 参数（上行）
	Afn0AP0F53 *Afn04_P0_F53 `protobuf:"bytes,422,opt,name=afn0a_p0_f53,json=afn0aP0F53,proto3" json:"afn0a_p0_f53,omitempty"`
	// 停运/投运（上行）
	Afn0AP0F57 *Afn04_P0_F57 `protobuf:"bytes,423,opt,name=afn0a_p0_f57,json=afn0aP0F57,proto3" json:"afn0a_p0_f57,omitempty"`
	// 请求实时数据，下行无数据单元，数据结构均为上行结构
	// 出线模拟量数据(全数据)(报警主报)（上行）
	// pn: n是模拟量回路序号，0xffff表示所有回路(只用所有回路)
	Afn0CPnF1 *Afn0C_Pn_F1 `protobuf:"bytes,500,opt,name=afn0c_pn_f1,json=afn0cPnF1,proto3" json:"afn0c_pn_f1,omitempty"`
	// 终端日历时钟（上行）
	Afn0CP0F2 *Afn0C_P0_F2 `protobuf:"bytes,501,opt,name=afn0c_p0_f2,json=afn0cP0F2,proto3" json:"afn0c_p0_f2,omitempty"`
	// 进线模拟量数据(全数据)(报警主报)（上行）
	Afn0CP0F3 *Afn0C_P0_F3 `protobuf:"bytes,502,opt,name=afn0c_p0_f3,json=afn0cP0F3,proto3" json:"afn0c_p0_f3,omitempty"`
	// 终端上行通信状态（上行）
	Afn0CP0F4 *Afn0C_P0_F4 `protobuf:"bytes,503,opt,name=afn0c_p0_f4,json=afn0cP0F4,proto3" json:"afn0c_p0_f4,omitempty"`
	// 终端当前控制状态（上行）
	Afn0CP0F6 *Afn0C_P0_F6 `protobuf:"bytes,504,opt,name=afn0c_p0_f6,json=afn0cP0F6,proto3" json:"afn0c_p0_f6,omitempty"`
	// 终端事件计数器当前值（上行）
	Afn0CP0F7 *Afn0C_P0_F7 `protobuf:"bytes,505,opt,name=afn0c_p0_f7,json=afn0cP0F7,proto3" json:"afn0c_p0_f7,omitempty"`
	// 终端状态量及变位标志(全数据)（上行）
	Afn0CP0F9 *Afn0C_P0_F9 `protobuf:"bytes,506,opt,name=afn0c_p0_f9,json=afn0cP0F9,proto3" json:"afn0c_p0_f9,omitempty"`
	// 终端回路事件报警状态(全数据)（上行）
	Afn0CP0F18 *Afn0C_P0_F18 `protobuf:"bytes,507,opt,name=afn0c_p0_f18,json=afn0cP0F18,proto3" json:"afn0c_p0_f18,omitempty"`
	// 漏电检测数据(全数据)（上行）
	Afn0CP0F19 *Afn0C_P0_F19 `protobuf:"bytes,508,opt,name=afn0c_p0_f19,json=afn0cP0F19,proto3" json:"afn0c_p0_f19,omitempty"`
	// 光照度数据(主报)（上行）
	Afn0CP0F20 *Afn0C_P0_F20 `protobuf:"bytes,509,opt,name=afn0c_p0_f20,json=afn0cP0F20,proto3" json:"afn0c_p0_f20,omitempty"`
	// 请求历史数据
	// 模拟量历史数据曲线(出线)
	// pn：n为电流回路1-48
	Afn0DPnF1 *Afn0D_Pn_F1 `protobuf:"bytes,600,opt,name=afn0d_pn_f1,json=afn0dPnF1,proto3" json:"afn0d_pn_f1,omitempty"`
	// 模拟量历史数据曲线(进线)
	Afn0DP0F2 *Afn0D_P0_F2 `protobuf:"bytes,601,opt,name=afn0d_p0_f2,json=afn0dP0F2,proto3" json:"afn0d_p0_f2,omitempty"`
	// 漏电历史数据曲线
	// pn：n为漏电回路1-8
	Afn0DPnF3 *Afn0D_Pn_F3 `protobuf:"bytes,602,opt,name=afn0d_pn_f3,json=afn0dPnF3,proto3" json:"afn0d_pn_f3,omitempty"`
	// 请求事件记录
	// 请求重要/一般事件（上下行）
	// 查询重要事件时pn=0,fn=1
	// 查询一般事件时pn=0,fn=2
	Afn0EP0F1 *Afn0E_P0_F1 `protobuf:"bytes,700,opt,name=afn0e_p0_f1,json=afn0eP0F1,proto3" json:"afn0e_p0_f1,omitempty"`
	// 数据转发
	// 透明转发
	Afn10P0F2 *Afn10_P0_F2 `protobuf:"bytes,800,opt,name=afn10_p0_f2,json=afn10P0F2,proto3" json:"afn10_p0_f2,omitempty"`
	// FTP升级命令
	Afn10P0F9 *Afn10_P0_F9 `protobuf:"bytes,801,opt,name=afn10_p0_f9,json=afn10P0F9,proto3" json:"afn10_p0_f9,omitempty"`
	// 终端FTP升级结果
	Afn10P0F10 *Afn10_P0_F10 `protobuf:"bytes,802,opt,name=afn10_p0_f10,json=afn10P0F10,proto3" json:"afn10_p0_f10,omitempty"`
	// 模块FTP升级结果
	Afn10P0F41 *Afn10_P0_F10 `protobuf:"bytes,803,opt,name=afn10_p0_f41,json=afn10P0F41,proto3" json:"afn10_p0_f41,omitempty"`
}

func (m *MsgGBOpen) Reset()         { *m = MsgGBOpen{} }
func (m *MsgGBOpen) String() string { return proto.CompactTextString(m) }
func (*MsgGBOpen) ProtoMessage()    {}
func (*MsgGBOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{3}
}
func (m *MsgGBOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGBOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGBOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGBOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGBOpen.Merge(m, src)
}
func (m *MsgGBOpen) XXX_Size() int {
	return m.Size()
}
func (m *MsgGBOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGBOpen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGBOpen proto.InternalMessageInfo

func (m *MsgGBOpen) GetDataID() *DataIdentification {
	if m != nil {
		return m.DataID
	}
	return nil
}

func (m *MsgGBOpen) GetAfn00P0F1() *Afn00_P0_F1 {
	if m != nil {
		return m.Afn00P0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn00P0F2() *Afn00_P0_F1 {
	if m != nil {
		return m.Afn00P0F2
	}
	return nil
}

func (m *MsgGBOpen) GetAfn00P0F3() *Afn00_P0_F3 {
	if m != nil {
		return m.Afn00P0F3
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F1() *Afn04_P0_F1 {
	if m != nil {
		return m.Afn04P0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F3() *Afn04_P0_F3 {
	if m != nil {
		return m.Afn04P0F3
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F9() *Afn04_P0_F9 {
	if m != nil {
		return m.Afn04P0F9
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F10() *Afn04_P0_F10 {
	if m != nil {
		return m.Afn04P0F10
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F11() *Afn04_P0_F11 {
	if m != nil {
		return m.Afn04P0F11
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04PnF14() []*Afn04_Pn_F14 {
	if m != nil {
		return m.Afn04PnF14
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04PnF15() []*Afn04_Pn_F15 {
	if m != nil {
		return m.Afn04PnF15
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F41() *Afn04_P0_F41 {
	if m != nil {
		return m.Afn04P0F41
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F42() *Afn04_P0_F42 {
	if m != nil {
		return m.Afn04P0F42
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F46() *Afn04_P0_F46 {
	if m != nil {
		return m.Afn04P0F46
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F49() *Afn04_P0_F49 {
	if m != nil {
		return m.Afn04P0F49
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F50() *Afn04_P0_F50 {
	if m != nil {
		return m.Afn04P0F50
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F51() *Afn04_P0_F51 {
	if m != nil {
		return m.Afn04P0F51
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F52() *Afn04_P0_F52 {
	if m != nil {
		return m.Afn04P0F52
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F53() *Afn04_P0_F53 {
	if m != nil {
		return m.Afn04P0F53
	}
	return nil
}

func (m *MsgGBOpen) GetAfn04P0F57() *Afn04_P0_F57 {
	if m != nil {
		return m.Afn04P0F57
	}
	return nil
}

func (m *MsgGBOpen) GetAfn05P0F1() *Afn05_P0_F1 {
	if m != nil {
		return m.Afn05P0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn05P0F9() *Afn05_P0_F9 {
	if m != nil {
		return m.Afn05P0F9
	}
	return nil
}

func (m *MsgGBOpen) GetAfn05P0F31() *Afn05_P0_F31 {
	if m != nil {
		return m.Afn05P0F31
	}
	return nil
}

func (m *MsgGBOpen) GetAfn09P0F1() *Afn09_P0_F1 {
	if m != nil {
		return m.Afn09P0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F1() *Afn04_P0_F1 {
	if m != nil {
		return m.Afn0AP0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F3() *Afn04_P0_F3 {
	if m != nil {
		return m.Afn0AP0F3
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F9() *Afn04_P0_F9 {
	if m != nil {
		return m.Afn0AP0F9
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F10() *Afn04_P0_F10 {
	if m != nil {
		return m.Afn0AP0F10
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F11() *Afn04_P0_F11 {
	if m != nil {
		return m.Afn0AP0F11
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0APnF14() []*Afn04_Pn_F14 {
	if m != nil {
		return m.Afn0APnF14
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0APnF15() []*Afn04_Pn_F15 {
	if m != nil {
		return m.Afn0APnF15
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F41() *Afn04_P0_F41 {
	if m != nil {
		return m.Afn0AP0F41
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F42() *Afn04_P0_F42 {
	if m != nil {
		return m.Afn0AP0F42
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F46() *Afn04_P0_F46 {
	if m != nil {
		return m.Afn0AP0F46
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F49() *Afn04_P0_F49 {
	if m != nil {
		return m.Afn0AP0F49
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F50() *Afn04_P0_F50 {
	if m != nil {
		return m.Afn0AP0F50
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F51() *Afn04_P0_F51 {
	if m != nil {
		return m.Afn0AP0F51
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F52() *Afn04_P0_F52 {
	if m != nil {
		return m.Afn0AP0F52
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F53() *Afn04_P0_F53 {
	if m != nil {
		return m.Afn0AP0F53
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0AP0F57() *Afn04_P0_F57 {
	if m != nil {
		return m.Afn0AP0F57
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CPnF1() *Afn0C_Pn_F1 {
	if m != nil {
		return m.Afn0CPnF1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F2() *Afn0C_P0_F2 {
	if m != nil {
		return m.Afn0CP0F2
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F3() *Afn0C_P0_F3 {
	if m != nil {
		return m.Afn0CP0F3
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F4() *Afn0C_P0_F4 {
	if m != nil {
		return m.Afn0CP0F4
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F6() *Afn0C_P0_F6 {
	if m != nil {
		return m.Afn0CP0F6
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F7() *Afn0C_P0_F7 {
	if m != nil {
		return m.Afn0CP0F7
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F9() *Afn0C_P0_F9 {
	if m != nil {
		return m.Afn0CP0F9
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F18() *Afn0C_P0_F18 {
	if m != nil {
		return m.Afn0CP0F18
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F19() *Afn0C_P0_F19 {
	if m != nil {
		return m.Afn0CP0F19
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0CP0F20() *Afn0C_P0_F20 {
	if m != nil {
		return m.Afn0CP0F20
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0DPnF1() *Afn0D_Pn_F1 {
	if m != nil {
		return m.Afn0DPnF1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0DP0F2() *Afn0D_P0_F2 {
	if m != nil {
		return m.Afn0DP0F2
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0DPnF3() *Afn0D_Pn_F3 {
	if m != nil {
		return m.Afn0DPnF3
	}
	return nil
}

func (m *MsgGBOpen) GetAfn0EP0F1() *Afn0E_P0_F1 {
	if m != nil {
		return m.Afn0EP0F1
	}
	return nil
}

func (m *MsgGBOpen) GetAfn10P0F2() *Afn10_P0_F2 {
	if m != nil {
		return m.Afn10P0F2
	}
	return nil
}

func (m *MsgGBOpen) GetAfn10P0F9() *Afn10_P0_F9 {
	if m != nil {
		return m.Afn10P0F9
	}
	return nil
}

func (m *MsgGBOpen) GetAfn10P0F10() *Afn10_P0_F10 {
	if m != nil {
		return m.Afn10P0F10
	}
	return nil
}

func (m *MsgGBOpen) GetAfn10P0F41() *Afn10_P0_F10 {
	if m != nil {
		return m.Afn10P0F41
	}
	return nil
}

// 确认否认（仅上行）
type Afn00_P0_F1 struct {
	// 被确认的功能码
	Afn int32 `protobuf:"varint,1,opt,name=afn,proto3" json:"afn,omitempty"`
}

func (m *Afn00_P0_F1) Reset()         { *m = Afn00_P0_F1{} }
func (m *Afn00_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn00_P0_F1) ProtoMessage()    {}
func (*Afn00_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{4}
}
func (m *Afn00_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn00_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn00_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn00_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn00_P0_F1.Merge(m, src)
}
func (m *Afn00_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn00_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn00_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn00_P0_F1 proto.InternalMessageInfo

func (m *Afn00_P0_F1) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

// 按单元标识确认/否认（仅上行）
type Afn00_P0_F3 struct {
	// 被确认的功能码
	Afn int32 `protobuf:"varint,1,opt,name=afn,proto3" json:"afn,omitempty"`
	// 数据单元标识
	UnitId []*UnitIdentification `protobuf:"bytes,2,rep,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	// 单元标识状态，0-失败，1-正确（原始数据为0-正确，1-错误，通讯层解析时反转）
	Status []int32 `protobuf:"varint,3,rep,packed,name=status,proto3" json:"status,omitempty"`
}

func (m *Afn00_P0_F3) Reset()         { *m = Afn00_P0_F3{} }
func (m *Afn00_P0_F3) String() string { return proto.CompactTextString(m) }
func (*Afn00_P0_F3) ProtoMessage()    {}
func (*Afn00_P0_F3) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{5}
}
func (m *Afn00_P0_F3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn00_P0_F3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn00_P0_F3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn00_P0_F3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn00_P0_F3.Merge(m, src)
}
func (m *Afn00_P0_F3) XXX_Size() int {
	return m.Size()
}
func (m *Afn00_P0_F3) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn00_P0_F3.DiscardUnknown(m)
}

var xxx_messageInfo_Afn00_P0_F3 proto.InternalMessageInfo

func (m *Afn00_P0_F3) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

func (m *Afn00_P0_F3) GetUnitId() []*UnitIdentification {
	if m != nil {
		return m.UnitId
	}
	return nil
}

func (m *Afn00_P0_F3) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

// 设置参数
// 终端上行通信口通信参数设置
type Afn04_P0_F1 struct {
	// 终端数据传输延时时间 RTS 20ms*value
	Rts int32 `protobuf:"varint,1,opt,name=rts,proto3" json:"rts,omitempty"`
	// 终端作为启动站允许发送传输延时时间,分钟
	MasterRts int32 `protobuf:"varint,2,opt,name=master_rts,json=masterRts,proto3" json:"master_rts,omitempty"`
	// 终端等待从动站响应的超时时间,秒
	ResendTimeout int32 `protobuf:"varint,3,opt,name=resend_timeout,json=resendTimeout,proto3" json:"resend_timeout,omitempty"`
	// 终端等待从动站响应的重发次数，0-3,0-不重发
	ResendNum int32 `protobuf:"varint,4,opt,name=resend_num,json=resendNum,proto3" json:"resend_num,omitempty"`
	// 主动上报是否需要主站下发确认0-不需要，1-需要,
	// 依次：实时数据，历史数据，事件记录
	ReportMark []int32 `protobuf:"varint,5,rep,packed,name=report_mark,json=reportMark,proto3" json:"report_mark,omitempty"`
	// 心跳周期,分钟
	KeepAlive int32 `protobuf:"varint,6,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (m *Afn04_P0_F1) Reset()         { *m = Afn04_P0_F1{} }
func (m *Afn04_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F1) ProtoMessage()    {}
func (*Afn04_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{6}
}
func (m *Afn04_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F1.Merge(m, src)
}
func (m *Afn04_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F1 proto.InternalMessageInfo

func (m *Afn04_P0_F1) GetRts() int32 {
	if m != nil {
		return m.Rts
	}
	return 0
}

func (m *Afn04_P0_F1) GetMasterRts() int32 {
	if m != nil {
		return m.MasterRts
	}
	return 0
}

func (m *Afn04_P0_F1) GetResendTimeout() int32 {
	if m != nil {
		return m.ResendTimeout
	}
	return 0
}

func (m *Afn04_P0_F1) GetResendNum() int32 {
	if m != nil {
		return m.ResendNum
	}
	return 0
}

func (m *Afn04_P0_F1) GetReportMark() []int32 {
	if m != nil {
		return m.ReportMark
	}
	return nil
}

func (m *Afn04_P0_F1) GetKeepAlive() int32 {
	if m != nil {
		return m.KeepAlive
	}
	return 0
}

// 主站 IP 地址  和端口设置
type Afn04_P0_F3 struct {
	// 主ip
	MainIp string `protobuf:"bytes,1,opt,name=main_ip,json=mainIp,proto3" json:"main_ip,omitempty"`
	// 主端口
	MainPort int32 `protobuf:"varint,2,opt,name=main_port,json=mainPort,proto3" json:"main_port,omitempty"`
	// 备用ip
	BackupIp string `protobuf:"bytes,3,opt,name=backup_ip,json=backupIp,proto3" json:"backup_ip,omitempty"`
	// 备用端口
	BackupPort int32 `protobuf:"varint,4,opt,name=backup_port,json=backupPort,proto3" json:"backup_port,omitempty"`
	// apn
	Apn string `protobuf:"bytes,5,opt,name=apn,proto3" json:"apn,omitempty"`
	// 用户名
	User string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	// 密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (m *Afn04_P0_F3) Reset()         { *m = Afn04_P0_F3{} }
func (m *Afn04_P0_F3) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F3) ProtoMessage()    {}
func (*Afn04_P0_F3) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{7}
}
func (m *Afn04_P0_F3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F3.Merge(m, src)
}
func (m *Afn04_P0_F3) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F3) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F3.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F3 proto.InternalMessageInfo

func (m *Afn04_P0_F3) GetMainIp() string {
	if m != nil {
		return m.MainIp
	}
	return ""
}

func (m *Afn04_P0_F3) GetMainPort() int32 {
	if m != nil {
		return m.MainPort
	}
	return 0
}

func (m *Afn04_P0_F3) GetBackupIp() string {
	if m != nil {
		return m.BackupIp
	}
	return ""
}

func (m *Afn04_P0_F3) GetBackupPort() int32 {
	if m != nil {
		return m.BackupPort
	}
	return 0
}

func (m *Afn04_P0_F3) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *Afn04_P0_F3) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Afn04_P0_F3) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

// 终端事件记录配置设置
type Afn04_P0_F9 struct {
	// 事件代码：（1）-终端目前支持的事件
	// 1 数据初始化和版本变更
	// 2 参数丢失
	// 3 参数变更
	// 4 终端状态量变位（1）
	// 5 终端遥控跳闸（1）
	// 6 电流回路异常
	// 7 电能表参数变更
	// 8 电压回路异常
	// 9 消息认∕否认证错误
	// 10 电压越限
	// 11 电流越限
	// 12 路灯控制器批量设置参数异常
	// 13 终端停/上电（1）
	// 14 直流模拟量越限
	// 15 电压/电流不平衡越限
	// 16 终端故障
	// 17 终端和路灯控制器通信失败
	// 18 路灯控制器运行状态字变位
	// 19 路灯控制器异常
	// 20 漏电报警（1）
	// 21 保护跳闸（1）
	// 22 缺相报警（1）
	// 23 过压（1）
	// 24 欠压（1）
	// 25 过流（1）
	// 26 欠流（1）
	// 27 接触器未释放 ( 有I&开关闭合)（1）
	// 28 接触器断开(无 I&开关断开)（1）
	// 29 白天亮灯(有 I&开关断开)（1）
	// 30 夜间灭灯(无 I&开关闭合)（1）
	// 31 欠压保护断电（1）
	// 32 过压保护断电（1）
	// 需要记录的事件标识0-不记录，1-记录
	EventsAvailable []int32 `protobuf:"varint,1,rep,packed,name=events_available,json=eventsAvailable,proto3" json:"events_available,omitempty"`
	// 需要主报的事件表示0-不主报，1-主报
	EventsReport []int32 `protobuf:"varint,2,rep,packed,name=events_report,json=eventsReport,proto3" json:"events_report,omitempty"`
}

func (m *Afn04_P0_F9) Reset()         { *m = Afn04_P0_F9{} }
func (m *Afn04_P0_F9) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F9) ProtoMessage()    {}
func (*Afn04_P0_F9) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{8}
}
func (m *Afn04_P0_F9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F9.Merge(m, src)
}
func (m *Afn04_P0_F9) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F9) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F9.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F9 proto.InternalMessageInfo

func (m *Afn04_P0_F9) GetEventsAvailable() []int32 {
	if m != nil {
		return m.EventsAvailable
	}
	return nil
}

func (m *Afn04_P0_F9) GetEventsReport() []int32 {
	if m != nil {
		return m.EventsReport
	}
	return nil
}

// 设备状态输入参数
type Afn04_P0_F10 struct {
	// 状态量接入标志位(对应 1~32 路状态量)1-接入，0-未接入
	SwitchinAvailable []int32 `protobuf:"varint,1,rep,packed,name=switchin_available,json=switchinAvailable,proto3" json:"switchin_available,omitempty"`
	// 状态量属性标志位(对应 1~32 路状态量) 1-常开，0-常闭
	SwitchinHopping []int32 `protobuf:"varint,2,rep,packed,name=switchin_hopping,json=switchinHopping,proto3" json:"switchin_hopping,omitempty"`
}

func (m *Afn04_P0_F10) Reset()         { *m = Afn04_P0_F10{} }
func (m *Afn04_P0_F10) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F10) ProtoMessage()    {}
func (*Afn04_P0_F10) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{9}
}
func (m *Afn04_P0_F10) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F10) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F10.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F10) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F10.Merge(m, src)
}
func (m *Afn04_P0_F10) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F10) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F10.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F10 proto.InternalMessageInfo

func (m *Afn04_P0_F10) GetSwitchinAvailable() []int32 {
	if m != nil {
		return m.SwitchinAvailable
	}
	return nil
}

func (m *Afn04_P0_F10) GetSwitchinHopping() []int32 {
	if m != nil {
		return m.SwitchinHopping
	}
	return nil
}

// GPS 地理位置信息
type Afn04_P0_F11 struct {
	// 经度
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 标识，0-东经，1-西经
	LongitudeMark int32 `protobuf:"varint,3,opt,name=longitude_mark,json=longitudeMark,proto3" json:"longitude_mark,omitempty"`
	// 标识，0-北纬，1-南纬
	LatitudeMark int32 `protobuf:"varint,4,opt,name=latitude_mark,json=latitudeMark,proto3" json:"latitude_mark,omitempty"`
}

func (m *Afn04_P0_F11) Reset()         { *m = Afn04_P0_F11{} }
func (m *Afn04_P0_F11) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F11) ProtoMessage()    {}
func (*Afn04_P0_F11) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{10}
}
func (m *Afn04_P0_F11) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F11) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F11.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F11) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F11.Merge(m, src)
}
func (m *Afn04_P0_F11) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F11) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F11.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F11 proto.InternalMessageInfo

func (m *Afn04_P0_F11) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Afn04_P0_F11) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Afn04_P0_F11) GetLongitudeMark() int32 {
	if m != nil {
		return m.LongitudeMark
	}
	return 0
}

func (m *Afn04_P0_F11) GetLatitudeMark() int32 {
	if m != nil {
		return m.LatitudeMark
	}
	return 0
}

// 扩展设备配置参数(不用)
// pn:n 0-99,0-无效配置（删除配置）
type Afn04_Pn_F14 struct {
	// 串口配置
	RsSetting *RS_Setting `protobuf:"bytes,1,opt,name=rs_setting,json=rsSetting,proto3" json:"rs_setting,omitempty"`
	// 串口设备类型1 为交采,调整2 为路灯控制器,调整3 为表计（说是电表）,
	// 4为回路控制器,5 为电缆防盗检测器,6 为漏电检测器,7 为光控仪,
	// 8为支路交流采集,9 为车流量传感器
	RsType int32 `protobuf:"varint,2,opt,name=rs_type,json=rsType,proto3" json:"rs_type,omitempty"`
	// 优先级0-普通，1-重点
	Sp int32 `protobuf:"varint,3,opt,name=sp,proto3" json:"sp,omitempty"`
	// 端口号数值 范围 0~255
	// 0表示删除该测量点的配置参数,1:交流模拟量（备用）;2~30:第 1 路~第 29 路RS485
	// 31: 载波;32:无线;48~63 :1~16路电压采集;64~127:1~64 路电流;其他备用
	RsPort int32 `protobuf:"varint,4,opt,name=rs_port,json=rsPort,proto3" json:"rs_port,omitempty"`
	// 协议版本，1-97协议，2-07协议
	Ver int32 `protobuf:"varint,5,opt,name=ver,proto3" json:"ver,omitempty"`
	// 所属回路，电表填0,漏电，防盗等按设置填
	LoopNo int32 `protobuf:"varint,6,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 启用数量（含义不明，填1）
	Number int32 `protobuf:"varint,7,opt,name=number,proto3" json:"number,omitempty"`
	// 所属相位0-a,1-b,2-c
	Phase int32 `protobuf:"varint,8,opt,name=phase,proto3" json:"phase,omitempty"`
	// 设备地址，6字节bcd
	Addr int64 `protobuf:"varint,9,opt,name=addr,proto3" json:"addr,omitempty"`
	// 漏电设置，仅当rs_type==6时 填
	EluSetting *Afn04_Pn_F14_Elu_Setting `protobuf:"bytes,10,opt,name=elu_setting,json=eluSetting,proto3" json:"elu_setting,omitempty"`
}

func (m *Afn04_Pn_F14) Reset()         { *m = Afn04_Pn_F14{} }
func (m *Afn04_Pn_F14) String() string { return proto.CompactTextString(m) }
func (*Afn04_Pn_F14) ProtoMessage()    {}
func (*Afn04_Pn_F14) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{11}
}
func (m *Afn04_Pn_F14) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_Pn_F14) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_Pn_F14.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_Pn_F14) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_Pn_F14.Merge(m, src)
}
func (m *Afn04_Pn_F14) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_Pn_F14) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_Pn_F14.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_Pn_F14 proto.InternalMessageInfo

func (m *Afn04_Pn_F14) GetRsSetting() *RS_Setting {
	if m != nil {
		return m.RsSetting
	}
	return nil
}

func (m *Afn04_Pn_F14) GetRsType() int32 {
	if m != nil {
		return m.RsType
	}
	return 0
}

func (m *Afn04_Pn_F14) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

func (m *Afn04_Pn_F14) GetRsPort() int32 {
	if m != nil {
		return m.RsPort
	}
	return 0
}

func (m *Afn04_Pn_F14) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Afn04_Pn_F14) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn04_Pn_F14) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Afn04_Pn_F14) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *Afn04_Pn_F14) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *Afn04_Pn_F14) GetEluSetting() *Afn04_Pn_F14_Elu_Setting {
	if m != nil {
		return m.EluSetting
	}
	return nil
}

// 漏电额外设置
type Afn04_Pn_F14_Elu_Setting struct {
	// 是否允许断电0-否，1-允许
	EnableOff int32 `protobuf:"varint,1,opt,name=enable_off,json=enableOff,proto3" json:"enable_off,omitempty"`
	// 关联的开关量输出号1-16
	SwitchoutNo int32 `protobuf:"varint,2,opt,name=switchout_no,json=switchoutNo,proto3" json:"switchout_no,omitempty"`
	// 重合闸次数0-不启用，1-255,重试次数
	Retry int32 `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`
	// 延时间隔1-255秒
	Delay int32 `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (m *Afn04_Pn_F14_Elu_Setting) Reset()         { *m = Afn04_Pn_F14_Elu_Setting{} }
func (m *Afn04_Pn_F14_Elu_Setting) String() string { return proto.CompactTextString(m) }
func (*Afn04_Pn_F14_Elu_Setting) ProtoMessage()    {}
func (*Afn04_Pn_F14_Elu_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{11, 0}
}
func (m *Afn04_Pn_F14_Elu_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_Pn_F14_Elu_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_Pn_F14_Elu_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_Pn_F14_Elu_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_Pn_F14_Elu_Setting.Merge(m, src)
}
func (m *Afn04_Pn_F14_Elu_Setting) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_Pn_F14_Elu_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_Pn_F14_Elu_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_Pn_F14_Elu_Setting proto.InternalMessageInfo

func (m *Afn04_Pn_F14_Elu_Setting) GetEnableOff() int32 {
	if m != nil {
		return m.EnableOff
	}
	return 0
}

func (m *Afn04_Pn_F14_Elu_Setting) GetSwitchoutNo() int32 {
	if m != nil {
		return m.SwitchoutNo
	}
	return 0
}

func (m *Afn04_Pn_F14_Elu_Setting) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *Afn04_Pn_F14_Elu_Setting) GetDelay() int32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

// 继电器输出控制方案（年设置）
// pn:n 方案序号1-n
type Afn04_Pn_F15 struct {
	// 起始年月日，yyMMdd
	DtStart string `protobuf:"bytes,1,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 持续时间1-31天，2月按29天算
	DtDays int32 `protobuf:"varint,2,opt,name=dt_days,json=dtDays,proto3" json:"dt_days,omitempty"`
	// 开关量输出启用标识,依次K1-16,1-启用下方时段，0-不用，需填满
	SwitchoutNo []int32 `protobuf:"varint,3,rep,packed,name=switchout_no,json=switchoutNo,proto3" json:"switchout_no,omitempty"`
	// 时段设置，留空表示清除所有时段
	// 数量1-4为有效时段
	TimeSlot []*Afn04_Pn_F15_Time_Slot `protobuf:"bytes,4,rep,name=time_slot,json=timeSlot,proto3" json:"time_slot,omitempty"`
}

func (m *Afn04_Pn_F15) Reset()         { *m = Afn04_Pn_F15{} }
func (m *Afn04_Pn_F15) String() string { return proto.CompactTextString(m) }
func (*Afn04_Pn_F15) ProtoMessage()    {}
func (*Afn04_Pn_F15) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{12}
}
func (m *Afn04_Pn_F15) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_Pn_F15) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_Pn_F15.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_Pn_F15) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_Pn_F15.Merge(m, src)
}
func (m *Afn04_Pn_F15) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_Pn_F15) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_Pn_F15.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_Pn_F15 proto.InternalMessageInfo

func (m *Afn04_Pn_F15) GetDtStart() string {
	if m != nil {
		return m.DtStart
	}
	return ""
}

func (m *Afn04_Pn_F15) GetDtDays() int32 {
	if m != nil {
		return m.DtDays
	}
	return 0
}

func (m *Afn04_Pn_F15) GetSwitchoutNo() []int32 {
	if m != nil {
		return m.SwitchoutNo
	}
	return nil
}

func (m *Afn04_Pn_F15) GetTimeSlot() []*Afn04_Pn_F15_Time_Slot {
	if m != nil {
		return m.TimeSlot
	}
	return nil
}

type Afn04_Pn_F15_Time_Slot struct {
	// 开灯时间hh*60+mm，1500表示不操作
	TimeOn int32 `protobuf:"varint,1,opt,name=time_on,json=timeOn,proto3" json:"time_on,omitempty"`
	// 关灯时间hh*60+mm，1500表示不操作
	TimeOff int32 `protobuf:"varint,2,opt,name=time_off,json=timeOff,proto3" json:"time_off,omitempty"`
}

func (m *Afn04_Pn_F15_Time_Slot) Reset()         { *m = Afn04_Pn_F15_Time_Slot{} }
func (m *Afn04_Pn_F15_Time_Slot) String() string { return proto.CompactTextString(m) }
func (*Afn04_Pn_F15_Time_Slot) ProtoMessage()    {}
func (*Afn04_Pn_F15_Time_Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{12, 0}
}
func (m *Afn04_Pn_F15_Time_Slot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_Pn_F15_Time_Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_Pn_F15_Time_Slot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_Pn_F15_Time_Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_Pn_F15_Time_Slot.Merge(m, src)
}
func (m *Afn04_Pn_F15_Time_Slot) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_Pn_F15_Time_Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_Pn_F15_Time_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_Pn_F15_Time_Slot proto.InternalMessageInfo

func (m *Afn04_Pn_F15_Time_Slot) GetTimeOn() int32 {
	if m != nil {
		return m.TimeOn
	}
	return 0
}

func (m *Afn04_Pn_F15_Time_Slot) GetTimeOff() int32 {
	if m != nil {
		return m.TimeOff
	}
	return 0
}

// 开关量输出参数关联
type Afn04_P0_F41 struct {
	// 每个开关量输出控制回路数量，有多少个输出就填充多少个数据，依次为k1-kn
	SwitchoutLoops []int32 `protobuf:"varint,1,rep,packed,name=switchout_loops,json=switchoutLoops,proto3" json:"switchout_loops,omitempty"`
}

func (m *Afn04_P0_F41) Reset()         { *m = Afn04_P0_F41{} }
func (m *Afn04_P0_F41) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F41) ProtoMessage()    {}
func (*Afn04_P0_F41) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{13}
}
func (m *Afn04_P0_F41) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F41) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F41.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F41) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F41.Merge(m, src)
}
func (m *Afn04_P0_F41) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F41) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F41.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F41 proto.InternalMessageInfo

func (m *Afn04_P0_F41) GetSwitchoutLoops() []int32 {
	if m != nil {
		return m.SwitchoutLoops
	}
	return nil
}

// 模拟量采集参数关联
type Afn04_P0_F42 struct {
	// 电压互感比，默认1，如互感器的比值为100:5，则变比为20，下同
	VoltageTransformer int32 `protobuf:"varint,1,opt,name=voltage_transformer,json=voltageTransformer,proto3" json:"voltage_transformer,omitempty"`
	// A相电能互感比
	EnergyATransformer int32 `protobuf:"varint,2,opt,name=energy_a_transformer,json=energyATransformer,proto3" json:"energy_a_transformer,omitempty"`
	// B相电能互感比
	EnergyBTransformer int32 `protobuf:"varint,3,opt,name=energy_b_transformer,json=energyBTransformer,proto3" json:"energy_b_transformer,omitempty"`
	// C相电能互感比
	EnergyCTransformer int32 `protobuf:"varint,4,opt,name=energy_c_transformer,json=energyCTransformer,proto3" json:"energy_c_transformer,omitempty"`
	// 启用了多少回路，填充多少数据
	CurrentSetting []*Afn04_P0_F42_Current_Setting `protobuf:"bytes,5,rep,name=current_setting,json=currentSetting,proto3" json:"current_setting,omitempty"`
}

func (m *Afn04_P0_F42) Reset()         { *m = Afn04_P0_F42{} }
func (m *Afn04_P0_F42) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F42) ProtoMessage()    {}
func (*Afn04_P0_F42) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{14}
}
func (m *Afn04_P0_F42) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F42) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F42.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F42) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F42.Merge(m, src)
}
func (m *Afn04_P0_F42) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F42) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F42.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F42 proto.InternalMessageInfo

func (m *Afn04_P0_F42) GetVoltageTransformer() int32 {
	if m != nil {
		return m.VoltageTransformer
	}
	return 0
}

func (m *Afn04_P0_F42) GetEnergyATransformer() int32 {
	if m != nil {
		return m.EnergyATransformer
	}
	return 0
}

func (m *Afn04_P0_F42) GetEnergyBTransformer() int32 {
	if m != nil {
		return m.EnergyBTransformer
	}
	return 0
}

func (m *Afn04_P0_F42) GetEnergyCTransformer() int32 {
	if m != nil {
		return m.EnergyCTransformer
	}
	return 0
}

func (m *Afn04_P0_F42) GetCurrentSetting() []*Afn04_P0_F42_Current_Setting {
	if m != nil {
		return m.CurrentSetting
	}
	return nil
}

// 电流参数
type Afn04_P0_F42_Current_Setting struct {
	// 互感比
	Transformer int32 `protobuf:"varint,1,opt,name=transformer,proto3" json:"transformer,omitempty"`
	// 相位，0-a相，1-b相，2-c相
	Phase int32 `protobuf:"varint,2,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (m *Afn04_P0_F42_Current_Setting) Reset()         { *m = Afn04_P0_F42_Current_Setting{} }
func (m *Afn04_P0_F42_Current_Setting) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F42_Current_Setting) ProtoMessage()    {}
func (*Afn04_P0_F42_Current_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{14, 0}
}
func (m *Afn04_P0_F42_Current_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F42_Current_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F42_Current_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F42_Current_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F42_Current_Setting.Merge(m, src)
}
func (m *Afn04_P0_F42_Current_Setting) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F42_Current_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F42_Current_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F42_Current_Setting proto.InternalMessageInfo

func (m *Afn04_P0_F42_Current_Setting) GetTransformer() int32 {
	if m != nil {
		return m.Transformer
	}
	return 0
}

func (m *Afn04_P0_F42_Current_Setting) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

// 周回路控制表,仅支持k1-k8（国标设备不建议使用）
type Afn04_P0_F46 struct {
	// 周一设置,k1~k8
	WeekDay1 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,1,rep,name=week_day1,json=weekDay1,proto3" json:"week_day1,omitempty"`
	// 周二设置,k1~k8
	WeekDay2 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,2,rep,name=week_day2,json=weekDay2,proto3" json:"week_day2,omitempty"`
	// 周三设置,k1~k8
	WeekDay3 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,3,rep,name=week_day3,json=weekDay3,proto3" json:"week_day3,omitempty"`
	// 周四设置,k1~k8
	WeekDay4 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,4,rep,name=week_day4,json=weekDay4,proto3" json:"week_day4,omitempty"`
	// 周五设置,k1~k8
	WeekDay5 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,5,rep,name=week_day5,json=weekDay5,proto3" json:"week_day5,omitempty"`
	// 周六设置,k1~k8
	WeekDay6 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,6,rep,name=week_day6,json=weekDay6,proto3" json:"week_day6,omitempty"`
	// 周日设置,k1~k8
	WeekDay7 []*Afn04_P0_F46_Time_Slot `protobuf:"bytes,7,rep,name=week_day7,json=weekDay7,proto3" json:"week_day7,omitempty"`
}

func (m *Afn04_P0_F46) Reset()         { *m = Afn04_P0_F46{} }
func (m *Afn04_P0_F46) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F46) ProtoMessage()    {}
func (*Afn04_P0_F46) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{15}
}
func (m *Afn04_P0_F46) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F46) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F46.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F46) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F46.Merge(m, src)
}
func (m *Afn04_P0_F46) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F46) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F46.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F46 proto.InternalMessageInfo

func (m *Afn04_P0_F46) GetWeekDay1() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay1
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay2() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay2
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay3() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay3
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay4() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay4
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay5() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay5
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay6() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay6
	}
	return nil
}

func (m *Afn04_P0_F46) GetWeekDay7() []*Afn04_P0_F46_Time_Slot {
	if m != nil {
		return m.WeekDay7
	}
	return nil
}

type Afn04_P0_F46_Time_Slot struct {
	// 开灯时间hh*60+mm，15555保留当前值,1500清除对应设置
	TimeOn int32 `protobuf:"varint,1,opt,name=time_on,json=timeOn,proto3" json:"time_on,omitempty"`
	// 关灯时间hh*60+mm，15555保留当前值,1500清除对应设置
	TimeOff int32 `protobuf:"varint,2,opt,name=time_off,json=timeOff,proto3" json:"time_off,omitempty"`
}

func (m *Afn04_P0_F46_Time_Slot) Reset()         { *m = Afn04_P0_F46_Time_Slot{} }
func (m *Afn04_P0_F46_Time_Slot) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F46_Time_Slot) ProtoMessage()    {}
func (*Afn04_P0_F46_Time_Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{15, 0}
}
func (m *Afn04_P0_F46_Time_Slot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F46_Time_Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F46_Time_Slot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F46_Time_Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F46_Time_Slot.Merge(m, src)
}
func (m *Afn04_P0_F46_Time_Slot) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F46_Time_Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F46_Time_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F46_Time_Slot proto.InternalMessageInfo

func (m *Afn04_P0_F46_Time_Slot) GetTimeOn() int32 {
	if m != nil {
		return m.TimeOn
	}
	return 0
}

func (m *Afn04_P0_F46_Time_Slot) GetTimeOff() int32 {
	if m != nil {
		return m.TimeOff
	}
	return 0
}

// 经纬度开关灯偏移
type Afn04_P0_F49 struct {
	// 开灯偏移（分钟）-120～120
	OffsetOn int32 `protobuf:"varint,1,opt,name=offset_on,json=offsetOn,proto3" json:"offset_on,omitempty"`
	// 关灯偏移（分钟）-120～120
	OffsetOff int32 `protobuf:"varint,2,opt,name=offset_off,json=offsetOff,proto3" json:"offset_off,omitempty"`
}

func (m *Afn04_P0_F49) Reset()         { *m = Afn04_P0_F49{} }
func (m *Afn04_P0_F49) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F49) ProtoMessage()    {}
func (*Afn04_P0_F49) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{16}
}
func (m *Afn04_P0_F49) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F49) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F49.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F49) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F49.Merge(m, src)
}
func (m *Afn04_P0_F49) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F49) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F49.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F49 proto.InternalMessageInfo

func (m *Afn04_P0_F49) GetOffsetOn() int32 {
	if m != nil {
		return m.OffsetOn
	}
	return 0
}

func (m *Afn04_P0_F49) GetOffsetOff() int32 {
	if m != nil {
		return m.OffsetOff
	}
	return 0
}

// 设定全数据上送周期
type Afn04_P0_F50 struct {
	// 全数据主报周期（分钟）1-255
	ReportTimer int32 `protobuf:"varint,1,opt,name=report_timer,json=reportTimer,proto3" json:"report_timer,omitempty"`
}

func (m *Afn04_P0_F50) Reset()         { *m = Afn04_P0_F50{} }
func (m *Afn04_P0_F50) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F50) ProtoMessage()    {}
func (*Afn04_P0_F50) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{17}
}
func (m *Afn04_P0_F50) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F50) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F50.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F50) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F50.Merge(m, src)
}
func (m *Afn04_P0_F50) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F50) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F50.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F50 proto.InternalMessageInfo

func (m *Afn04_P0_F50) GetReportTimer() int32 {
	if m != nil {
		return m.ReportTimer
	}
	return 0
}

// 设置模拟量上下限
type Afn04_P0_F51 struct {
	// 电压下限(1位小数bcd)
	VoltageLowerLimit float64 `protobuf:"fixed64,1,opt,name=voltage_lower_limit,json=voltageLowerLimit,proto3" json:"voltage_lower_limit,omitempty"`
	// 电压上限(1位小数bcd)
	VoltageUpperLimit float64 `protobuf:"fixed64,2,opt,name=voltage_upper_limit,json=voltageUpperLimit,proto3" json:"voltage_upper_limit,omitempty"`
	// 回路电流上下限设置（从回路1开始，填充到最后一个回路即可（最大64），中间不允许跳过回路）
	CurrentSetting []*Afn04_P0_F51_Current_Setting `protobuf:"bytes,3,rep,name=current_setting,json=currentSetting,proto3" json:"current_setting,omitempty"`
}

func (m *Afn04_P0_F51) Reset()         { *m = Afn04_P0_F51{} }
func (m *Afn04_P0_F51) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F51) ProtoMessage()    {}
func (*Afn04_P0_F51) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{18}
}
func (m *Afn04_P0_F51) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F51) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F51.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F51) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F51.Merge(m, src)
}
func (m *Afn04_P0_F51) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F51) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F51.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F51 proto.InternalMessageInfo

func (m *Afn04_P0_F51) GetVoltageLowerLimit() float64 {
	if m != nil {
		return m.VoltageLowerLimit
	}
	return 0
}

func (m *Afn04_P0_F51) GetVoltageUpperLimit() float64 {
	if m != nil {
		return m.VoltageUpperLimit
	}
	return 0
}

func (m *Afn04_P0_F51) GetCurrentSetting() []*Afn04_P0_F51_Current_Setting {
	if m != nil {
		return m.CurrentSetting
	}
	return nil
}

type Afn04_P0_F51_Current_Setting struct {
	// 依次时段设置（最大4,有多少填多少，若要清除某回路的上下限设置，初始化一个空的loop_setting即可）
	LoopSetting []*Afn04_P0_F51_Loop_Setting `protobuf:"bytes,1,rep,name=loop_setting,json=loopSetting,proto3" json:"loop_setting,omitempty"`
}

func (m *Afn04_P0_F51_Current_Setting) Reset()         { *m = Afn04_P0_F51_Current_Setting{} }
func (m *Afn04_P0_F51_Current_Setting) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F51_Current_Setting) ProtoMessage()    {}
func (*Afn04_P0_F51_Current_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{18, 0}
}
func (m *Afn04_P0_F51_Current_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F51_Current_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F51_Current_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F51_Current_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F51_Current_Setting.Merge(m, src)
}
func (m *Afn04_P0_F51_Current_Setting) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F51_Current_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F51_Current_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F51_Current_Setting proto.InternalMessageInfo

func (m *Afn04_P0_F51_Current_Setting) GetLoopSetting() []*Afn04_P0_F51_Loop_Setting {
	if m != nil {
		return m.LoopSetting
	}
	return nil
}

// 回路设置
type Afn04_P0_F51_Loop_Setting struct {
	// 启用时刻hh*60+mm
	// 第一时段可使用特殊值：6039-终端自动判断每日第一次开灯或经纬度
	// 最后一个时段（依据F15设置而定），可使用特殊值：5368-使用经纬度自动计算
	TimeStart int32 `protobuf:"varint,1,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd   int32 `protobuf:"varint,2,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// 电流下限（有符号3位小数）
	CurrentLowerLimit float64 `protobuf:"fixed64,3,opt,name=current_lower_limit,json=currentLowerLimit,proto3" json:"current_lower_limit,omitempty"`
	// 电流上限（有符号3位小数）
	CurrentUpperLimit float64 `protobuf:"fixed64,4,opt,name=current_upper_limit,json=currentUpperLimit,proto3" json:"current_upper_limit,omitempty"`
}

func (m *Afn04_P0_F51_Loop_Setting) Reset()         { *m = Afn04_P0_F51_Loop_Setting{} }
func (m *Afn04_P0_F51_Loop_Setting) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F51_Loop_Setting) ProtoMessage()    {}
func (*Afn04_P0_F51_Loop_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{18, 1}
}
func (m *Afn04_P0_F51_Loop_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F51_Loop_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F51_Loop_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F51_Loop_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F51_Loop_Setting.Merge(m, src)
}
func (m *Afn04_P0_F51_Loop_Setting) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F51_Loop_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F51_Loop_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F51_Loop_Setting proto.InternalMessageInfo

func (m *Afn04_P0_F51_Loop_Setting) GetTimeStart() int32 {
	if m != nil {
		return m.TimeStart
	}
	return 0
}

func (m *Afn04_P0_F51_Loop_Setting) GetTimeEnd() int32 {
	if m != nil {
		return m.TimeEnd
	}
	return 0
}

func (m *Afn04_P0_F51_Loop_Setting) GetCurrentLowerLimit() float64 {
	if m != nil {
		return m.CurrentLowerLimit
	}
	return 0
}

func (m *Afn04_P0_F51_Loop_Setting) GetCurrentUpperLimit() float64 {
	if m != nil {
		return m.CurrentUpperLimit
	}
	return 0
}

// 设置漏电保护参数
type Afn04_P0_F52 struct {
	// 漏电参数，依次1-8路填满，不启用或要擦除的回路全部填0即可
	LeakageLimit []*Afn04_P0_F52_Leakage_Limit `protobuf:"bytes,1,rep,name=leakage_limit,json=leakageLimit,proto3" json:"leakage_limit,omitempty"`
}

func (m *Afn04_P0_F52) Reset()         { *m = Afn04_P0_F52{} }
func (m *Afn04_P0_F52) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F52) ProtoMessage()    {}
func (*Afn04_P0_F52) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{19}
}
func (m *Afn04_P0_F52) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F52) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F52.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F52) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F52.Merge(m, src)
}
func (m *Afn04_P0_F52) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F52) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F52.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F52 proto.InternalMessageInfo

func (m *Afn04_P0_F52) GetLeakageLimit() []*Afn04_P0_F52_Leakage_Limit {
	if m != nil {
		return m.LeakageLimit
	}
	return nil
}

type Afn04_P0_F52_Leakage_Limit struct {
	// 是否启用(0-不启用，1-启用)
	LoopEnable int32 `protobuf:"varint,1,opt,name=loop_enable,json=loopEnable,proto3" json:"loop_enable,omitempty"`
	// 关联的开关量输出号（1-255）
	LoopSwitchout int32 `protobuf:"varint,2,opt,name=loop_switchout,json=loopSwitchout,proto3" json:"loop_switchout,omitempty"`
	// 一级越限值(单位mA,下同)
	Level1Limit int32 `protobuf:"varint,3,opt,name=level1_limit,json=level1Limit,proto3" json:"level1_limit,omitempty"`
	// 二级越限值
	Level2Limit int32 `protobuf:"varint,4,opt,name=level2_limit,json=level2Limit,proto3" json:"level2_limit,omitempty"`
	// 三级越限值
	Level3Limit int32 `protobuf:"varint,5,opt,name=level3_limit,json=level3Limit,proto3" json:"level3_limit,omitempty"`
	// 四级越限值（断电）
	Level4Limit int32 `protobuf:"varint,6,opt,name=level4_limit,json=level4Limit,proto3" json:"level4_limit,omitempty"`
}

func (m *Afn04_P0_F52_Leakage_Limit) Reset()         { *m = Afn04_P0_F52_Leakage_Limit{} }
func (m *Afn04_P0_F52_Leakage_Limit) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F52_Leakage_Limit) ProtoMessage()    {}
func (*Afn04_P0_F52_Leakage_Limit) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{19, 0}
}
func (m *Afn04_P0_F52_Leakage_Limit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F52_Leakage_Limit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F52_Leakage_Limit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F52_Leakage_Limit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F52_Leakage_Limit.Merge(m, src)
}
func (m *Afn04_P0_F52_Leakage_Limit) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F52_Leakage_Limit) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F52_Leakage_Limit.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F52_Leakage_Limit proto.InternalMessageInfo

func (m *Afn04_P0_F52_Leakage_Limit) GetLoopEnable() int32 {
	if m != nil {
		return m.LoopEnable
	}
	return 0
}

func (m *Afn04_P0_F52_Leakage_Limit) GetLoopSwitchout() int32 {
	if m != nil {
		return m.LoopSwitchout
	}
	return 0
}

func (m *Afn04_P0_F52_Leakage_Limit) GetLevel1Limit() int32 {
	if m != nil {
		return m.Level1Limit
	}
	return 0
}

func (m *Afn04_P0_F52_Leakage_Limit) GetLevel2Limit() int32 {
	if m != nil {
		return m.Level2Limit
	}
	return 0
}

func (m *Afn04_P0_F52_Leakage_Limit) GetLevel3Limit() int32 {
	if m != nil {
		return m.Level3Limit
	}
	return 0
}

func (m *Afn04_P0_F52_Leakage_Limit) GetLevel4Limit() int32 {
	if m != nil {
		return m.Level4Limit
	}
	return 0
}

// 设置光照度限值 参数
type Afn04_P0_F53 struct {
	// 光照度阀值
	LuxThreshold int32 `protobuf:"varint,1,opt,name=lux_threshold,json=luxThreshold,proto3" json:"lux_threshold,omitempty"`
	// 数据传输间隔（秒）
	TimeTick int32 `protobuf:"varint,2,opt,name=time_tick,json=timeTick,proto3" json:"time_tick,omitempty"`
}

func (m *Afn04_P0_F53) Reset()         { *m = Afn04_P0_F53{} }
func (m *Afn04_P0_F53) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F53) ProtoMessage()    {}
func (*Afn04_P0_F53) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{20}
}
func (m *Afn04_P0_F53) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F53) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F53.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F53) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F53.Merge(m, src)
}
func (m *Afn04_P0_F53) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F53) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F53.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F53 proto.InternalMessageInfo

func (m *Afn04_P0_F53) GetLuxThreshold() int32 {
	if m != nil {
		return m.LuxThreshold
	}
	return 0
}

func (m *Afn04_P0_F53) GetTimeTick() int32 {
	if m != nil {
		return m.TimeTick
	}
	return 0
}

// 停运/投运
type Afn04_P0_F57 struct {
	// 设备停运标识，0-停运，1-投运
	RuntimeMark int32 `protobuf:"varint,1,opt,name=runtime_mark,json=runtimeMark,proto3" json:"runtime_mark,omitempty"`
	// 回路停运标识,48个，0-停运，1-投运（没用，不用填）
	LoopMark []int32 `protobuf:"varint,2,rep,packed,name=loop_mark,json=loopMark,proto3" json:"loop_mark,omitempty"`
}

func (m *Afn04_P0_F57) Reset()         { *m = Afn04_P0_F57{} }
func (m *Afn04_P0_F57) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F57) ProtoMessage()    {}
func (*Afn04_P0_F57) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{21}
}
func (m *Afn04_P0_F57) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F57) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F57.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F57) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F57.Merge(m, src)
}
func (m *Afn04_P0_F57) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F57) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F57.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F57 proto.InternalMessageInfo

func (m *Afn04_P0_F57) GetRuntimeMark() int32 {
	if m != nil {
		return m.RuntimeMark
	}
	return 0
}

func (m *Afn04_P0_F57) GetLoopMark() []int32 {
	if m != nil {
		return m.LoopMark
	}
	return nil
}

// 电流回路矢量
type Afn04_P0_F65 struct {
	// 电流回路矢量，从0开始
	SwitchinVector []int32 `protobuf:"varint,1,rep,packed,name=switchin_vector,json=switchinVector,proto3" json:"switchin_vector,omitempty"`
}

func (m *Afn04_P0_F65) Reset()         { *m = Afn04_P0_F65{} }
func (m *Afn04_P0_F65) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F65) ProtoMessage()    {}
func (*Afn04_P0_F65) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{22}
}
func (m *Afn04_P0_F65) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F65) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F65.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F65) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F65.Merge(m, src)
}
func (m *Afn04_P0_F65) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F65) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F65.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F65 proto.InternalMessageInfo

func (m *Afn04_P0_F65) GetSwitchinVector() []int32 {
	if m != nil {
		return m.SwitchinVector
	}
	return nil
}

// 电流回路和开关量输出对应关系
type Afn04_P0_F66 struct {
	// 填写每个回路对应的开关量输出序号，0开始，如果不对应开关量输出，如门，则填255
	SwitchinSwitchout []int32 `protobuf:"varint,2,rep,packed,name=switchin_switchout,json=switchinSwitchout,proto3" json:"switchin_switchout,omitempty"`
}

func (m *Afn04_P0_F66) Reset()         { *m = Afn04_P0_F66{} }
func (m *Afn04_P0_F66) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F66) ProtoMessage()    {}
func (*Afn04_P0_F66) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{23}
}
func (m *Afn04_P0_F66) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F66) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F66.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F66) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F66.Merge(m, src)
}
func (m *Afn04_P0_F66) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F66) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F66.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F66 proto.InternalMessageInfo

func (m *Afn04_P0_F66) GetSwitchinSwitchout() []int32 {
	if m != nil {
		return m.SwitchinSwitchout
	}
	return nil
}

// 开关量输出矢量
type Afn04_P0_F67 struct {
	// 开关量输出矢量，从0开始
	SwitchoutVector []int32 `protobuf:"varint,1,rep,packed,name=switchout_vector,json=switchoutVector,proto3" json:"switchout_vector,omitempty"`
}

func (m *Afn04_P0_F67) Reset()         { *m = Afn04_P0_F67{} }
func (m *Afn04_P0_F67) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F67) ProtoMessage()    {}
func (*Afn04_P0_F67) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{24}
}
func (m *Afn04_P0_F67) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F67) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F67.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F67) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F67.Merge(m, src)
}
func (m *Afn04_P0_F67) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F67) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F67.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F67 proto.InternalMessageInfo

func (m *Afn04_P0_F67) GetSwitchoutVector() []int32 {
	if m != nil {
		return m.SwitchoutVector
	}
	return nil
}

// 电压过/欠保护，触发后需手动发送消除断电保护命令（afn05_p0_f57）
type Afn04_P0_F68 struct {
	// 这里下限启用标识，三个相位的均一致即可，页面不需要分开设置
	LowerLimitAEnable int32 `protobuf:"varint,1,opt,name=lower_limit_a_enable,json=lowerLimitAEnable,proto3" json:"lower_limit_a_enable,omitempty"`
	LowerLimitBEnable int32 `protobuf:"varint,2,opt,name=lower_limit_b_enable,json=lowerLimitBEnable,proto3" json:"lower_limit_b_enable,omitempty"`
	LowerLimitCEnable int32 `protobuf:"varint,3,opt,name=lower_limit_c_enable,json=lowerLimitCEnable,proto3" json:"lower_limit_c_enable,omitempty"`
	// 这里上限启用标识，三个相位的均一致即可，页面不需要分开设置
	UpperLimitAEnable int32 `protobuf:"varint,4,opt,name=upper_limit_a_enable,json=upperLimitAEnable,proto3" json:"upper_limit_a_enable,omitempty"`
	UpperLimitBEnable int32 `protobuf:"varint,5,opt,name=upper_limit_b_enable,json=upperLimitBEnable,proto3" json:"upper_limit_b_enable,omitempty"`
	UpperLimitCEnable int32 `protobuf:"varint,6,opt,name=upper_limit_c_enable,json=upperLimitCEnable,proto3" json:"upper_limit_c_enable,omitempty"`
	// 三项下限，一致即可，页面不需要分开设置
	LowerLimitA int32 `protobuf:"varint,7,opt,name=lower_limit_a,json=lowerLimitA,proto3" json:"lower_limit_a,omitempty"`
	LowerLimitB int32 `protobuf:"varint,8,opt,name=lower_limit_b,json=lowerLimitB,proto3" json:"lower_limit_b,omitempty"`
	LowerLimitC int32 `protobuf:"varint,9,opt,name=lower_limit_c,json=lowerLimitC,proto3" json:"lower_limit_c,omitempty"`
	// 三项上限，一致即可，页面不需要分开设置
	UpperLimitA int32 `protobuf:"varint,10,opt,name=upper_limit_a,json=upperLimitA,proto3" json:"upper_limit_a,omitempty"`
	UpperLimitB int32 `protobuf:"varint,11,opt,name=upper_limit_b,json=upperLimitB,proto3" json:"upper_limit_b,omitempty"`
	UpperLimitC int32 `protobuf:"varint,12,opt,name=upper_limit_c,json=upperLimitC,proto3" json:"upper_limit_c,omitempty"`
}

func (m *Afn04_P0_F68) Reset()         { *m = Afn04_P0_F68{} }
func (m *Afn04_P0_F68) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F68) ProtoMessage()    {}
func (*Afn04_P0_F68) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{25}
}
func (m *Afn04_P0_F68) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F68) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F68.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F68) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F68.Merge(m, src)
}
func (m *Afn04_P0_F68) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F68) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F68.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F68 proto.InternalMessageInfo

func (m *Afn04_P0_F68) GetLowerLimitAEnable() int32 {
	if m != nil {
		return m.LowerLimitAEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetLowerLimitBEnable() int32 {
	if m != nil {
		return m.LowerLimitBEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetLowerLimitCEnable() int32 {
	if m != nil {
		return m.LowerLimitCEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitAEnable() int32 {
	if m != nil {
		return m.UpperLimitAEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitBEnable() int32 {
	if m != nil {
		return m.UpperLimitBEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitCEnable() int32 {
	if m != nil {
		return m.UpperLimitCEnable
	}
	return 0
}

func (m *Afn04_P0_F68) GetLowerLimitA() int32 {
	if m != nil {
		return m.LowerLimitA
	}
	return 0
}

func (m *Afn04_P0_F68) GetLowerLimitB() int32 {
	if m != nil {
		return m.LowerLimitB
	}
	return 0
}

func (m *Afn04_P0_F68) GetLowerLimitC() int32 {
	if m != nil {
		return m.LowerLimitC
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitA() int32 {
	if m != nil {
		return m.UpperLimitA
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitB() int32 {
	if m != nil {
		return m.UpperLimitB
	}
	return 0
}

func (m *Afn04_P0_F68) GetUpperLimitC() int32 {
	if m != nil {
		return m.UpperLimitC
	}
	return 0
}

// 控制命令
// 允许合闸/跳闸
type Afn05_P0_F1 struct {
	// 是否操作对应的输出，16个0-不操作
	SwitchoutCtrl []*Afn05_P0_F1_Switchout_Ctrl `protobuf:"bytes,1,rep,name=switchout_ctrl,json=switchoutCtrl,proto3" json:"switchout_ctrl,omitempty"`
}

func (m *Afn05_P0_F1) Reset()         { *m = Afn05_P0_F1{} }
func (m *Afn05_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F1) ProtoMessage()    {}
func (*Afn05_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{26}
}
func (m *Afn05_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F1.Merge(m, src)
}
func (m *Afn05_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F1 proto.InternalMessageInfo

func (m *Afn05_P0_F1) GetSwitchoutCtrl() []*Afn05_P0_F1_Switchout_Ctrl {
	if m != nil {
		return m.SwitchoutCtrl
	}
	return nil
}

type Afn05_P0_F1_Switchout_Ctrl struct {
	// 开关量输出序号1-16
	SwitchoutNo int32 `protobuf:"varint,1,opt,name=switchout_no,json=switchoutNo,proto3" json:"switchout_no,omitempty"`
	// 开关量输出操作，0-关，1-开
	SwitchoutDo int32 `protobuf:"varint,2,opt,name=switchout_do,json=switchoutDo,proto3" json:"switchout_do,omitempty"`
	// 开关量输出操作时间，0-立即执行，>0-unix时间戳，表示在指定时间执行该操作
	SwitchoutTime int64 `protobuf:"varint,3,opt,name=switchout_time,json=switchoutTime,proto3" json:"switchout_time,omitempty"`
}

func (m *Afn05_P0_F1_Switchout_Ctrl) Reset()         { *m = Afn05_P0_F1_Switchout_Ctrl{} }
func (m *Afn05_P0_F1_Switchout_Ctrl) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F1_Switchout_Ctrl) ProtoMessage()    {}
func (*Afn05_P0_F1_Switchout_Ctrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{26, 0}
}
func (m *Afn05_P0_F1_Switchout_Ctrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F1_Switchout_Ctrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F1_Switchout_Ctrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F1_Switchout_Ctrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F1_Switchout_Ctrl.Merge(m, src)
}
func (m *Afn05_P0_F1_Switchout_Ctrl) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F1_Switchout_Ctrl) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F1_Switchout_Ctrl.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F1_Switchout_Ctrl proto.InternalMessageInfo

func (m *Afn05_P0_F1_Switchout_Ctrl) GetSwitchoutNo() int32 {
	if m != nil {
		return m.SwitchoutNo
	}
	return 0
}

func (m *Afn05_P0_F1_Switchout_Ctrl) GetSwitchoutDo() int32 {
	if m != nil {
		return m.SwitchoutDo
	}
	return 0
}

func (m *Afn05_P0_F1_Switchout_Ctrl) GetSwitchoutTime() int64 {
	if m != nil {
		return m.SwitchoutTime
	}
	return 0
}

// 消除漏电分闸/报警
type Afn05_P0_F9 struct {
	// 消除漏电报警标识,0-不消除，1-消除，1-n回路，不能跳回路
	LoopMark []int32 `protobuf:"varint,1,rep,packed,name=loop_mark,json=loopMark,proto3" json:"loop_mark,omitempty"`
}

func (m *Afn05_P0_F9) Reset()         { *m = Afn05_P0_F9{} }
func (m *Afn05_P0_F9) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F9) ProtoMessage()    {}
func (*Afn05_P0_F9) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{27}
}
func (m *Afn05_P0_F9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F9.Merge(m, src)
}
func (m *Afn05_P0_F9) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F9) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F9.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F9 proto.InternalMessageInfo

func (m *Afn05_P0_F9) GetLoopMark() []int32 {
	if m != nil {
		return m.LoopMark
	}
	return nil
}

// 对时命令
type Afn05_P0_F31 struct {
	// 时间，unix时间戳,0-表示使用通讯服务所在服务器时间，>0-表示使用设置值
	TimeUnix int64 `protobuf:"varint,1,opt,name=time_unix,json=timeUnix,proto3" json:"time_unix,omitempty"`
}

func (m *Afn05_P0_F31) Reset()         { *m = Afn05_P0_F31{} }
func (m *Afn05_P0_F31) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F31) ProtoMessage()    {}
func (*Afn05_P0_F31) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{28}
}
func (m *Afn05_P0_F31) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F31) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F31.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F31) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F31.Merge(m, src)
}
func (m *Afn05_P0_F31) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F31) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F31.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F31 proto.InternalMessageInfo

func (m *Afn05_P0_F31) GetTimeUnix() int64 {
	if m != nil {
		return m.TimeUnix
	}
	return 0
}

// 消除电压保护断电
// 这协议莫名其妙，设置时候分相位，执行/消除都不分相位，什么脑回路。。。
type Afn05_P0_F57 struct {
	// 断电保护消除标识，0-不消除，1-消除
	Dismiss int32 `protobuf:"varint,1,opt,name=dismiss,proto3" json:"dismiss,omitempty"`
}

func (m *Afn05_P0_F57) Reset()         { *m = Afn05_P0_F57{} }
func (m *Afn05_P0_F57) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F57) ProtoMessage()    {}
func (*Afn05_P0_F57) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{29}
}
func (m *Afn05_P0_F57) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F57) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F57.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F57) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F57.Merge(m, src)
}
func (m *Afn05_P0_F57) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F57) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F57.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F57 proto.InternalMessageInfo

func (m *Afn05_P0_F57) GetDismiss() int32 {
	if m != nil {
		return m.Dismiss
	}
	return 0
}

// 查询终端信息
// 终端版本信息
type Afn09_P0_F1 struct {
	// 厂商代码
	Company string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	// 设备编号
	DeviceNum string `protobuf:"bytes,2,opt,name=device_num,json=deviceNum,proto3" json:"device_num,omitempty"`
	// 终端软件版本号
	SoftwareVer string `protobuf:"bytes,3,opt,name=software_ver,json=softwareVer,proto3" json:"software_ver,omitempty"`
	// 终端软件发布日期：YYMMDD
	SoftwareDate int32 `protobuf:"varint,4,opt,name=software_date,json=softwareDate,proto3" json:"software_date,omitempty"`
	// 终端配置容量信息码
	DeviceInfo string `protobuf:"bytes,5,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// 终端硬件版本号
	HardwareVer string `protobuf:"bytes,6,opt,name=hardware_ver,json=hardwareVer,proto3" json:"hardware_ver,omitempty"`
	// 终端硬件发布日期：YYMMDD
	HardwareDate int32 `protobuf:"varint,7,opt,name=hardware_date,json=hardwareDate,proto3" json:"hardware_date,omitempty"`
	// 远程通讯模块版本号
	RemoteComVer string `protobuf:"bytes,8,opt,name=remote_com_ver,json=remoteComVer,proto3" json:"remote_com_ver,omitempty"`
	// 远程通讯模块发布日期：YYMMDD
	RemoteComDate int32 `protobuf:"varint,9,opt,name=remote_com_date,json=remoteComDate,proto3" json:"remote_com_date,omitempty"`
	// 本地通讯模块版本号
	LocalComVer string `protobuf:"bytes,10,opt,name=local_com_ver,json=localComVer,proto3" json:"local_com_ver,omitempty"`
	// 本地通讯模块发布日期：YYMMDD
	LocalComDate int32 `protobuf:"varint,11,opt,name=local_com_date,json=localComDate,proto3" json:"local_com_date,omitempty"`
}

func (m *Afn09_P0_F1) Reset()         { *m = Afn09_P0_F1{} }
func (m *Afn09_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn09_P0_F1) ProtoMessage()    {}
func (*Afn09_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{30}
}
func (m *Afn09_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn09_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn09_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn09_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn09_P0_F1.Merge(m, src)
}
func (m *Afn09_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn09_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn09_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn09_P0_F1 proto.InternalMessageInfo

func (m *Afn09_P0_F1) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Afn09_P0_F1) GetDeviceNum() string {
	if m != nil {
		return m.DeviceNum
	}
	return ""
}

func (m *Afn09_P0_F1) GetSoftwareVer() string {
	if m != nil {
		return m.SoftwareVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetSoftwareDate() int32 {
	if m != nil {
		return m.SoftwareDate
	}
	return 0
}

func (m *Afn09_P0_F1) GetDeviceInfo() string {
	if m != nil {
		return m.DeviceInfo
	}
	return ""
}

func (m *Afn09_P0_F1) GetHardwareVer() string {
	if m != nil {
		return m.HardwareVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetHardwareDate() int32 {
	if m != nil {
		return m.HardwareDate
	}
	return 0
}

func (m *Afn09_P0_F1) GetRemoteComVer() string {
	if m != nil {
		return m.RemoteComVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetRemoteComDate() int32 {
	if m != nil {
		return m.RemoteComDate
	}
	return 0
}

func (m *Afn09_P0_F1) GetLocalComVer() string {
	if m != nil {
		return m.LocalComVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetLocalComDate() int32 {
	if m != nil {
		return m.LocalComDate
	}
	return 0
}

// 请求实时数据，下行无数据单元
// 出线模拟量数据(全数据)(报警主报)
// pn: n是模拟量回路序号，0xffff表示所有回路
type Afn0C_Pn_F1 struct {
	// 主报时间
	DtReport int64 `protobuf:"varint,1,opt,name=dt_report,json=dtReport,proto3" json:"dt_report,omitempty"`
	// 回路数据，几个回路就几个数据
	LoopData []*Afn0C_Pn_F1_Loop_Data `protobuf:"bytes,2,rep,name=loop_data,json=loopData,proto3" json:"loop_data,omitempty"`
}

func (m *Afn0C_Pn_F1) Reset()         { *m = Afn0C_Pn_F1{} }
func (m *Afn0C_Pn_F1) String() string { return proto.CompactTextString(m) }
func (*Afn0C_Pn_F1) ProtoMessage()    {}
func (*Afn0C_Pn_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{31}
}
func (m *Afn0C_Pn_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_Pn_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_Pn_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_Pn_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_Pn_F1.Merge(m, src)
}
func (m *Afn0C_Pn_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_Pn_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_Pn_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_Pn_F1 proto.InternalMessageInfo

func (m *Afn0C_Pn_F1) GetDtReport() int64 {
	if m != nil {
		return m.DtReport
	}
	return 0
}

func (m *Afn0C_Pn_F1) GetLoopData() []*Afn0C_Pn_F1_Loop_Data {
	if m != nil {
		return m.LoopData
	}
	return nil
}

type Afn0C_Pn_F1_Loop_Data struct {
	// 电压(1位小数bcd)
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流(有符号3位小数bcd)
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率(有符号4位小数bcd)
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率(有符号4位小数bcd)
	ReactivePower float64 `protobuf:"fixed64,4,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 功率因数(有符号1位小数bcd)
	PowerFactor float64 `protobuf:"fixed64,5,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`
	// 光控值？？？（0位小数bcd）
	LuxValue float64 `protobuf:"fixed64,6,opt,name=lux_value,json=luxValue,proto3" json:"lux_value,omitempty"`
	// 其他模拟量（没这玩意）
	Other float64 `protobuf:"fixed64,7,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *Afn0C_Pn_F1_Loop_Data) Reset()         { *m = Afn0C_Pn_F1_Loop_Data{} }
func (m *Afn0C_Pn_F1_Loop_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0C_Pn_F1_Loop_Data) ProtoMessage()    {}
func (*Afn0C_Pn_F1_Loop_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{31, 0}
}
func (m *Afn0C_Pn_F1_Loop_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_Pn_F1_Loop_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_Pn_F1_Loop_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_Pn_F1_Loop_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_Pn_F1_Loop_Data.Merge(m, src)
}
func (m *Afn0C_Pn_F1_Loop_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_Pn_F1_Loop_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_Pn_F1_Loop_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_Pn_F1_Loop_Data proto.InternalMessageInfo

func (m *Afn0C_Pn_F1_Loop_Data) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetReactivePower() float64 {
	if m != nil {
		return m.ReactivePower
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetPowerFactor() float64 {
	if m != nil {
		return m.PowerFactor
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetLuxValue() float64 {
	if m != nil {
		return m.LuxValue
	}
	return 0
}

func (m *Afn0C_Pn_F1_Loop_Data) GetOther() float64 {
	if m != nil {
		return m.Other
	}
	return 0
}

// 终端日历时钟
type Afn0C_P0_F2 struct {
	// 设备时钟，unix时间戳
	TimeUnix int64 `protobuf:"varint,1,opt,name=time_unix,json=timeUnix,proto3" json:"time_unix,omitempty"`
}

func (m *Afn0C_P0_F2) Reset()         { *m = Afn0C_P0_F2{} }
func (m *Afn0C_P0_F2) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F2) ProtoMessage()    {}
func (*Afn0C_P0_F2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{32}
}
func (m *Afn0C_P0_F2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F2.Merge(m, src)
}
func (m *Afn0C_P0_F2) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F2) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F2.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F2 proto.InternalMessageInfo

func (m *Afn0C_P0_F2) GetTimeUnix() int64 {
	if m != nil {
		return m.TimeUnix
	}
	return 0
}

// 进线模拟量数据(全数据)(报警主报)
type Afn0C_P0_F3 struct {
	// 三相数据，依次ABC三相数据
	PhaseData []*Afn0C_P0_F3_Phase_Data `protobuf:"bytes,1,rep,name=phase_data,json=phaseData,proto3" json:"phase_data,omitempty"`
	// 频率（1位小数bcd）
	Frequency float64 `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (m *Afn0C_P0_F3) Reset()         { *m = Afn0C_P0_F3{} }
func (m *Afn0C_P0_F3) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F3) ProtoMessage()    {}
func (*Afn0C_P0_F3) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{33}
}
func (m *Afn0C_P0_F3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F3.Merge(m, src)
}
func (m *Afn0C_P0_F3) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F3) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F3.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F3 proto.InternalMessageInfo

func (m *Afn0C_P0_F3) GetPhaseData() []*Afn0C_P0_F3_Phase_Data {
	if m != nil {
		return m.PhaseData
	}
	return nil
}

func (m *Afn0C_P0_F3) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type Afn0C_P0_F3_Phase_Data struct {
	// 电压（1位小数bcd）
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流（有符号3位小数bcd）
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率（有符号4位小数bcd）
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率（有符号4位小数bcd）
	ReactivePower float64 `protobuf:"fixed64,4,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 功率因数（有符号1位小数bcd）
	PowerFactor float64 `protobuf:"fixed64,5,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`
	// 有功电能（2位小数bcd）
	ActiveEnergy float64 `protobuf:"fixed64,6,opt,name=active_energy,json=activeEnergy,proto3" json:"active_energy,omitempty"`
	// 无功电能（2位小数bcd）
	ReactiveEnergy float64 `protobuf:"fixed64,7,opt,name=reactive_energy,json=reactiveEnergy,proto3" json:"reactive_energy,omitempty"`
}

func (m *Afn0C_P0_F3_Phase_Data) Reset()         { *m = Afn0C_P0_F3_Phase_Data{} }
func (m *Afn0C_P0_F3_Phase_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F3_Phase_Data) ProtoMessage()    {}
func (*Afn0C_P0_F3_Phase_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{33, 0}
}
func (m *Afn0C_P0_F3_Phase_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F3_Phase_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F3_Phase_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F3_Phase_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F3_Phase_Data.Merge(m, src)
}
func (m *Afn0C_P0_F3_Phase_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F3_Phase_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F3_Phase_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F3_Phase_Data proto.InternalMessageInfo

func (m *Afn0C_P0_F3_Phase_Data) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetReactivePower() float64 {
	if m != nil {
		return m.ReactivePower
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetPowerFactor() float64 {
	if m != nil {
		return m.PowerFactor
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetActiveEnergy() float64 {
	if m != nil {
		return m.ActiveEnergy
	}
	return 0
}

func (m *Afn0C_P0_F3_Phase_Data) GetReactiveEnergy() float64 {
	if m != nil {
		return m.ReactiveEnergy
	}
	return 0
}

// 终端上行通信状态
type Afn0C_P0_F4 struct {
	// 是否允许主报,0-禁止，1-允许，（设备为1-允许，2-禁止）
	EnableReport int32 `protobuf:"varint,1,opt,name=enable_report,json=enableReport,proto3" json:"enable_report,omitempty"`
}

func (m *Afn0C_P0_F4) Reset()         { *m = Afn0C_P0_F4{} }
func (m *Afn0C_P0_F4) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F4) ProtoMessage()    {}
func (*Afn0C_P0_F4) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{34}
}
func (m *Afn0C_P0_F4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F4.Merge(m, src)
}
func (m *Afn0C_P0_F4) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F4) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F4.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F4 proto.InternalMessageInfo

func (m *Afn0C_P0_F4) GetEnableReport() int32 {
	if m != nil {
		return m.EnableReport
	}
	return 0
}

// 终端当前控制状态
type Afn0C_P0_F6 struct {
	// 依次k1-k16状态，0-断，1-通（设备为1-断，0-通）
	SwitchoutStatus []int32 `protobuf:"varint,1,rep,packed,name=switchout_status,json=switchoutStatus,proto3" json:"switchout_status,omitempty"`
}

func (m *Afn0C_P0_F6) Reset()         { *m = Afn0C_P0_F6{} }
func (m *Afn0C_P0_F6) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F6) ProtoMessage()    {}
func (*Afn0C_P0_F6) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{35}
}
func (m *Afn0C_P0_F6) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F6.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F6.Merge(m, src)
}
func (m *Afn0C_P0_F6) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F6) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F6.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F6 proto.InternalMessageInfo

func (m *Afn0C_P0_F6) GetSwitchoutStatus() []int32 {
	if m != nil {
		return m.SwitchoutStatus
	}
	return nil
}

// 终端事件计数器当前值
type Afn0C_P0_F7 struct {
	// 重要事件计数器
	Ec1 int32 `protobuf:"varint,1,opt,name=ec1,proto3" json:"ec1,omitempty"`
	// 一般事件计数器
	Ec2 int32 `protobuf:"varint,2,opt,name=ec2,proto3" json:"ec2,omitempty"`
}

func (m *Afn0C_P0_F7) Reset()         { *m = Afn0C_P0_F7{} }
func (m *Afn0C_P0_F7) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F7) ProtoMessage()    {}
func (*Afn0C_P0_F7) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{36}
}
func (m *Afn0C_P0_F7) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F7.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F7.Merge(m, src)
}
func (m *Afn0C_P0_F7) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F7) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F7.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F7 proto.InternalMessageInfo

func (m *Afn0C_P0_F7) GetEc1() int32 {
	if m != nil {
		return m.Ec1
	}
	return 0
}

func (m *Afn0C_P0_F7) GetEc2() int32 {
	if m != nil {
		return m.Ec2
	}
	return 0
}

// 终端状态量及变位标志(全数据)
type Afn0C_P0_F9 struct {
	// 回路状态量状态，依次为1-32路
	LoopStatus []*Afn0C_P0_F9_Loop_Status `protobuf:"bytes,1,rep,name=loop_status,json=loopStatus,proto3" json:"loop_status,omitempty"`
}

func (m *Afn0C_P0_F9) Reset()         { *m = Afn0C_P0_F9{} }
func (m *Afn0C_P0_F9) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F9) ProtoMessage()    {}
func (*Afn0C_P0_F9) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{37}
}
func (m *Afn0C_P0_F9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F9.Merge(m, src)
}
func (m *Afn0C_P0_F9) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F9) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F9.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F9 proto.InternalMessageInfo

func (m *Afn0C_P0_F9) GetLoopStatus() []*Afn0C_P0_F9_Loop_Status {
	if m != nil {
		return m.LoopStatus
	}
	return nil
}

type Afn0C_P0_F9_Loop_Status struct {
	// 回路当前状态，0-断，1-通
	StNow int32 `protobuf:"varint,1,opt,name=st_now,json=stNow,proto3" json:"st_now,omitempty"`
	// 回路状态自上次读取后，是否变化过，0-未变化，1-有变化
	StChanged int32 `protobuf:"varint,2,opt,name=st_changed,json=stChanged,proto3" json:"st_changed,omitempty"`
}

func (m *Afn0C_P0_F9_Loop_Status) Reset()         { *m = Afn0C_P0_F9_Loop_Status{} }
func (m *Afn0C_P0_F9_Loop_Status) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F9_Loop_Status) ProtoMessage()    {}
func (*Afn0C_P0_F9_Loop_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{37, 0}
}
func (m *Afn0C_P0_F9_Loop_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F9_Loop_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F9_Loop_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F9_Loop_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F9_Loop_Status.Merge(m, src)
}
func (m *Afn0C_P0_F9_Loop_Status) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F9_Loop_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F9_Loop_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F9_Loop_Status proto.InternalMessageInfo

func (m *Afn0C_P0_F9_Loop_Status) GetStNow() int32 {
	if m != nil {
		return m.StNow
	}
	return 0
}

func (m *Afn0C_P0_F9_Loop_Status) GetStChanged() int32 {
	if m != nil {
		return m.StChanged
	}
	return 0
}

// 终端回路事件报警状态(全数据)
type Afn0C_P0_F18 struct {
	// 回路序号,0xee表示非回路事件
	LoopNo int32 `protobuf:"varint,1,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 回路相位，非回路事件填0xee
	LoopPhase int32 `protobuf:"varint,2,opt,name=loop_phase,json=loopPhase,proto3" json:"loop_phase,omitempty"`
	// 事件状态，参考Afn04_P0_F9的事件代码，1-64个事件，0-无事件，1-发生对应事件
	EventsDo []int32 `protobuf:"varint,3,rep,packed,name=events_do,json=eventsDo,proto3" json:"events_do,omitempty"`
}

func (m *Afn0C_P0_F18) Reset()         { *m = Afn0C_P0_F18{} }
func (m *Afn0C_P0_F18) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F18) ProtoMessage()    {}
func (*Afn0C_P0_F18) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{38}
}
func (m *Afn0C_P0_F18) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F18) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F18.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F18) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F18.Merge(m, src)
}
func (m *Afn0C_P0_F18) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F18) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F18.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F18 proto.InternalMessageInfo

func (m *Afn0C_P0_F18) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn0C_P0_F18) GetLoopPhase() int32 {
	if m != nil {
		return m.LoopPhase
	}
	return 0
}

func (m *Afn0C_P0_F18) GetEventsDo() []int32 {
	if m != nil {
		return m.EventsDo
	}
	return nil
}

// 漏电检测数据(全数据)
type Afn0C_P0_F19 struct {
	// 一次n个回路漏电流，不跳回路（有符号3位小数bcd）
	LeakageCurrent []float64 `protobuf:"fixed64,1,rep,packed,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
}

func (m *Afn0C_P0_F19) Reset()         { *m = Afn0C_P0_F19{} }
func (m *Afn0C_P0_F19) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F19) ProtoMessage()    {}
func (*Afn0C_P0_F19) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{39}
}
func (m *Afn0C_P0_F19) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F19) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F19.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F19) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F19.Merge(m, src)
}
func (m *Afn0C_P0_F19) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F19) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F19.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F19 proto.InternalMessageInfo

func (m *Afn0C_P0_F19) GetLeakageCurrent() []float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return nil
}

// 光照度数据(主报)
type Afn0C_P0_F20 struct {
	// 光照度（0位小数bcd）
	Lux float64 `protobuf:"fixed64,1,opt,name=lux,proto3" json:"lux,omitempty"`
	// 温度（有符号2位小数bcd）
	Temperature float64 `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (m *Afn0C_P0_F20) Reset()         { *m = Afn0C_P0_F20{} }
func (m *Afn0C_P0_F20) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F20) ProtoMessage()    {}
func (*Afn0C_P0_F20) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{40}
}
func (m *Afn0C_P0_F20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F20.Merge(m, src)
}
func (m *Afn0C_P0_F20) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F20) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F20.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F20 proto.InternalMessageInfo

func (m *Afn0C_P0_F20) GetLux() float64 {
	if m != nil {
		return m.Lux
	}
	return 0
}

func (m *Afn0C_P0_F20) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

// 断电/漏电状态
type Afn0C_P0_F25 struct {
	// 欠压断电保护状态,0-正常，1-断电
	VoltageOverLower int32 `protobuf:"varint,1,opt,name=voltage_over_lower,json=voltageOverLower,proto3" json:"voltage_over_lower,omitempty"`
	// 过压断电保护状态,0-正常，1-断电
	VoltageOverUpper int32 `protobuf:"varint,2,opt,name=voltage_over_upper,json=voltageOverUpper,proto3" json:"voltage_over_upper,omitempty"`
	// 漏电跳闸保护状态，依次16个回路，0-正常，1-断电
	LeakageBreak []int32 `protobuf:"varint,3,rep,packed,name=leakage_break,json=leakageBreak,proto3" json:"leakage_break,omitempty"`
}

func (m *Afn0C_P0_F25) Reset()         { *m = Afn0C_P0_F25{} }
func (m *Afn0C_P0_F25) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F25) ProtoMessage()    {}
func (*Afn0C_P0_F25) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{41}
}
func (m *Afn0C_P0_F25) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F25) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F25.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F25) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F25.Merge(m, src)
}
func (m *Afn0C_P0_F25) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F25) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F25.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F25 proto.InternalMessageInfo

func (m *Afn0C_P0_F25) GetVoltageOverLower() int32 {
	if m != nil {
		return m.VoltageOverLower
	}
	return 0
}

func (m *Afn0C_P0_F25) GetVoltageOverUpper() int32 {
	if m != nil {
		return m.VoltageOverUpper
	}
	return 0
}

func (m *Afn0C_P0_F25) GetLeakageBreak() []int32 {
	if m != nil {
		return m.LeakageBreak
	}
	return nil
}

// 请求历史数据
// 模拟量历史数据曲线(出线)
// pn: n 1-48，模拟量回路数量
type Afn0D_Pn_F1 struct {
	// 起始时间，unix时间戳(上下行)
	DtStart int64 `protobuf:"varint,1,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
	DataDensity int32 `protobuf:"varint,2,opt,name=data_density,json=dataDensity,proto3" json:"data_density,omitempty"`
	// 数据点数(上下行)（最大20）
	DataNum int32 `protobuf:"varint,3,opt,name=data_num,json=dataNum,proto3" json:"data_num,omitempty"`
	// 模拟量(上下行，下行可填充多个回路，1-48,上行为单回路)
	LoopNo []int32 `protobuf:"varint,4,rep,packed,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 以下开始为上行填充
	// 回路数据，依次为每个数据点的数据
	LoopData []*Afn0D_Pn_F1_Loop_Data `protobuf:"bytes,5,rep,name=loop_data,json=loopData,proto3" json:"loop_data,omitempty"`
}

func (m *Afn0D_Pn_F1) Reset()         { *m = Afn0D_Pn_F1{} }
func (m *Afn0D_Pn_F1) String() string { return proto.CompactTextString(m) }
func (*Afn0D_Pn_F1) ProtoMessage()    {}
func (*Afn0D_Pn_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{42}
}
func (m *Afn0D_Pn_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0D_Pn_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0D_Pn_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0D_Pn_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0D_Pn_F1.Merge(m, src)
}
func (m *Afn0D_Pn_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn0D_Pn_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0D_Pn_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0D_Pn_F1 proto.InternalMessageInfo

func (m *Afn0D_Pn_F1) GetDtStart() int64 {
	if m != nil {
		return m.DtStart
	}
	return 0
}

func (m *Afn0D_Pn_F1) GetDataDensity() int32 {
	if m != nil {
		return m.DataDensity
	}
	return 0
}

func (m *Afn0D_Pn_F1) GetDataNum() int32 {
	if m != nil {
		return m.DataNum
	}
	return 0
}

func (m *Afn0D_Pn_F1) GetLoopNo() []int32 {
	if m != nil {
		return m.LoopNo
	}
	return nil
}

func (m *Afn0D_Pn_F1) GetLoopData() []*Afn0D_Pn_F1_Loop_Data {
	if m != nil {
		return m.LoopData
	}
	return nil
}

type Afn0D_Pn_F1_Loop_Data struct {
	// 电压（1位小数bcd）
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流（有符号3位小数bcd）
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率（有符号4位小数bcd）
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率（有符号4位小数bcd）
	ReactivePower float64 `protobuf:"fixed64,4,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 功率因数（有符号1位小数bcd）
	PowerFactor float64 `protobuf:"fixed64,5,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`
	// 光控值？？？（0位小数bcd）
	LuxValue float64 `protobuf:"fixed64,6,opt,name=lux_value,json=luxValue,proto3" json:"lux_value,omitempty"`
	// 其他模拟量（没这玩意）
	Other float64 `protobuf:"fixed64,7,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *Afn0D_Pn_F1_Loop_Data) Reset()         { *m = Afn0D_Pn_F1_Loop_Data{} }
func (m *Afn0D_Pn_F1_Loop_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0D_Pn_F1_Loop_Data) ProtoMessage()    {}
func (*Afn0D_Pn_F1_Loop_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{42, 0}
}
func (m *Afn0D_Pn_F1_Loop_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0D_Pn_F1_Loop_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0D_Pn_F1_Loop_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0D_Pn_F1_Loop_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0D_Pn_F1_Loop_Data.Merge(m, src)
}
func (m *Afn0D_Pn_F1_Loop_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0D_Pn_F1_Loop_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0D_Pn_F1_Loop_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0D_Pn_F1_Loop_Data proto.InternalMessageInfo

func (m *Afn0D_Pn_F1_Loop_Data) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetReactivePower() float64 {
	if m != nil {
		return m.ReactivePower
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetPowerFactor() float64 {
	if m != nil {
		return m.PowerFactor
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetLuxValue() float64 {
	if m != nil {
		return m.LuxValue
	}
	return 0
}

func (m *Afn0D_Pn_F1_Loop_Data) GetOther() float64 {
	if m != nil {
		return m.Other
	}
	return 0
}

// 模拟量历史数据曲线(进线)
type Afn0D_P0_F2 struct {
	// 起始时间，unix时间戳(上下行)
	DtStart int64 `protobuf:"varint,1,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
	DataDensity int32 `protobuf:"varint,2,opt,name=data_density,json=dataDensity,proto3" json:"data_density,omitempty"`
	// 数据点数(上下行)（最大20）
	DataNum int32 `protobuf:"varint,3,opt,name=data_num,json=dataNum,proto3" json:"data_num,omitempty"`
	// 模拟量(上下行)
	LoopNo int32 `protobuf:"varint,4,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 以下开始为上行填充
	// A相位数据，依次为每个数据点的数据
	PhaseAData []*Afn0D_P0_F2_Phase_Data `protobuf:"bytes,5,rep,name=phase_a_data,json=phaseAData,proto3" json:"phase_a_data,omitempty"`
	// B相位数据，依次为每个数据点的数据
	PhaseBData []*Afn0D_P0_F2_Phase_Data `protobuf:"bytes,6,rep,name=phase_b_data,json=phaseBData,proto3" json:"phase_b_data,omitempty"`
	// C相位数据，依次为每个数据点的数据
	PhaseCData []*Afn0D_P0_F2_Phase_Data `protobuf:"bytes,7,rep,name=phase_c_data,json=phaseCData,proto3" json:"phase_c_data,omitempty"`
}

func (m *Afn0D_P0_F2) Reset()         { *m = Afn0D_P0_F2{} }
func (m *Afn0D_P0_F2) String() string { return proto.CompactTextString(m) }
func (*Afn0D_P0_F2) ProtoMessage()    {}
func (*Afn0D_P0_F2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{43}
}
func (m *Afn0D_P0_F2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0D_P0_F2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0D_P0_F2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0D_P0_F2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0D_P0_F2.Merge(m, src)
}
func (m *Afn0D_P0_F2) XXX_Size() int {
	return m.Size()
}
func (m *Afn0D_P0_F2) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0D_P0_F2.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0D_P0_F2 proto.InternalMessageInfo

func (m *Afn0D_P0_F2) GetDtStart() int64 {
	if m != nil {
		return m.DtStart
	}
	return 0
}

func (m *Afn0D_P0_F2) GetDataDensity() int32 {
	if m != nil {
		return m.DataDensity
	}
	return 0
}

func (m *Afn0D_P0_F2) GetDataNum() int32 {
	if m != nil {
		return m.DataNum
	}
	return 0
}

func (m *Afn0D_P0_F2) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn0D_P0_F2) GetPhaseAData() []*Afn0D_P0_F2_Phase_Data {
	if m != nil {
		return m.PhaseAData
	}
	return nil
}

func (m *Afn0D_P0_F2) GetPhaseBData() []*Afn0D_P0_F2_Phase_Data {
	if m != nil {
		return m.PhaseBData
	}
	return nil
}

func (m *Afn0D_P0_F2) GetPhaseCData() []*Afn0D_P0_F2_Phase_Data {
	if m != nil {
		return m.PhaseCData
	}
	return nil
}

type Afn0D_P0_F2_Phase_Data struct {
	// 电压（1位小数bcd）
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流（有符号3位小数bcd）
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率（有符号4位小数bcd）
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率（有符号4位小数bcd）
	ReactivePower float64 `protobuf:"fixed64,4,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 功率因数（有符号1位小数bcd）
	PowerFactor float64 `protobuf:"fixed64,5,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`
}

func (m *Afn0D_P0_F2_Phase_Data) Reset()         { *m = Afn0D_P0_F2_Phase_Data{} }
func (m *Afn0D_P0_F2_Phase_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0D_P0_F2_Phase_Data) ProtoMessage()    {}
func (*Afn0D_P0_F2_Phase_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{43, 0}
}
func (m *Afn0D_P0_F2_Phase_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0D_P0_F2_Phase_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0D_P0_F2_Phase_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0D_P0_F2_Phase_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0D_P0_F2_Phase_Data.Merge(m, src)
}
func (m *Afn0D_P0_F2_Phase_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0D_P0_F2_Phase_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0D_P0_F2_Phase_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0D_P0_F2_Phase_Data proto.InternalMessageInfo

func (m *Afn0D_P0_F2_Phase_Data) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Afn0D_P0_F2_Phase_Data) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *Afn0D_P0_F2_Phase_Data) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *Afn0D_P0_F2_Phase_Data) GetReactivePower() float64 {
	if m != nil {
		return m.ReactivePower
	}
	return 0
}

func (m *Afn0D_P0_F2_Phase_Data) GetPowerFactor() float64 {
	if m != nil {
		return m.PowerFactor
	}
	return 0
}

// 漏电历史数据曲线
// pn:n1-8,漏电回路数量
type Afn0D_Pn_F3 struct {
	// 起始时间，unix时间戳(上下行)
	DtStart int64 `protobuf:"varint,1,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 数据密度(分钟)，可选0,1,2,3,4,5,10,15,30,60，表示每小时0分起累加指定密度的分钟数(上下行)
	DataDensity int32 `protobuf:"varint,2,opt,name=data_density,json=dataDensity,proto3" json:"data_density,omitempty"`
	// 数据点数(上下行)（最大20）
	DataNum int32 `protobuf:"varint,3,opt,name=data_num,json=dataNum,proto3" json:"data_num,omitempty"`
	// 模拟量(上下行，下行可填充多个回路，1-8,上行为单回路)
	LoopNo []int32 `protobuf:"varint,4,rep,packed,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 以下开始为上行填充
	// 依次为每个数据点数据（有符号3位小数bcd）
	LeakageCurrent []float64 `protobuf:"fixed64,5,rep,packed,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
}

func (m *Afn0D_Pn_F3) Reset()         { *m = Afn0D_Pn_F3{} }
func (m *Afn0D_Pn_F3) String() string { return proto.CompactTextString(m) }
func (*Afn0D_Pn_F3) ProtoMessage()    {}
func (*Afn0D_Pn_F3) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{44}
}
func (m *Afn0D_Pn_F3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0D_Pn_F3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0D_Pn_F3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0D_Pn_F3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0D_Pn_F3.Merge(m, src)
}
func (m *Afn0D_Pn_F3) XXX_Size() int {
	return m.Size()
}
func (m *Afn0D_Pn_F3) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0D_Pn_F3.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0D_Pn_F3 proto.InternalMessageInfo

func (m *Afn0D_Pn_F3) GetDtStart() int64 {
	if m != nil {
		return m.DtStart
	}
	return 0
}

func (m *Afn0D_Pn_F3) GetDataDensity() int32 {
	if m != nil {
		return m.DataDensity
	}
	return 0
}

func (m *Afn0D_Pn_F3) GetDataNum() int32 {
	if m != nil {
		return m.DataNum
	}
	return 0
}

func (m *Afn0D_Pn_F3) GetLoopNo() []int32 {
	if m != nil {
		return m.LoopNo
	}
	return nil
}

func (m *Afn0D_Pn_F3) GetLeakageCurrent() []float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return nil
}

// 请求事件记录
// 请求重要/一般事件
type Afn0E_P0_F1 struct {
	// pn应大于pm
	// 事件起始指针（上下行）0-254
	Pm int32 `protobuf:"varint,1,opt,name=pm,proto3" json:"pm,omitempty"`
	// 事件结束指针（上下行）1-255
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	// 以下为上行填充字段
	// 当前读到的位置
	EcNow int32 `protobuf:"varint,3,opt,name=ec_now,json=ecNow,proto3" json:"ec_now,omitempty"`
	// 事件信息
	EventsData []*Afn0E_P0_F1_Events_Data `protobuf:"bytes,4,rep,name=events_data,json=eventsData,proto3" json:"events_data,omitempty"`
}

func (m *Afn0E_P0_F1) Reset()         { *m = Afn0E_P0_F1{} }
func (m *Afn0E_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1) ProtoMessage()    {}
func (*Afn0E_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45}
}
func (m *Afn0E_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1.Merge(m, src)
}
func (m *Afn0E_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1 proto.InternalMessageInfo

func (m *Afn0E_P0_F1) GetPm() int32 {
	if m != nil {
		return m.Pm
	}
	return 0
}

func (m *Afn0E_P0_F1) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *Afn0E_P0_F1) GetEcNow() int32 {
	if m != nil {
		return m.EcNow
	}
	return 0
}

func (m *Afn0E_P0_F1) GetEventsData() []*Afn0E_P0_F1_Events_Data {
	if m != nil {
		return m.EventsData
	}
	return nil
}

type Afn0E_P0_F1_Events_Data struct {
	// 事件号
	EventId int32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// 发生时间
	EventTime int64 `protobuf:"varint,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// 事件数据
	Erc04 *Afn0E_P0_F1_Erc04_Data `protobuf:"bytes,10,opt,name=erc04,proto3" json:"erc04,omitempty"`
	Erc05 *Afn0E_P0_F1_Erc05_Data `protobuf:"bytes,11,opt,name=erc05,proto3" json:"erc05,omitempty"`
	Erc13 *Afn0E_P0_F1_Erc13_Data `protobuf:"bytes,12,opt,name=erc13,proto3" json:"erc13,omitempty"`
	Erc20 *Afn0E_P0_F1_Erc20_Data `protobuf:"bytes,13,opt,name=erc20,proto3" json:"erc20,omitempty"`
	Erc21 *Afn0E_P0_F1_Erc20_Data `protobuf:"bytes,14,opt,name=erc21,proto3" json:"erc21,omitempty"`
	Erc22 *Afn0E_P0_F1_Erc22_Data `protobuf:"bytes,15,opt,name=erc22,proto3" json:"erc22,omitempty"`
	Erc23 *Afn0E_P0_F1_Erc22_Data `protobuf:"bytes,16,opt,name=erc23,proto3" json:"erc23,omitempty"`
	Erc24 *Afn0E_P0_F1_Erc22_Data `protobuf:"bytes,17,opt,name=erc24,proto3" json:"erc24,omitempty"`
	Erc25 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,18,opt,name=erc25,proto3" json:"erc25,omitempty"`
	Erc26 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,19,opt,name=erc26,proto3" json:"erc26,omitempty"`
	Erc27 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,20,opt,name=erc27,proto3" json:"erc27,omitempty"`
	Erc28 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,21,opt,name=erc28,proto3" json:"erc28,omitempty"`
	Erc29 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,22,opt,name=erc29,proto3" json:"erc29,omitempty"`
	Erc30 *Afn0E_P0_F1_Erc25_Data `protobuf:"bytes,23,opt,name=erc30,proto3" json:"erc30,omitempty"`
	Erc31 *Afn0E_P0_F1_Erc13_Data `protobuf:"bytes,24,opt,name=erc31,proto3" json:"erc31,omitempty"`
	Erc32 *Afn0E_P0_F1_Erc13_Data `protobuf:"bytes,25,opt,name=erc32,proto3" json:"erc32,omitempty"`
}

func (m *Afn0E_P0_F1_Events_Data) Reset()         { *m = Afn0E_P0_F1_Events_Data{} }
func (m *Afn0E_P0_F1_Events_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Events_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Events_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 0}
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Events_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Events_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Events_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Events_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Events_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Events_Data) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Afn0E_P0_F1_Events_Data) GetEventTime() int64 {
	if m != nil {
		return m.EventTime
	}
	return 0
}

func (m *Afn0E_P0_F1_Events_Data) GetErc04() *Afn0E_P0_F1_Erc04_Data {
	if m != nil {
		return m.Erc04
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc05() *Afn0E_P0_F1_Erc05_Data {
	if m != nil {
		return m.Erc05
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc13() *Afn0E_P0_F1_Erc13_Data {
	if m != nil {
		return m.Erc13
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc20() *Afn0E_P0_F1_Erc20_Data {
	if m != nil {
		return m.Erc20
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc21() *Afn0E_P0_F1_Erc20_Data {
	if m != nil {
		return m.Erc21
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc22() *Afn0E_P0_F1_Erc22_Data {
	if m != nil {
		return m.Erc22
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc23() *Afn0E_P0_F1_Erc22_Data {
	if m != nil {
		return m.Erc23
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc24() *Afn0E_P0_F1_Erc22_Data {
	if m != nil {
		return m.Erc24
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc25() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc25
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc26() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc26
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc27() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc27
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc28() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc28
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc29() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc29
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc30() *Afn0E_P0_F1_Erc25_Data {
	if m != nil {
		return m.Erc30
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc31() *Afn0E_P0_F1_Erc13_Data {
	if m != nil {
		return m.Erc31
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc32() *Afn0E_P0_F1_Erc13_Data {
	if m != nil {
		return m.Erc32
	}
	return nil
}

// ERC4终端状态量变位记录，该事件可用于门开关报警，但软件需进行状态量序号的匹配
type Afn0E_P0_F1_Erc04_Data struct {
	// 变化类型，0-由通到断，1-由断到通
	DiStatus int32 `protobuf:"varint,1,opt,name=di_status,json=diStatus,proto3" json:"di_status,omitempty"`
	// 变化的状态量回路
	DiNo int32 `protobuf:"varint,2,opt,name=di_no,json=diNo,proto3" json:"di_no,omitempty"`
}

func (m *Afn0E_P0_F1_Erc04_Data) Reset()         { *m = Afn0E_P0_F1_Erc04_Data{} }
func (m *Afn0E_P0_F1_Erc04_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc04_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc04_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 1}
}
func (m *Afn0E_P0_F1_Erc04_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc04_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc04_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc04_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc04_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc04_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc04_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc04_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc04_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc04_Data) GetDiStatus() int32 {
	if m != nil {
		return m.DiStatus
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc04_Data) GetDiNo() int32 {
	if m != nil {
		return m.DiNo
	}
	return 0
}

// ERC5终端遥控跳闸记录
type Afn0E_P0_F1_Erc05_Data struct {
	// 开关量输出序号1-16
	SwitchoutNo int32 `protobuf:"varint,1,opt,name=switchout_no,json=switchoutNo,proto3" json:"switchout_no,omitempty"`
	// 控制类型,0-关，1-开（设备为0-开，1-关，通信服务反向）
	SwitchoutDo int32 `protobuf:"varint,2,opt,name=switchout_do,json=switchoutDo,proto3" json:"switchout_do,omitempty"`
	// 控制源0-4：分别表示主台控制、液晶控制、最后开关灯时限、时控、光控
	SwitchoutSource int32 `protobuf:"varint,3,opt,name=switchout_source,json=switchoutSource,proto3" json:"switchout_source,omitempty"`
}

func (m *Afn0E_P0_F1_Erc05_Data) Reset()         { *m = Afn0E_P0_F1_Erc05_Data{} }
func (m *Afn0E_P0_F1_Erc05_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc05_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc05_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 2}
}
func (m *Afn0E_P0_F1_Erc05_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc05_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc05_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc05_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc05_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc05_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc05_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc05_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc05_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc05_Data) GetSwitchoutNo() int32 {
	if m != nil {
		return m.SwitchoutNo
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc05_Data) GetSwitchoutDo() int32 {
	if m != nil {
		return m.SwitchoutDo
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc05_Data) GetSwitchoutSource() int32 {
	if m != nil {
		return m.SwitchoutSource
	}
	return 0
}

// ERC13终端停/上电记录
type Afn0E_P0_F1_Erc13_Data struct {
	// 记录类型：0恢复；1报警。
	ReportType int32 `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
}

func (m *Afn0E_P0_F1_Erc13_Data) Reset()         { *m = Afn0E_P0_F1_Erc13_Data{} }
func (m *Afn0E_P0_F1_Erc13_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc13_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc13_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 3}
}
func (m *Afn0E_P0_F1_Erc13_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc13_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc13_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc13_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc13_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc13_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc13_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc13_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc13_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc13_Data) GetReportType() int32 {
	if m != nil {
		return m.ReportType
	}
	return 0
}

// ERC20漏电报警记录
type Afn0E_P0_F1_Erc20_Data struct {
	// 记录类型：0恢复；1报警。
	ReportType int32 `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	// 漏电回路号
	LeakageNo int32 `protobuf:"varint,2,opt,name=leakage_no,json=leakageNo,proto3" json:"leakage_no,omitempty"`
	// 漏电等级
	LeakageLevel int32 `protobuf:"varint,3,opt,name=leakage_level,json=leakageLevel,proto3" json:"leakage_level,omitempty"`
	// 漏电值
	LeakageCurrent float64 `protobuf:"fixed64,4,opt,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
}

func (m *Afn0E_P0_F1_Erc20_Data) Reset()         { *m = Afn0E_P0_F1_Erc20_Data{} }
func (m *Afn0E_P0_F1_Erc20_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc20_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc20_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 4}
}
func (m *Afn0E_P0_F1_Erc20_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc20_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc20_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc20_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc20_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc20_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc20_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc20_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc20_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc20_Data) GetReportType() int32 {
	if m != nil {
		return m.ReportType
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc20_Data) GetLeakageNo() int32 {
	if m != nil {
		return m.LeakageNo
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc20_Data) GetLeakageLevel() int32 {
	if m != nil {
		return m.LeakageLevel
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc20_Data) GetLeakageCurrent() float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return 0
}

// ERC21 保护跳闸记录（同erc20,不填充leakage_level)
// ERC22 缺相报警记录
type Afn0E_P0_F1_Erc22_Data struct {
	// 记录类型：0恢复；1报警。
	ReportType int32 `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	// 相位0--A 相,调整1--B 相,调整2--C 相
	Phase int32 `protobuf:"varint,2,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (m *Afn0E_P0_F1_Erc22_Data) Reset()         { *m = Afn0E_P0_F1_Erc22_Data{} }
func (m *Afn0E_P0_F1_Erc22_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc22_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc22_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 5}
}
func (m *Afn0E_P0_F1_Erc22_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc22_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc22_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc22_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc22_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc22_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc22_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc22_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc22_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc22_Data) GetReportType() int32 {
	if m != nil {
		return m.ReportType
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc22_Data) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

// ERC23 过压记录(同erc22)
// ERC24 欠压记录(同erc22)
// ERC25 过流记录
type Afn0E_P0_F1_Erc25_Data struct {
	// 记录类型：0恢复；1报警。
	ReportType int32 `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	// 回路号
	LoopNo int32 `protobuf:"varint,2,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
}

func (m *Afn0E_P0_F1_Erc25_Data) Reset()         { *m = Afn0E_P0_F1_Erc25_Data{} }
func (m *Afn0E_P0_F1_Erc25_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc25_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc25_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{45, 6}
}
func (m *Afn0E_P0_F1_Erc25_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc25_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc25_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc25_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc25_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc25_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc25_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc25_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc25_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc25_Data) GetReportType() int32 {
	if m != nil {
		return m.ReportType
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc25_Data) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

// 数据转发
// 透明转发（上下行）
type Afn10_P0_F2 struct {
	// 串口配置
	RsSetting *RS_Setting `protobuf:"bytes,1,opt,name=rs_setting,json=rsSetting,proto3" json:"rs_setting,omitempty"`
	// 透传数据命令定义，同二代命令格式，具体见下方每个命令结构体内说明
	Cmd string `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// 抄表
	WlstMru_9100 *Afn10_P0_F2_WlstMru_9100 `protobuf:"bytes,10,opt,name=wlst_mru_9100,json=wlstMru9100,proto3" json:"wlst_mru_9100,omitempty"`
}

func (m *Afn10_P0_F2) Reset()         { *m = Afn10_P0_F2{} }
func (m *Afn10_P0_F2) String() string { return proto.CompactTextString(m) }
func (*Afn10_P0_F2) ProtoMessage()    {}
func (*Afn10_P0_F2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{46}
}
func (m *Afn10_P0_F2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn10_P0_F2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn10_P0_F2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn10_P0_F2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn10_P0_F2.Merge(m, src)
}
func (m *Afn10_P0_F2) XXX_Size() int {
	return m.Size()
}
func (m *Afn10_P0_F2) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn10_P0_F2.DiscardUnknown(m)
}

var xxx_messageInfo_Afn10_P0_F2 proto.InternalMessageInfo

func (m *Afn10_P0_F2) GetRsSetting() *RS_Setting {
	if m != nil {
		return m.RsSetting
	}
	return nil
}

func (m *Afn10_P0_F2) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Afn10_P0_F2) GetWlstMru_9100() *Afn10_P0_F2_WlstMru_9100 {
	if m != nil {
		return m.WlstMru_9100
	}
	return nil
}

type Afn10_P0_F2_WlstMru_9100 struct {
	// cmd: wlst.mru.1100-读数据，wlst.mru.9100-读数据应答，wlst.mru.1300-读地址, wlst.mru.9300-读地址应答
	// 电表地址（该字段与二代不同，请注意）
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	//抄表类型(1A相，2B相，3C相，4正向有功总电能，5组合有功总电能)
	MeterReadingType int32 `protobuf:"varint,2,opt,name=meter_reading_type,json=meterReadingType,proto3" json:"meter_reading_type,omitempty"`
	//抄表时间段（0当前，1上月，2上上月。。。）
	MeterReadingDate int32 `protobuf:"varint,3,opt,name=meter_reading_date,json=meterReadingDate,proto3" json:"meter_reading_date,omitempty"`
	//协议版本，1-1997协议，2-2007协议
	Ver int32 `protobuf:"varint,4,opt,name=ver,proto3" json:"ver,omitempty"`
	//数据（wlst.mru.9100上行填充）
	MeterValue float64 `protobuf:"fixed64,5,opt,name=meter_value,json=meterValue,proto3" json:"meter_value,omitempty"`
}

func (m *Afn10_P0_F2_WlstMru_9100) Reset()         { *m = Afn10_P0_F2_WlstMru_9100{} }
func (m *Afn10_P0_F2_WlstMru_9100) String() string { return proto.CompactTextString(m) }
func (*Afn10_P0_F2_WlstMru_9100) ProtoMessage()    {}
func (*Afn10_P0_F2_WlstMru_9100) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{46, 0}
}
func (m *Afn10_P0_F2_WlstMru_9100) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn10_P0_F2_WlstMru_9100) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn10_P0_F2_WlstMru_9100.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn10_P0_F2_WlstMru_9100) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn10_P0_F2_WlstMru_9100.Merge(m, src)
}
func (m *Afn10_P0_F2_WlstMru_9100) XXX_Size() int {
	return m.Size()
}
func (m *Afn10_P0_F2_WlstMru_9100) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn10_P0_F2_WlstMru_9100.DiscardUnknown(m)
}

var xxx_messageInfo_Afn10_P0_F2_WlstMru_9100 proto.InternalMessageInfo

func (m *Afn10_P0_F2_WlstMru_9100) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *Afn10_P0_F2_WlstMru_9100) GetMeterReadingType() int32 {
	if m != nil {
		return m.MeterReadingType
	}
	return 0
}

func (m *Afn10_P0_F2_WlstMru_9100) GetMeterReadingDate() int32 {
	if m != nil {
		return m.MeterReadingDate
	}
	return 0
}

func (m *Afn10_P0_F2_WlstMru_9100) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Afn10_P0_F2_WlstMru_9100) GetMeterValue() float64 {
	if m != nil {
		return m.MeterValue
	}
	return 0
}

// FTP升级命令
type Afn10_P0_F9 struct {
	// ftpip,int64算法
	FtpIp int64 `protobuf:"varint,1,opt,name=ftp_ip,json=ftpIp,proto3" json:"ftp_ip,omitempty"`
	// ftp 端口号
	FtpPort int32 `protobuf:"varint,2,opt,name=ftp_port,json=ftpPort,proto3" json:"ftp_port,omitempty"`
	// ftp用户名，最大10个英文字符
	FtpUser string `protobuf:"bytes,3,opt,name=ftp_user,json=ftpUser,proto3" json:"ftp_user,omitempty"`
	// ftp 密码，最大10个英文字符
	FtpPwd string `protobuf:"bytes,4,opt,name=ftp_pwd,json=ftpPwd,proto3" json:"ftp_pwd,omitempty"`
	// 服务器文件路径，默认'/'，最大20个英文字符，不能有空格
	FtpDir string `protobuf:"bytes,5,opt,name=ftp_dir,json=ftpDir,proto3" json:"ftp_dir,omitempty"`
	// 文件名，最大10个英文字符（含扩展名）
	FtpFile string `protobuf:"bytes,6,opt,name=ftp_file,json=ftpFile,proto3" json:"ftp_file,omitempty"`
}

func (m *Afn10_P0_F9) Reset()         { *m = Afn10_P0_F9{} }
func (m *Afn10_P0_F9) String() string { return proto.CompactTextString(m) }
func (*Afn10_P0_F9) ProtoMessage()    {}
func (*Afn10_P0_F9) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{47}
}
func (m *Afn10_P0_F9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn10_P0_F9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn10_P0_F9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn10_P0_F9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn10_P0_F9.Merge(m, src)
}
func (m *Afn10_P0_F9) XXX_Size() int {
	return m.Size()
}
func (m *Afn10_P0_F9) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn10_P0_F9.DiscardUnknown(m)
}

var xxx_messageInfo_Afn10_P0_F9 proto.InternalMessageInfo

func (m *Afn10_P0_F9) GetFtpIp() int64 {
	if m != nil {
		return m.FtpIp
	}
	return 0
}

func (m *Afn10_P0_F9) GetFtpPort() int32 {
	if m != nil {
		return m.FtpPort
	}
	return 0
}

func (m *Afn10_P0_F9) GetFtpUser() string {
	if m != nil {
		return m.FtpUser
	}
	return ""
}

func (m *Afn10_P0_F9) GetFtpPwd() string {
	if m != nil {
		return m.FtpPwd
	}
	return ""
}

func (m *Afn10_P0_F9) GetFtpDir() string {
	if m != nil {
		return m.FtpDir
	}
	return ""
}

func (m *Afn10_P0_F9) GetFtpFile() string {
	if m != nil {
		return m.FtpFile
	}
	return ""
}

// 终端/模块FTP升级结果（上行）
type Afn10_P0_F10 struct {
	// 升级前软件版本号
	SoftwareVerOld string `protobuf:"bytes,1,opt,name=software_ver_old,json=softwareVerOld,proto3" json:"software_ver_old,omitempty"`
	// 升级前软件发布日期：YYMMDD
	SoftwareDateOld int32 `protobuf:"varint,2,opt,name=software_date_old,json=softwareDateOld,proto3" json:"software_date_old,omitempty"`
	// 升级后软件版本号
	SoftwareVerNew string `protobuf:"bytes,3,opt,name=software_ver_new,json=softwareVerNew,proto3" json:"software_ver_new,omitempty"`
	// 升级后软件发布日期：YYMMDD
	SoftwareDateNew int32 `protobuf:"varint,4,opt,name=software_date_new,json=softwareDateNew,proto3" json:"software_date_new,omitempty"`
	// 升级发生时间,unix时间戳
	DtUpgrade int64 `protobuf:"varint,5,opt,name=dt_upgrade,json=dtUpgrade,proto3" json:"dt_upgrade,omitempty"`
	// 设备类型（f41上行填写）
	DevType string `protobuf:"bytes,6,opt,name=dev_type,json=devType,proto3" json:"dev_type,omitempty"`
}

func (m *Afn10_P0_F10) Reset()         { *m = Afn10_P0_F10{} }
func (m *Afn10_P0_F10) String() string { return proto.CompactTextString(m) }
func (*Afn10_P0_F10) ProtoMessage()    {}
func (*Afn10_P0_F10) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c797d1dfec7a224, []int{48}
}
func (m *Afn10_P0_F10) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn10_P0_F10) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn10_P0_F10.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn10_P0_F10) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn10_P0_F10.Merge(m, src)
}
func (m *Afn10_P0_F10) XXX_Size() int {
	return m.Size()
}
func (m *Afn10_P0_F10) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn10_P0_F10.DiscardUnknown(m)
}

var xxx_messageInfo_Afn10_P0_F10 proto.InternalMessageInfo

func (m *Afn10_P0_F10) GetSoftwareVerOld() string {
	if m != nil {
		return m.SoftwareVerOld
	}
	return ""
}

func (m *Afn10_P0_F10) GetSoftwareDateOld() int32 {
	if m != nil {
		return m.SoftwareDateOld
	}
	return 0
}

func (m *Afn10_P0_F10) GetSoftwareVerNew() string {
	if m != nil {
		return m.SoftwareVerNew
	}
	return ""
}

func (m *Afn10_P0_F10) GetSoftwareDateNew() int32 {
	if m != nil {
		return m.SoftwareDateNew
	}
	return 0
}

func (m *Afn10_P0_F10) GetDtUpgrade() int64 {
	if m != nil {
		return m.DtUpgrade
	}
	return 0
}

func (m *Afn10_P0_F10) GetDevType() string {
	if m != nil {
		return m.DevType
	}
	return ""
}

func init() {
	proto.RegisterType((*RS_Setting)(nil), "wlst.gb.RS_Setting")
	proto.RegisterType((*UnitIdentification)(nil), "wlst.gb.UnitIdentification")
	proto.RegisterType((*DataIdentification)(nil), "wlst.gb.DataIdentification")
	proto.RegisterType((*MsgGBOpen)(nil), "wlst.gb.MsgGBOpen")
	proto.RegisterType((*Afn00_P0_F1)(nil), "wlst.gb.Afn00_P0_F1")
	proto.RegisterType((*Afn00_P0_F3)(nil), "wlst.gb.Afn00_P0_F3")
	proto.RegisterType((*Afn04_P0_F1)(nil), "wlst.gb.Afn04_P0_F1")
	proto.RegisterType((*Afn04_P0_F3)(nil), "wlst.gb.Afn04_P0_F3")
	proto.RegisterType((*Afn04_P0_F9)(nil), "wlst.gb.Afn04_P0_F9")
	proto.RegisterType((*Afn04_P0_F10)(nil), "wlst.gb.Afn04_P0_F10")
	proto.RegisterType((*Afn04_P0_F11)(nil), "wlst.gb.Afn04_P0_F11")
	proto.RegisterType((*Afn04_Pn_F14)(nil), "wlst.gb.Afn04_Pn_F14")
	proto.RegisterType((*Afn04_Pn_F14_Elu_Setting)(nil), "wlst.gb.Afn04_Pn_F14.Elu_Setting")
	proto.RegisterType((*Afn04_Pn_F15)(nil), "wlst.gb.Afn04_Pn_F15")
	proto.RegisterType((*Afn04_Pn_F15_Time_Slot)(nil), "wlst.gb.Afn04_Pn_F15.Time_Slot")
	proto.RegisterType((*Afn04_P0_F41)(nil), "wlst.gb.Afn04_P0_F41")
	proto.RegisterType((*Afn04_P0_F42)(nil), "wlst.gb.Afn04_P0_F42")
	proto.RegisterType((*Afn04_P0_F42_Current_Setting)(nil), "wlst.gb.Afn04_P0_F42.Current_Setting")
	proto.RegisterType((*Afn04_P0_F46)(nil), "wlst.gb.Afn04_P0_F46")
	proto.RegisterType((*Afn04_P0_F46_Time_Slot)(nil), "wlst.gb.Afn04_P0_F46.Time_Slot")
	proto.RegisterType((*Afn04_P0_F49)(nil), "wlst.gb.Afn04_P0_F49")
	proto.RegisterType((*Afn04_P0_F50)(nil), "wlst.gb.Afn04_P0_F50")
	proto.RegisterType((*Afn04_P0_F51)(nil), "wlst.gb.Afn04_P0_F51")
	proto.RegisterType((*Afn04_P0_F51_Current_Setting)(nil), "wlst.gb.Afn04_P0_F51.Current_Setting")
	proto.RegisterType((*Afn04_P0_F51_Loop_Setting)(nil), "wlst.gb.Afn04_P0_F51.Loop_Setting")
	proto.RegisterType((*Afn04_P0_F52)(nil), "wlst.gb.Afn04_P0_F52")
	proto.RegisterType((*Afn04_P0_F52_Leakage_Limit)(nil), "wlst.gb.Afn04_P0_F52.Leakage_Limit")
	proto.RegisterType((*Afn04_P0_F53)(nil), "wlst.gb.Afn04_P0_F53")
	proto.RegisterType((*Afn04_P0_F57)(nil), "wlst.gb.Afn04_P0_F57")
	proto.RegisterType((*Afn04_P0_F65)(nil), "wlst.gb.Afn04_P0_F65")
	proto.RegisterType((*Afn04_P0_F66)(nil), "wlst.gb.Afn04_P0_F66")
	proto.RegisterType((*Afn04_P0_F67)(nil), "wlst.gb.Afn04_P0_F67")
	proto.RegisterType((*Afn04_P0_F68)(nil), "wlst.gb.Afn04_P0_F68")
	proto.RegisterType((*Afn05_P0_F1)(nil), "wlst.gb.Afn05_P0_F1")
	proto.RegisterType((*Afn05_P0_F1_Switchout_Ctrl)(nil), "wlst.gb.Afn05_P0_F1.Switchout_Ctrl")
	proto.RegisterType((*Afn05_P0_F9)(nil), "wlst.gb.Afn05_P0_F9")
	proto.RegisterType((*Afn05_P0_F31)(nil), "wlst.gb.Afn05_P0_F31")
	proto.RegisterType((*Afn05_P0_F57)(nil), "wlst.gb.Afn05_P0_F57")
	proto.RegisterType((*Afn09_P0_F1)(nil), "wlst.gb.Afn09_P0_F1")
	proto.RegisterType((*Afn0C_Pn_F1)(nil), "wlst.gb.Afn0c_Pn_F1")
	proto.RegisterType((*Afn0C_Pn_F1_Loop_Data)(nil), "wlst.gb.Afn0c_Pn_F1.Loop_Data")
	proto.RegisterType((*Afn0C_P0_F2)(nil), "wlst.gb.Afn0c_P0_F2")
	proto.RegisterType((*Afn0C_P0_F3)(nil), "wlst.gb.Afn0c_P0_F3")
	proto.RegisterType((*Afn0C_P0_F3_Phase_Data)(nil), "wlst.gb.Afn0c_P0_F3.Phase_Data")
	proto.RegisterType((*Afn0C_P0_F4)(nil), "wlst.gb.Afn0c_P0_F4")
	proto.RegisterType((*Afn0C_P0_F6)(nil), "wlst.gb.Afn0c_P0_F6")
	proto.RegisterType((*Afn0C_P0_F7)(nil), "wlst.gb.Afn0c_P0_F7")
	proto.RegisterType((*Afn0C_P0_F9)(nil), "wlst.gb.Afn0c_P0_F9")
	proto.RegisterType((*Afn0C_P0_F9_Loop_Status)(nil), "wlst.gb.Afn0c_P0_F9.Loop_Status")
	proto.RegisterType((*Afn0C_P0_F18)(nil), "wlst.gb.Afn0c_P0_F18")
	proto.RegisterType((*Afn0C_P0_F19)(nil), "wlst.gb.Afn0c_P0_F19")
	proto.RegisterType((*Afn0C_P0_F20)(nil), "wlst.gb.Afn0c_P0_F20")
	proto.RegisterType((*Afn0C_P0_F25)(nil), "wlst.gb.Afn0c_P0_F25")
	proto.RegisterType((*Afn0D_Pn_F1)(nil), "wlst.gb.Afn0d_Pn_F1")
	proto.RegisterType((*Afn0D_Pn_F1_Loop_Data)(nil), "wlst.gb.Afn0d_Pn_F1.Loop_Data")
	proto.RegisterType((*Afn0D_P0_F2)(nil), "wlst.gb.Afn0d_P0_F2")
	proto.RegisterType((*Afn0D_P0_F2_Phase_Data)(nil), "wlst.gb.Afn0d_P0_F2.Phase_Data")
	proto.RegisterType((*Afn0D_Pn_F3)(nil), "wlst.gb.Afn0d_Pn_F3")
	proto.RegisterType((*Afn0E_P0_F1)(nil), "wlst.gb.Afn0e_P0_F1")
	proto.RegisterType((*Afn0E_P0_F1_Events_Data)(nil), "wlst.gb.Afn0e_P0_F1.Events_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc04_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc04_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc05_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc05_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc13_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc13_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc20_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc20_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc22_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc22_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc25_Data)(nil), "wlst.gb.Afn0e_P0_F1.Erc25_Data")
	proto.RegisterType((*Afn10_P0_F2)(nil), "wlst.gb.Afn10_P0_F2")
	proto.RegisterType((*Afn10_P0_F2_WlstMru_9100)(nil), "wlst.gb.Afn10_P0_F2.Wlst_mru_9100")
	proto.RegisterType((*Afn10_P0_F9)(nil), "wlst.gb.Afn10_P0_F9")
	proto.RegisterType((*Afn10_P0_F10)(nil), "wlst.gb.Afn10_P0_F10")
}

func init() { proto.RegisterFile("msg_wlst.proto", fileDescriptor_7c797d1dfec7a224) }

var fileDescriptor_7c797d1dfec7a224 = []byte{
	// 4096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5b, 0x4d, 0x8c, 0x24, 0xc9,
	0x55, 0xde, 0xaa, 0xec, 0xaa, 0xee, 0x8a, 0xea, 0xee, 0xe9, 0xc9, 0x9d, 0xf5, 0xc6, 0xd6, 0x7a,
	0xa7, 0x67, 0x73, 0x6d, 0x76, 0xb0, 0xbd, 0xed, 0xca, 0xcc, 0xaa, 0xee, 0x29, 0xd9, 0x18, 0xfa,
	0x67, 0x9a, 0x1d, 0x6b, 0xb7, 0x67, 0x54, 0x33, 0xb3, 0x70, 0x4b, 0x65, 0x57, 0x46, 0x75, 0x27,
	0x5d, 0x95, 0x99, 0x93, 0x99, 0xd5, 0x3d, 0x2d, 0xe4, 0x03, 0x77, 0x10, 0x46, 0xfc, 0x0a, 0x90,
	0xb0, 0xd7, 0x80, 0x39, 0x80, 0x84, 0x7c, 0x41, 0x48, 0x88, 0x0b, 0x97, 0x35, 0xe2, 0xb0, 0xc7,
	0x35, 0x17, 0xd0, 0xee, 0x05, 0x6e, 0x1c, 0x0c, 0x18, 0x16, 0x24, 0xf4, 0xe2, 0x45, 0x64, 0x46,
	0x56, 0x65, 0x6d, 0x4d, 0xf3, 0x23, 0x40, 0xbe, 0x55, 0xbe, 0xf7, 0xbe, 0x17, 0x2f, 0x5f, 0xbc,
	0x78, 0xf1, 0xe2, 0x65, 0x14, 0x59, 0x1f, 0x27, 0x27, 0xce, 0xc5, 0x28, 0x49, 0xb7, 0xa2, 0x38,
	0x4c, 0x43, 0x7d, 0x99, 0xff, 0x3e, 0x39, 0x36, 0x7e, 0x82, 0x90, 0xfe, 0x43, 0xe7, 0x21, 0x4b,
	0x53, 0x3f, 0x38, 0xd1, 0x37, 0x88, 0xe6, 0x7b, 0x4f, 0x69, 0xe5, 0x56, 0xe5, 0x76, 0xad, 0x0f,
	0x3f, 0x81, 0x72, 0x1c, 0x25, 0xb4, 0x8a, 0x94, 0xe3, 0x28, 0xd1, 0xd7, 0x49, 0x35, 0x1e, 0x50,
	0x8d, 0x13, 0xaa, 0xf1, 0xc0, 0xe8, 0x10, 0xfd, 0x71, 0xe0, 0xa7, 0xf7, 0x3c, 0x16, 0xa4, 0xfe,
	0xd0, 0x1f, 0xb8, 0xa9, 0x1f, 0x06, 0x20, 0x15, 0x05, 0x42, 0x51, 0x35, 0xe2, 0xcf, 0xc3, 0x40,
	0xa8, 0xa9, 0x0e, 0x03, 0xe3, 0x17, 0xaa, 0x44, 0x3f, 0x70, 0x53, 0x77, 0x0a, 0x66, 0x93, 0xfa,
	0xc4, 0x0f, 0xd2, 0x7b, 0x07, 0xb4, 0x72, 0x4b, 0xbb, 0xdd, 0xb4, 0x5e, 0xde, 0x12, 0x86, 0x6e,
	0xcd, 0x8e, 0xd1, 0x17, 0xa2, 0x60, 0xa3, 0xe7, 0xc7, 0xd2, 0x46, 0xcf, 0x8f, 0x61, 0xb4, 0x34,
	0x92, 0x36, 0xa6, 0x11, 0xb7, 0xe6, 0x82, 0xd6, 0x6e, 0x55, 0x6e, 0x37, 0xfa, 0xd5, 0xe8, 0x02,
	0x10, 0x6c, 0x60, 0xd2, 0x3a, 0x22, 0xd8, 0xc0, 0x44, 0x8a, 0x45, 0x97, 0x25, 0xc5, 0x02, 0x4a,
	0xc2, 0x9e, 0xd0, 0x15, 0xa4, 0x24, 0xec, 0x09, 0x50, 0xdc, 0x61, 0x40, 0x1b, 0x48, 0x71, 0x87,
	0x01, 0x50, 0x86, 0x93, 0x80, 0x12, 0xa4, 0x0c, 0x27, 0x81, 0xae, 0x93, 0x25, 0x37, 0x66, 0x2e,
	0x6d, 0xf2, 0xb1, 0xf8, 0x6f, 0x4e, 0xf3, 0xbc, 0x98, 0xae, 0xde, 0xaa, 0xdc, 0xd6, 0xfa, 0xfc,
	0x37, 0x58, 0x94, 0x44, 0x74, 0x0d, 0x2d, 0x4c, 0x22, 0xe3, 0xaf, 0x5e, 0x22, 0x8d, 0xb7, 0x93,
	0x93, 0x9f, 0xdc, 0xbb, 0x1f, 0x31, 0xee, 0x06, 0xee, 0x9c, 0x03, 0xee, 0x41, 0xd5, 0x0d, 0xb3,
	0x3e, 0xeb, 0x0b, 0x51, 0xbd, 0x43, 0x9a, 0xee, 0x30, 0x68, 0xb7, 0x9d, 0xa8, 0xed, 0x0c, 0x4d,
	0x6e, 0x54, 0xd3, 0xba, 0x91, 0x21, 0x77, 0x39, 0xef, 0x41, 0xdb, 0x39, 0x34, 0xfb, 0x0d, 0x2e,
	0xf8, 0xa0, 0x7d, 0x68, 0x16, 0x51, 0x16, 0xb7, 0x7b, 0x21, 0xca, 0x2a, 0xa2, 0x6c, 0xfe, 0x66,
	0xe5, 0x28, 0x3b, 0x47, 0xd9, 0x12, 0xd5, 0x11, 0x16, 0x7a, 0x25, 0xa8, 0x8e, 0x3a, 0x56, 0x47,
	0xb5, 0xb0, 0x23, 0xc6, 0x62, 0x73, 0x51, 0x76, 0x8e, 0x9a, 0x1a, 0xab, 0x47, 0x87, 0x73, 0x51,
	0xbd, 0x1c, 0xd5, 0xd3, 0x77, 0xc8, 0xaa, 0x62, 0x61, 0x9b, 0x9e, 0x70, 0xd8, 0x0b, 0x65, 0x26,
	0xb6, 0xfb, 0x24, 0xb3, 0xb1, 0x3d, 0x05, 0x34, 0xe9, 0xe9, 0x7c, 0xa0, 0xa9, 0x00, 0x4d, 0x05,
	0x18, 0x38, 0x43, 0xb3, 0x43, 0x7d, 0x1e, 0xf7, 0x33, 0xc0, 0xc0, 0x39, 0x34, 0x3b, 0x12, 0x18,
	0x1c, 0x9a, 0x9d, 0x29, 0x60, 0x97, 0xfe, 0xcc, 0x7c, 0x60, 0x57, 0x01, 0x76, 0x8b, 0xa6, 0x76,
	0x4c, 0x7a, 0x36, 0xd7, 0xd4, 0x8e, 0x62, 0x6a, 0xc7, 0x9c, 0x02, 0x5a, 0x74, 0x34, 0x1f, 0x68,
	0x29, 0x40, 0x6b, 0x0a, 0xb8, 0x4d, 0xc7, 0xf3, 0x81, 0xdb, 0x0a, 0x70, 0x7b, 0x0a, 0xd8, 0xa3,
	0xc1, 0x7c, 0x60, 0x4f, 0x01, 0x4e, 0xcd, 0x63, 0xb7, 0x4d, 0xc3, 0xb9, 0xc0, 0xae, 0x32, 0x8f,
	0xdd, 0xa9, 0x79, 0xec, 0x9a, 0x34, 0x9a, 0x0f, 0x54, 0x9c, 0xd3, 0x9d, 0x72, 0x4e, 0xd7, 0xa2,
	0x4f, 0xe6, 0x03, 0x15, 0xe7, 0x74, 0xa7, 0x9c, 0xd3, 0xb5, 0x69, 0x3c, 0x1f, 0x68, 0x2b, 0x40,
	0x7b, 0x0a, 0xb8, 0x43, 0x93, 0xf9, 0xc0, 0x1d, 0x05, 0xb8, 0xa3, 0x77, 0x71, 0x69, 0x74, 0xc5,
	0x32, 0x7c, 0xaf, 0x52, 0xb2, 0x36, 0xba, 0xea, 0x3a, 0xec, 0xf2, 0x75, 0x58, 0x80, 0xf5, 0xe8,
	0x77, 0xe7, 0xc3, 0x7a, 0x39, 0xac, 0xa7, 0xdf, 0x41, 0x33, 0x11, 0x66, 0x9b, 0xf4, 0x2f, 0x2b,
	0x25, 0x76, 0x22, 0xce, 0x16, 0x2e, 0x05, 0xa0, 0x9d, 0x0d, 0xd8, 0x13, 0x76, 0xfe, 0x61, 0xb5,
	0x64, 0xc0, 0x9e, 0x6a, 0x67, 0x4f, 0xb5, 0xd3, 0x15, 0xb0, 0xaf, 0x6b, 0x8b, 0xd2, 0x8c, 0x3b,
	0x0b, 0xb3, 0xe9, 0x2f, 0x69, 0x8b, 0xf2, 0x8c, 0xcb, 0xf3, 0x4c, 0x01, 0xd6, 0xa3, 0xbf, 0xa6,
	0x2d, 0x4a, 0x34, 0xae, 0xea, 0x15, 0x57, 0x26, 0x9a, 0x5f, 0xd7, 0x16, 0x66, 0x1a, 0x17, 0x33,
	0x4d, 0x11, 0x69, 0xd2, 0xdf, 0xd0, 0x16, 0xa6, 0x1a, 0x17, 0x53, 0x4d, 0x8e, 0xc4, 0x54, 0xf3,
	0x5b, 0xda, 0xc2, 0x5c, 0xe3, 0x62, 0xae, 0x29, 0x22, 0xbb, 0xf4, 0xb7, 0xb5, 0x85, 0xc9, 0xc6,
	0xc5, 0x64, 0x53, 0xb0, 0xb6, 0x63, 0xd2, 0xdf, 0xd1, 0x16, 0x66, 0x1b, 0x17, 0xb3, 0x4d, 0x11,
	0x69, 0xd1, 0x6f, 0x68, 0x0b, 0xd3, 0x8d, 0x8b, 0xe9, 0xa6, 0x88, 0xdc, 0xa6, 0xdf, 0xd4, 0x16,
	0xe6, 0x1b, 0x17, 0xf3, 0x4d, 0x11, 0xd9, 0xa3, 0xef, 0x6a, 0x0b, 0x13, 0x8e, 0x8b, 0x09, 0xa7,
	0x80, 0xec, 0xb6, 0xe9, 0xb7, 0xb4, 0x85, 0x19, 0xc7, 0xc5, 0x8c, 0x53, 0x44, 0x9a, 0xf4, 0x77,
	0xb5, 0x85, 0x29, 0xc7, 0xc5, 0x94, 0x53, 0x44, 0x5a, 0xf4, 0xf7, 0xb4, 0x85, 0x39, 0xc7, 0xc5,
	0x9c, 0x53, 0x44, 0xda, 0xf4, 0xf7, 0xb5, 0x85, 0x49, 0xc7, 0xc5, 0xa4, 0x53, 0x44, 0xee, 0xd0,
	0x6f, 0x6b, 0x0b, 0xb3, 0x8e, 0x5b, 0xc8, 0x3a, 0x03, 0x8c, 0x21, 0xfa, 0xfd, 0xb2, 0x85, 0x32,
	0xc0, 0x10, 0xc2, 0x85, 0x32, 0x80, 0x08, 0x52, 0x60, 0xbc, 0x3e, 0xf9, 0xc7, 0x39, 0xb0, 0xb6,
	0x73, 0x68, 0x49, 0x18, 0x14, 0x28, 0x05, 0x98, 0x4d, 0xff, 0x69, 0x3e, 0xcc, 0xce, 0x61, 0x76,
	0x11, 0xd6, 0xa1, 0xff, 0x3c, 0x1f, 0xd6, 0xc9, 0x61, 0x9d, 0x22, 0x6c, 0x9b, 0xfe, 0x60, 0x3e,
	0x6c, 0x3b, 0x87, 0x6d, 0x17, 0x61, 0x3b, 0xf4, 0x5f, 0xe6, 0xc3, 0x76, 0x72, 0xd8, 0x4e, 0x11,
	0xd6, 0xa3, 0xff, 0x3a, 0x1f, 0xd6, 0xcb, 0x61, 0x59, 0x88, 0x22, 0xcc, 0xbc, 0x43, 0x3f, 0x2e,
	0x9b, 0x3a, 0xc4, 0x99, 0x77, 0x70, 0xea, 0x00, 0x68, 0xde, 0x99, 0x42, 0xf6, 0xe8, 0xbf, 0x7d,
	0x02, 0xb2, 0xa7, 0x20, 0xa7, 0xc6, 0xb4, 0xda, 0xf4, 0xdf, 0xe7, 0x23, 0xad, 0x76, 0x8e, 0xb4,
	0xda, 0xf2, 0x25, 0x3d, 0x11, 0x2e, 0x1f, 0x2c, 0x95, 0xbc, 0xa4, 0xa7, 0x86, 0x8b, 0xa7, 0x86,
	0x8b, 0x27, 0xc2, 0xe5, 0x7b, 0x73, 0x60, 0x79, 0xb8, 0x78, 0x6a, 0xb8, 0xe0, 0x68, 0x36, 0xfd,
	0xeb, 0xf9, 0xa3, 0xd9, 0xf9, 0x68, 0x59, 0xb8, 0x30, 0xb1, 0xd5, 0xfc, 0x59, 0xad, 0x04, 0xc6,
	0xd4, 0xad, 0x86, 0x29, 0x5b, 0x8d, 0x29, 0x6b, 0xee, 0x6f, 0xd4, 0x67, 0x61, 0x66, 0x5b, 0x31,
	0xd2, 0x6c, 0x2b, 0x46, 0x0a, 0x58, 0x8f, 0x7e, 0x73, 0x3e, 0xac, 0x97, 0xc3, 0xe4, 0x1c, 0x08,
	0x98, 0xd9, 0xa6, 0xef, 0xd6, 0x67, 0xe7, 0x40, 0xe0, 0xc4, 0x56, 0xc3, 0x81, 0xd9, 0x56, 0x23,
	0x90, 0x1d, 0x93, 0x7e, 0xeb, 0xd9, 0x90, 0x1d, 0xd3, 0xd8, 0x24, 0x4d, 0xe5, 0xe4, 0x20, 0x4f,
	0x4e, 0x95, 0xec, 0xe4, 0x64, 0x3c, 0x51, 0x05, 0xec, 0x59, 0x01, 0xbd, 0x43, 0x96, 0x27, 0x81,
	0x9f, 0x3a, 0xbe, 0x47, 0xab, 0xcf, 0x72, 0x14, 0xe4, 0x34, 0xbd, 0x45, 0xea, 0x49, 0xea, 0xa6,
	0x93, 0x84, 0xc2, 0x0e, 0x55, 0xdb, 0xab, 0x6e, 0x54, 0xfa, 0x82, 0x62, 0xbc, 0x57, 0xc1, 0x31,
	0x3b, 0xb9, 0x51, 0x71, 0x9a, 0xc8, 0x31, 0xe3, 0x34, 0xd1, 0x5f, 0x21, 0x64, 0xec, 0x26, 0x29,
	0x8b, 0x1d, 0x60, 0xe0, 0x79, 0xb2, 0x81, 0x94, 0x7e, 0x9a, 0xe8, 0x9f, 0x25, 0xeb, 0x31, 0x4b,
	0x58, 0xe0, 0x39, 0xa9, 0x3f, 0x66, 0xe1, 0x24, 0x15, 0x27, 0xcc, 0x35, 0xa4, 0x3e, 0x42, 0x22,
	0x68, 0x11, 0x62, 0xc1, 0x64, 0x4c, 0x97, 0x50, 0x0b, 0x52, 0x8e, 0x26, 0x63, 0xfd, 0x35, 0xd2,
	0x8c, 0x59, 0x14, 0xc6, 0xa9, 0x33, 0x76, 0xe3, 0x33, 0x5a, 0xcb, 0xec, 0x24, 0x48, 0x7e, 0xdb,
	0x8d, 0xcf, 0x40, 0xc7, 0x19, 0x63, 0x91, 0xe3, 0x8e, 0xfc, 0x73, 0x26, 0xce, 0xa9, 0x0d, 0xa0,
	0xec, 0x02, 0xc1, 0xf8, 0xd3, 0xc2, 0xab, 0xd8, 0xfa, 0x8b, 0x64, 0x79, 0xec, 0xfa, 0x81, 0xe3,
	0x47, 0xfc, 0x75, 0x1a, 0xfd, 0x3a, 0x3c, 0xde, 0x8b, 0xf4, 0x97, 0x49, 0x83, 0x33, 0x40, 0xb1,
	0x78, 0xa1, 0x15, 0x20, 0x3c, 0x08, 0xe3, 0x14, 0x98, 0xc7, 0xee, 0xe0, 0x6c, 0x12, 0x01, 0x4e,
	0xe3, 0xb8, 0x15, 0x24, 0xdc, 0x8b, 0xf4, 0x4d, 0xd2, 0x14, 0x4c, 0x8e, 0xc5, 0xd7, 0x20, 0x48,
	0xe2, 0x68, 0x98, 0xb2, 0x28, 0x10, 0x87, 0x6a, 0xf8, 0x09, 0xe7, 0xdc, 0x49, 0xc2, 0x62, 0x6e,
	0x6e, 0xa3, 0xcf, 0x7f, 0x83, 0x54, 0x74, 0xe1, 0xf1, 0x73, 0x75, 0xa3, 0x0f, 0x3f, 0x0d, 0xa6,
	0x9a, 0xde, 0xd3, 0xdf, 0x20, 0x1b, 0xec, 0x9c, 0x05, 0x69, 0xe2, 0xb8, 0xe7, 0xae, 0x3f, 0x72,
	0x8f, 0x47, 0x8c, 0x9f, 0xfd, 0xd1, 0x27, 0xd7, 0x90, 0xb7, 0x2b, 0x59, 0xfa, 0xeb, 0x64, 0x4d,
	0x88, 0xa3, 0xb7, 0x78, 0x70, 0xa0, 0xec, 0x2a, 0x32, 0xfa, 0x9c, 0x6e, 0x44, 0x64, 0x55, 0x2d,
	0xa1, 0x74, 0x93, 0xe8, 0xc9, 0x85, 0x9f, 0x0e, 0x4e, 0xfd, 0xa0, 0x74, 0xa4, 0xeb, 0x92, 0x9b,
	0x8f, 0xf5, 0x06, 0xd9, 0xc8, 0x20, 0xa7, 0x61, 0x14, 0xf9, 0xc1, 0x89, 0x32, 0xdc, 0x35, 0xc9,
	0x7b, 0x13, 0x59, 0xc6, 0xaf, 0x54, 0x0a, 0x43, 0x9a, 0xfa, 0xa7, 0x49, 0x63, 0x14, 0x06, 0x27,
	0x7e, 0x3a, 0xf1, 0x18, 0x9f, 0x97, 0x4a, 0x3f, 0x27, 0xe8, 0x2d, 0xb2, 0x32, 0x72, 0x53, 0x64,
	0x56, 0x39, 0x33, 0x7b, 0x86, 0x48, 0xcb, 0x04, 0x31, 0x4c, 0x44, 0xa4, 0x65, 0x54, 0x1e, 0x25,
	0xaf, 0x91, 0x35, 0x09, 0x41, 0x29, 0x9c, 0xa5, 0x55, 0x49, 0x04, 0x21, 0xe3, 0x3b, 0x5a, 0x66,
	0x16, 0x2f, 0xec, 0x74, 0x8b, 0x90, 0x38, 0x71, 0x12, 0x6c, 0xf9, 0x88, 0x06, 0xc3, 0xf3, 0xd9,
	0xe2, 0xca, 0xbb, 0x41, 0xfd, 0x46, 0x9c, 0xc8, 0xc6, 0xd0, 0x8b, 0x64, 0x39, 0x4e, 0x9c, 0xf4,
	0x32, 0x62, 0x22, 0x8a, 0xea, 0x71, 0xf2, 0xe8, 0x32, 0x62, 0xa2, 0x8f, 0xa1, 0xc9, 0x3e, 0x86,
	0x10, 0x54, 0x42, 0xa6, 0x1e, 0x27, 0x32, 0x5c, 0xce, 0x59, 0xcc, 0xc3, 0xa5, 0xd6, 0x87, 0x9f,
	0x20, 0x3a, 0x0a, 0xc3, 0xc8, 0x09, 0x42, 0x11, 0xe0, 0x75, 0x78, 0x3c, 0x0a, 0xf5, 0x4f, 0x91,
	0x7a, 0x30, 0x19, 0x1f, 0xb3, 0x58, 0xb4, 0x63, 0xc4, 0x93, 0x7e, 0x83, 0xd4, 0xa2, 0x53, 0x37,
	0x61, 0xa2, 0x27, 0x83, 0x0f, 0x59, 0x77, 0xa5, 0xa1, 0x74, 0x57, 0xf6, 0x48, 0x93, 0x8d, 0x26,
	0xd9, 0x3b, 0x62, 0x2b, 0xe4, 0xd5, 0xd2, 0x3a, 0x77, 0xeb, 0xee, 0x68, 0x92, 0xbd, 0x31, 0x61,
	0xa3, 0x89, 0xf8, 0xdd, 0xfa, 0x59, 0xd2, 0x54, 0x58, 0xb0, 0x22, 0x59, 0x00, 0x61, 0xe1, 0x84,
	0xc3, 0xa1, 0x48, 0x1a, 0x0d, 0xa4, 0xdc, 0x1f, 0x0e, 0xf5, 0x57, 0xc9, 0x2a, 0xc6, 0x43, 0x38,
	0x49, 0xe1, 0x8d, 0xd0, 0x4b, 0xcd, 0x8c, 0x76, 0x14, 0x82, 0xf9, 0x31, 0x4b, 0xe3, 0x4b, 0xe1,
	0x2d, 0x7c, 0x00, 0xaa, 0xc7, 0x46, 0xee, 0xa5, 0x70, 0x17, 0x3e, 0x18, 0x7f, 0x57, 0x29, 0x4c,
	0x5a, 0x57, 0x7f, 0x89, 0xac, 0x78, 0xa9, 0x93, 0xa4, 0x6e, 0x9c, 0x8a, 0x25, 0xbe, 0xec, 0xa5,
	0x0f, 0xe1, 0x11, 0xfc, 0xe8, 0xa5, 0x8e, 0xe7, 0x5e, 0xca, 0x94, 0x55, 0xf7, 0xd2, 0x03, 0xf7,
	0x12, 0xf2, 0x55, 0xd1, 0xa6, 0x3c, 0x25, 0x16, 0xec, 0xfa, 0x32, 0x69, 0x40, 0x3e, 0x73, 0x92,
	0x51, 0x08, 0x93, 0x06, 0xb9, 0x76, 0xb3, 0xb4, 0xb0, 0xdf, 0x82, 0x0c, 0xe7, 0x3c, 0x1c, 0x85,
	0x69, 0x7f, 0x05, 0x10, 0xf0, 0xab, 0xf5, 0xe3, 0xa4, 0x91, 0x91, 0xc1, 0x14, 0xae, 0x2a, 0x94,
	0xa9, 0xbc, 0x0e, 0x8f, 0xf7, 0x03, 0x30, 0x1f, 0x19, 0xc3, 0xa1, 0x30, 0x92, 0x0b, 0xde, 0x1f,
	0x0e, 0x8d, 0x2f, 0xa9, 0xab, 0xa6, 0x63, 0xea, 0x9f, 0x27, 0xd7, 0x72, 0xab, 0x21, 0x22, 0x12,
	0x65, 0x95, 0xae, 0x67, 0xac, 0xb7, 0x80, 0x63, 0xfc, 0x43, 0xb5, 0x80, 0xb6, 0xf4, 0x2f, 0x92,
	0xe7, 0xcf, 0xc3, 0x51, 0xea, 0x9e, 0x30, 0x27, 0x8d, 0xdd, 0x20, 0x19, 0x86, 0xf1, 0x98, 0xc5,
	0xc2, 0x1a, 0x5d, 0xb0, 0x1e, 0xe5, 0x1c, 0xbd, 0x4d, 0x6e, 0xb0, 0x80, 0xc5, 0x27, 0x97, 0x8e,
	0x5b, 0x40, 0xa0, 0x95, 0x3a, 0xf2, 0x76, 0xcb, 0x11, 0xc7, 0x05, 0x84, 0xa6, 0x22, 0xf6, 0xca,
	0x11, 0x83, 0x02, 0x62, 0x49, 0x45, 0xec, 0xab, 0x88, 0x23, 0x72, 0x6d, 0x30, 0x89, 0x63, 0x16,
	0xa4, 0x59, 0x10, 0xd7, 0xf8, 0xcc, 0x7c, 0xb6, 0xf4, 0xf8, 0xb3, 0xb5, 0x2f, 0x84, 0x65, 0x20,
	0xaf, 0x0b, 0xb4, 0x0c, 0xe6, 0x7b, 0xe4, 0xda, 0x94, 0x88, 0x7e, 0x8b, 0x34, 0x67, 0x3d, 0xa4,
	0x92, 0xf2, 0xf5, 0x56, 0x55, 0xd6, 0x9b, 0xf1, 0x73, 0x4b, 0x05, 0x97, 0x6f, 0x43, 0xfc, 0x5c,
	0x30, 0x76, 0x06, 0x11, 0x68, 0x8a, 0xb6, 0xed, 0x66, 0xe9, 0x51, 0x4b, 0x8d, 0x1f, 0x40, 0x1c,
	0xb8, 0x97, 0xa6, 0x8a, 0xb6, 0xc4, 0x4e, 0xff, 0xcc, 0x68, 0x4b, 0x45, 0xdb, 0x54, 0xbb, 0x1a,
	0xda, 0x56, 0xd1, 0x9d, 0x79, 0x91, 0x3f, 0x0f, 0xdd, 0x51, 0xd1, 0x5d, 0x31, 0x3b, 0xcf, 0x8c,
	0xee, 0xaa, 0xe8, 0x6d, 0x5a, 0xbf, 0x1a, 0xba, 0xe0, 0xf3, 0x1d, 0xba, 0x7c, 0x35, 0xf4, 0xce,
	0x7f, 0x7d, 0xcd, 0x7e, 0xb5, 0x10, 0x02, 0x3d, 0xa8, 0x24, 0xc2, 0xe1, 0x30, 0x61, 0x69, 0xae,
	0x65, 0x05, 0x09, 0xf7, 0x03, 0xc8, 0x9c, 0x92, 0x99, 0x69, 0x12, 0xe2, 0xa0, 0xcb, 0x54, 0x75,
	0x75, 0xdb, 0x90, 0x49, 0x45, 0x7d, 0x04, 0xa3, 0x65, 0x81, 0x89, 0x34, 0x30, 0x3b, 0x36, 0xfe,
	0x42, 0x2b, 0x60, 0x4c, 0x7d, 0x2b, 0x5f, 0xf5, 0xa3, 0xf0, 0x82, 0xc5, 0xce, 0xc8, 0x1f, 0xfb,
	0xa9, 0xd8, 0x73, 0xaf, 0x0b, 0xd6, 0x5b, 0xc0, 0x79, 0x0b, 0x18, 0xaa, 0xfc, 0x24, 0x8a, 0x32,
	0xf9, 0x6a, 0x41, 0xfe, 0x31, 0x70, 0x50, 0xbe, 0x64, 0x39, 0x6a, 0x73, 0x97, 0x63, 0xd7, 0x5c,
	0xb8, 0x1c, 0x7f, 0x7a, 0x76, 0x39, 0xde, 0x25, 0xab, 0x7c, 0x37, 0xcc, 0xf7, 0x65, 0xd0, 0x6f,
	0x94, 0xeb, 0x87, 0xe4, 0x97, 0x29, 0x6f, 0x02, 0x4e, 0x6a, 0xfe, 0x83, 0x0a, 0x59, 0x55, 0xb9,
	0xe0, 0x7d, 0xcc, 0xee, 0xd9, 0xd6, 0x51, 0xeb, 0xf3, 0x7c, 0x8f, 0x9b, 0x87, 0x9c, 0x64, 0x16,
	0x78, 0xea, 0x24, 0xdf, 0x0d, 0x3c, 0x70, 0x92, 0x7c, 0x69, 0xd5, 0xa9, 0x1a, 0x3a, 0x49, 0xb0,
	0x8a, 0x4e, 0x95, 0xf2, 0xaa, 0x53, 0x97, 0x0a, 0xf2, 0xb9, 0x53, 0x8d, 0x3f, 0x2f, 0xe4, 0xee,
	0xae, 0xa5, 0xbf, 0x49, 0xd6, 0x46, 0xcc, 0x3d, 0xe3, 0xb3, 0x28, 0xe6, 0x0f, 0x7c, 0xf0, 0x5a,
	0x69, 0x3f, 0x63, 0xeb, 0x2d, 0x21, 0xca, 0x95, 0xf5, 0x57, 0x05, 0x92, 0x3f, 0xb5, 0x3e, 0xaa,
	0x90, 0xb5, 0x02, 0x1f, 0xca, 0x59, 0xee, 0x5e, 0xdc, 0xb1, 0x85, 0x1f, 0x08, 0x90, 0xee, 0x72,
	0x0a, 0x96, 0x5c, 0xe0, 0x7f, 0xb9, 0xc1, 0x08, 0x77, 0xac, 0x71, 0xef, 0x4a, 0x22, 0x44, 0xe7,
	0x88, 0x9d, 0xb3, 0x91, 0xa9, 0x78, 0xa3, 0xd6, 0x6f, 0x22, 0x0d, 0x87, 0x92, 0x22, 0x96, 0xe2,
	0x00, 0x29, 0x62, 0x15, 0x45, 0x6c, 0x21, 0x52, 0x53, 0x44, 0xec, 0xa2, 0x48, 0x47, 0x88, 0xd4,
	0x15, 0x91, 0x0e, 0x3a, 0xf0, 0x41, 0xc1, 0x7f, 0x36, 0x2f, 0x07, 0x27, 0x4f, 0x9d, 0xf4, 0x34,
	0x66, 0xc9, 0x69, 0x38, 0xf2, 0xc4, 0x5b, 0xae, 0x8e, 0x26, 0x4f, 0x1f, 0x49, 0x1a, 0x2c, 0x55,
	0x3e, 0xe1, 0xa9, 0x3f, 0x38, 0x93, 0x27, 0x02, 0x20, 0x3c, 0xf2, 0x07, 0x67, 0x46, 0xbf, 0xa0,
	0x71, 0x87, 0xaf, 0xc5, 0x49, 0xc0, 0xe5, 0x79, 0x7d, 0x29, 0xd7, 0x22, 0xd2, 0x78, 0x0d, 0xba,
	0x09, 0x45, 0x6e, 0x18, 0x21, 0x3f, 0xaf, 0x8e, 0x57, 0x80, 0xc8, 0xeb, 0xcf, 0xc2, 0xfe, 0xbe,
	0xdd, 0xcd, 0xf7, 0x77, 0x3f, 0x70, 0xce, 0xd9, 0x20, 0x0d, 0xe3, 0xd9, 0xfd, 0xdd, 0x0f, 0xde,
	0xe1, 0x1c, 0x63, 0xb7, 0x00, 0xde, 0x2e, 0x54, 0xf1, 0xea, 0x4c, 0xcd, 0x54, 0xf1, 0xd9, 0x8c,
	0x19, 0x3f, 0x56, 0x50, 0xb1, 0x93, 0x57, 0xf5, 0x50, 0x5f, 0xcc, 0x18, 0x90, 0xd7, 0x1e, 0xc2,
	0x82, 0x9f, 0x2f, 0x6c, 0x77, 0xdb, 0x77, 0xf4, 0x2f, 0x92, 0x1b, 0xca, 0x72, 0x70, 0xdc, 0x62,
	0x48, 0x5d, 0x1f, 0x65, 0x0b, 0x62, 0x57, 0x44, 0xd6, 0x14, 0xe0, 0x58, 0x02, 0xaa, 0xd3, 0x80,
	0xbd, 0x72, 0xc0, 0x40, 0x02, 0xb4, 0x69, 0xc0, 0x7e, 0x0e, 0x50, 0x56, 0x5c, 0x6e, 0x12, 0x46,
	0xde, 0xf5, 0x49, 0xb6, 0xe6, 0x76, 0xcb, 0x01, 0x99, 0x49, 0xb5, 0x69, 0xc0, 0x5e, 0x39, 0x20,
	0x33, 0xa9, 0x3e, 0x0d, 0x90, 0x26, 0x19, 0x64, 0xad, 0xe0, 0x25, 0x51, 0xca, 0x37, 0x15, 0xf7,
	0x4c, 0xcb, 0x1c, 0x8b, 0xba, 0x5e, 0x91, 0xd9, 0x9b, 0x96, 0x19, 0x88, 0xaf, 0xaf, 0x8a, 0xcc,
	0x3e, 0xc8, 0x14, 0x5e, 0x5f, 0x7c, 0x8f, 0x6d, 0x2a, 0xef, 0x3d, 0x2d, 0x73, 0xcc, 0x3f, 0x74,
	0x16, 0x64, 0xf6, 0xa6, 0x65, 0x06, 0xfc, 0xb3, 0x66, 0x41, 0x66, 0xdf, 0xf8, 0x40, 0x9c, 0xbc,
	0xc5, 0xf7, 0x11, 0xfd, 0xab, 0x24, 0x2f, 0x49, 0x9d, 0x41, 0x1a, 0x8f, 0x4a, 0x93, 0x96, 0x90,
	0xde, 0xca, 0xa2, 0xd2, 0xd9, 0x4f, 0xe3, 0x51, 0x7f, 0x2d, 0x83, 0xc2, 0x63, 0xeb, 0x6b, 0x64,
	0xbd, 0x28, 0x30, 0x73, 0xaa, 0xa8, 0xcc, 0x9e, 0x2a, 0x0a, 0x22, 0xde, 0xec, 0xc1, 0xe3, 0x20,
	0x84, 0xd4, 0x96, 0x8b, 0xc0, 0xc2, 0xe5, 0x91, 0xa4, 0x29, 0xc3, 0xc3, 0xb6, 0x6a, 0x6c, 0xa9,
	0x6f, 0xd6, 0x2b, 0x2e, 0xec, 0x4a, 0xc9, 0xc2, 0xfe, 0x3c, 0x2e, 0x0c, 0xf9, 0xe9, 0x26, 0xcb,
	0x2c, 0x93, 0xc0, 0xc7, 0x2b, 0x04, 0x1a, 0x66, 0x96, 0xc7, 0x81, 0xff, 0xd4, 0xb8, 0xad, 0x0a,
	0x77, 0x77, 0x74, 0x4a, 0x96, 0x3d, 0x3f, 0x19, 0xfb, 0x89, 0x6c, 0xc0, 0xc8, 0x47, 0xe3, 0x17,
	0x35, 0xb4, 0x43, 0x7c, 0xd9, 0x01, 0xc9, 0x41, 0x38, 0x8e, 0xdc, 0xe0, 0x52, 0x1e, 0x7c, 0xc4,
	0x23, 0x6c, 0x6d, 0x1e, 0x3b, 0xf7, 0x07, 0x8c, 0x37, 0x5a, 0xaa, 0x9c, 0xd9, 0x40, 0xca, 0xd1,
	0x64, 0xcc, 0x3d, 0x13, 0x0e, 0xd3, 0x0b, 0x37, 0x66, 0xce, 0xb9, 0xa8, 0xcf, 0x1b, 0xfd, 0xa6,
	0xa4, 0xbd, 0xc3, 0x62, 0xc8, 0x98, 0x99, 0x88, 0xe7, 0xa6, 0x72, 0xc5, 0x64, 0xb8, 0x03, 0x37,
	0x65, 0xb0, 0x75, 0x88, 0x61, 0xfc, 0x60, 0x18, 0x8a, 0x86, 0x87, 0x18, 0xf9, 0x5e, 0x30, 0xe4,
	0x53, 0x70, 0xea, 0xc6, 0x5e, 0x36, 0x10, 0xf6, 0x3f, 0x9a, 0x92, 0x26, 0x06, 0xca, 0x44, 0xf8,
	0x40, 0xb8, 0x1c, 0x32, 0x1c, 0x1f, 0xe8, 0x33, 0x64, 0x3d, 0x66, 0xe3, 0x30, 0x65, 0xce, 0x20,
	0x1c, 0x73, 0x4d, 0x2b, 0x5c, 0xd3, 0x2a, 0x52, 0xf7, 0xc3, 0x31, 0xa8, 0xfa, 0x11, 0x72, 0x4d,
	0x91, 0xe2, 0xca, 0x1a, 0xb2, 0x0d, 0x25, 0xc4, 0xb8, 0x36, 0xbe, 0x72, 0x06, 0xee, 0x28, 0x53,
	0x46, 0xd0, 0x2c, 0x4e, 0x14, 0xba, 0x3e, 0x03, 0x9b, 0x9e, 0x94, 0xe1, 0xaa, 0x9a, 0x62, 0xcb,
	0x10, 0x42, 0xa0, 0xc9, 0xf8, 0x6e, 0x15, 0x67, 0x44, 0x74, 0xe7, 0x61, 0xa2, 0xbd, 0x54, 0xf6,
	0x5f, 0xc4, 0x44, 0x7b, 0x29, 0xf6, 0x5d, 0xf4, 0x2f, 0x89, 0xb0, 0xf1, 0xdc, 0xd4, 0x15, 0xf5,
	0xfc, 0xcd, 0xb2, 0x1e, 0x3f, 0xd6, 0x30, 0x07, 0x6e, 0xea, 0x62, 0x48, 0xc1, 0xaf, 0xd6, 0xdf,
	0x54, 0x48, 0x23, 0xa3, 0xc3, 0xcc, 0x8b, 0x52, 0x4c, 0x54, 0x72, 0xf2, 0x91, 0xc7, 0x04, 0xd6,
	0x13, 0xa2, 0x66, 0x93, 0x8f, 0x30, 0x17, 0xee, 0x20, 0xf5, 0xcf, 0x99, 0x13, 0x41, 0x86, 0x10,
	0xd5, 0x4a, 0x13, 0x69, 0x0f, 0x80, 0x84, 0x6d, 0xbc, 0x82, 0x10, 0x96, 0x28, 0x6b, 0x92, 0x8a,
	0x62, 0xaf, 0x92, 0x55, 0xce, 0x75, 0x86, 0x2e, 0xdf, 0x23, 0x6a, 0xa8, 0x89, 0xd3, 0x0e, 0x39,
	0x09, 0x1c, 0x01, 0x1b, 0xee, 0xb9, 0x3b, 0x9a, 0x60, 0x2a, 0x84, 0xe5, 0x31, 0x79, 0xfa, 0x0e,
	0x3c, 0xc3, 0xe9, 0x29, 0x4c, 0x4f, 0x45, 0x13, 0xa3, 0xd2, 0xc7, 0x07, 0xe3, 0x73, 0x99, 0x2b,
	0xdb, 0xce, 0xa1, 0xf5, 0xc9, 0x6b, 0xe6, 0xef, 0xab, 0xaa, 0xb0, 0xad, 0x7f, 0x85, 0x10, 0x7e,
	0x04, 0x43, 0xdf, 0x96, 0x9d, 0xb4, 0x84, 0xe4, 0xd6, 0x03, 0x2e, 0xc6, 0x9d, 0xdb, 0xe0, 0x10,
	0xee, 0xcf, 0x4f, 0x93, 0xc6, 0x30, 0x66, 0x4f, 0x26, 0x2c, 0x18, 0x5c, 0x0a, 0xbf, 0xe5, 0x84,
	0xd6, 0xc7, 0x15, 0x42, 0x72, 0xdc, 0xff, 0x7d, 0xe7, 0xbf, 0x46, 0xd6, 0x84, 0x1e, 0x3c, 0x3f,
	0x8b, 0x09, 0x10, 0x16, 0xdc, 0xe5, 0x34, 0xfd, 0x75, 0x58, 0x2c, 0x45, 0x31, 0x9c, 0x8e, 0xcc,
	0x0a, 0x14, 0x34, 0x2c, 0xd5, 0xd5, 0x1d, 0x50, 0x2e, 0xba, 0x3d, 0x4a, 0x98, 0xd7, 0xfa, 0xab,
	0x48, 0x14, 0x2d, 0xc6, 0x2f, 0xab, 0x98, 0xed, 0x62, 0x61, 0x21, 0xba, 0xd0, 0x65, 0x85, 0xc5,
	0x43, 0x6c, 0x47, 0x9b, 0x2a, 0x7a, 0x47, 0x5e, 0x49, 0xaa, 0xcc, 0x5c, 0x49, 0xaa, 0x66, 0x57,
	0x92, 0x8c, 0x5f, 0xad, 0xa8, 0x98, 0x9e, 0xbe, 0x2b, 0x8a, 0x5a, 0x65, 0xb0, 0xa6, 0x75, 0xab,
	0xec, 0x3b, 0x90, 0x38, 0x31, 0x70, 0x39, 0x2c, 0x7b, 0xf1, 0x77, 0x6b, 0x9f, 0x34, 0x15, 0x96,
	0xfe, 0x02, 0xa9, 0x27, 0xb0, 0xd3, 0x5c, 0x08, 0x43, 0x6a, 0x49, 0x7a, 0x14, 0x5e, 0x40, 0xa6,
	0x4d, 0x52, 0x67, 0x70, 0xea, 0x06, 0x27, 0x4c, 0x9e, 0x13, 0x1a, 0x49, 0xba, 0x8f, 0x04, 0xe3,
	0x04, 0x93, 0xbb, 0xfc, 0x76, 0xa4, 0x76, 0xf6, 0x2a, 0x85, 0xce, 0xde, 0x2b, 0x84, 0x8f, 0xed,
	0xa8, 0x6d, 0x05, 0x9e, 0x2e, 0x78, 0xe0, 0xc1, 0x96, 0x23, 0x9a, 0xbb, 0x9e, 0xda, 0xad, 0x5a,
	0x41, 0xe2, 0x41, 0x28, 0x6b, 0x49, 0xf9, 0xa9, 0x09, 0x6a, 0x49, 0x79, 0x62, 0x90, 0x21, 0x09,
	0x4e, 0xa8, 0x60, 0x2d, 0x29, 0x58, 0xe2, 0xa4, 0x65, 0xec, 0xa9, 0x60, 0xab, 0x0d, 0xfe, 0x1d,
	0x4d, 0x9e, 0x8a, 0xe8, 0x86, 0x9f, 0xbc, 0x25, 0xc2, 0xc6, 0x11, 0x8b, 0xdd, 0x74, 0x12, 0xcb,
	0xae, 0xac, 0x4a, 0x32, 0x7e, 0xb9, 0x52, 0x50, 0xd2, 0xd5, 0xbf, 0x40, 0x64, 0x53, 0xc9, 0x09,
	0xcf, 0xa1, 0x74, 0xe0, 0x31, 0x8d, 0x6f, 0xbd, 0x21, 0x38, 0xf7, 0xcf, 0x59, 0xcc, 0xcf, 0x49,
	0x33, 0xd2, 0xbc, 0xb2, 0x10, 0x7e, 0x50, 0xa5, 0xf9, 0x29, 0x49, 0x7f, 0x3d, 0x3f, 0x0f, 0x1d,
	0xc7, 0xcc, 0x3d, 0x53, 0x5c, 0x22, 0x8f, 0x3b, 0x7b, 0x40, 0x37, 0xde, 0x15, 0x5b, 0xa6, 0xf8,
	0x1e, 0x36, 0xd3, 0x2c, 0xd4, 0xf2, 0x66, 0xe1, 0xab, 0x64, 0x15, 0xb2, 0x87, 0xe3, 0xb1, 0x20,
	0xf1, 0xd3, 0x4b, 0x59, 0x2e, 0x00, 0xed, 0x00, 0x49, 0x1c, 0x0d, 0x22, 0xb0, 0xa9, 0x6a, 0x62,
	0x6f, 0x76, 0x53, 0x17, 0xb6, 0xd4, 0x97, 0xf3, 0x89, 0x5d, 0xca, 0xbf, 0xaf, 0x88, 0xc9, 0x2d,
	0x64, 0xfe, 0x5a, 0x49, 0xe6, 0xf7, 0x7e, 0xa8, 0x33, 0xff, 0x0f, 0xf2, 0x49, 0xe2, 0xa9, 0xff,
	0x7f, 0x6c, 0x92, 0x5e, 0x54, 0x27, 0x49, 0x5d, 0x7d, 0xbb, 0x64, 0x15, 0xf7, 0x0f, 0x57, 0x9d,
	0xa3, 0xcd, 0xb2, 0x6f, 0xa3, 0xea, 0x0e, 0x82, 0x9b, 0xce, 0x2e, 0x9f, 0x98, 0x4c, 0xc5, 0x31,
	0xaa, 0xa8, 0x5f, 0x45, 0xc5, 0x5e, 0x51, 0xc5, 0x00, 0x55, 0x2c, 0x5f, 0x45, 0xc5, 0x3e, 0x0f,
	0x96, 0x3f, 0xfa, 0xff, 0xb5, 0x55, 0x19, 0x7f, 0x5c, 0x51, 0xd7, 0xa7, 0xfd, 0xbf, 0xb4, 0x3e,
	0x4b, 0x92, 0x65, 0x6d, 0x6e, 0xb2, 0xfc, 0xde, 0x2a, 0x9a, 0x2c, 0xbe, 0x5e, 0xf3, 0x1b, 0xb4,
	0xe3, 0xec, 0x3e, 0xef, 0x58, 0xdc, 0xef, 0xad, 0x66, 0xf7, 0x7b, 0x5f, 0x20, 0x75, 0x36, 0xe0,
	0x1b, 0x87, 0xf8, 0xba, 0xc1, 0x06, 0xb0, 0x71, 0xec, 0x92, 0xa6, 0xcc, 0xe8, 0x30, 0xd7, 0x4b,
	0x25, 0x3b, 0x94, 0x18, 0x61, 0xeb, 0x2e, 0xca, 0xe1, 0x64, 0x8b, 0x8c, 0x0f, 0x93, 0xfd, 0x27,
	0xcb, 0xa4, 0xa9, 0xf0, 0xe0, 0xf5, 0x39, 0xd7, 0xf1, 0x65, 0x83, 0x63, 0x99, 0x3f, 0xdf, 0xf3,
	0xf8, 0x37, 0x1a, 0xce, 0xe2, 0x87, 0x9c, 0x2a, 0xf7, 0x2c, 0xee, 0x28, 0x70, 0xc0, 0xd1, 0xbb,
	0xa4, 0xc6, 0xe2, 0x41, 0xbb, 0x23, 0xbe, 0x07, 0x6d, 0x96, 0x9b, 0x01, 0x12, 0x68, 0x05, 0x4a,
	0x4b, 0x58, 0x57, 0xdc, 0x8d, 0x9d, 0x0f, 0xeb, 0x2a, 0xb0, 0xae, 0x80, 0x99, 0xf2, 0x72, 0xec,
	0x5c, 0x98, 0x69, 0xe7, 0x30, 0xd3, 0x16, 0x30, 0xab, 0xcd, 0xef, 0x06, 0x7f, 0x02, 0xcc, 0x6a,
	0xe7, 0x30, 0x7e, 0x5d, 0x82, 0xff, 0x30, 0xe9, 0xfa, 0x15, 0x60, 0xa6, 0x84, 0x59, 0xf4, 0xda,
	0x02, 0x98, 0xa5, 0xc0, 0x2c, 0x09, 0xb3, 0xe9, 0xc6, 0x15, 0x60, 0xd9, 0xbb, 0x75, 0xe8, 0xf5,
	0x2b, 0xc0, 0xe4, 0x04, 0x58, 0x5d, 0xaa, 0x2f, 0x80, 0x29, 0x13, 0x60, 0xc9, 0x09, 0xb0, 0xb6,
	0xe9, 0xf3, 0x57, 0x80, 0x6d, 0x4b, 0xd8, 0x0e, 0xbd, 0x71, 0x05, 0xd8, 0x8e, 0x84, 0xdd, 0xa1,
	0x2f, 0x5c, 0x01, 0x76, 0x47, 0xc2, 0x7a, 0xf4, 0x53, 0x57, 0x80, 0xf5, 0x04, 0xcc, 0x6e, 0xd3,
	0x17, 0x9f, 0x1d, 0x66, 0xcb, 0x28, 0xb1, 0x4d, 0x4a, 0x9f, 0x3d, 0x26, 0x6d, 0x19, 0x25, 0xb6,
	0x45, 0x5f, 0xba, 0x02, 0xcc, 0x6a, 0x7d, 0x85, 0x90, 0x7c, 0x35, 0xf1, 0x53, 0xa3, 0x9f, 0x97,
	0xaa, 0xbc, 0xf1, 0xe8, 0xf9, 0xa2, 0xee, 0x7c, 0x9e, 0xd4, 0x3c, 0x3f, 0xff, 0x6e, 0xba, 0xe4,
	0xf9, 0x47, 0x61, 0xeb, 0x6b, 0x88, 0xc7, 0x57, 0xf8, 0x6f, 0xea, 0x85, 0xfc, 0x68, 0xa1, 0x48,
	0x0f, 0x27, 0xf1, 0x40, 0xf6, 0xd5, 0x94, 0x02, 0x9d, 0x93, 0x5b, 0x6f, 0xf0, 0xe1, 0xc5, 0x3b,
	0xe9, 0x9b, 0xd9, 0xb5, 0x0d, 0xfe, 0x15, 0x5c, 0x34, 0x90, 0xc5, 0x57, 0x89, 0xcb, 0x88, 0xb5,
	0x7e, 0xb3, 0xc2, 0xe5, 0xc5, 0x02, 0x5b, 0x28, 0xcf, 0x6b, 0x61, 0x91, 0x8e, 0xb3, 0xf7, 0x6e,
	0x08, 0xca, 0x51, 0xc8, 0x9b, 0xb9, 0xb2, 0x19, 0xce, 0xce, 0xd9, 0x48, 0x58, 0x99, 0xf5, 0xb9,
	0x81, 0x06, 0xc7, 0x9b, 0xe9, 0x94, 0x8e, 0x7b, 0xd4, 0x54, 0x3a, 0x6f, 0xed, 0xa3, 0x6d, 0xd6,
	0x33, 0xda, 0x56, 0xfa, 0xe5, 0xaf, 0x75, 0x88, 0x4a, 0xba, 0xcf, 0xa8, 0x44, 0xa9, 0x43, 0xaa,
	0x6a, 0x1d, 0x62, 0xbc, 0x8f, 0xe7, 0x5a, 0x79, 0xc5, 0xe9, 0x3f, 0x75, 0x21, 0x61, 0x83, 0x68,
	0x83, 0xb1, 0x27, 0x9a, 0x3e, 0xf0, 0x53, 0x3f, 0x24, 0x6b, 0x00, 0x71, 0xc6, 0xf1, 0xc4, 0xe9,
	0x99, 0xed, 0xb6, 0xc8, 0xf2, 0x46, 0xd9, 0xad, 0xaa, 0xad, 0x9f, 0x52, 0x25, 0xfb, 0x4d, 0x10,
	0x79, 0x3b, 0x9e, 0xc0, 0x43, 0xeb, 0x3b, 0x15, 0xb2, 0x56, 0x60, 0x67, 0x37, 0x0c, 0x2a, 0xca,
	0x0d, 0x83, 0x2f, 0x10, 0x7d, 0xcc, 0xf8, 0x4d, 0x21, 0xe6, 0x7a, 0x7e, 0x70, 0xa2, 0xde, 0x8d,
	0xd8, 0xe0, 0x9c, 0x3e, 0x32, 0xb8, 0x2b, 0x66, 0xa4, 0x79, 0xaf, 0x45, 0x9b, 0x95, 0xe6, 0x9d,
	0x1b, 0x71, 0x55, 0x62, 0x29, 0xbf, 0x2a, 0xb1, 0x49, 0x9a, 0x88, 0xc7, 0x82, 0x13, 0x4b, 0x0c,
	0xc2, 0x49, 0xbc, 0xe4, 0x34, 0xbe, 0x5d, 0x51, 0x5d, 0xda, 0x83, 0xed, 0x78, 0x98, 0x46, 0xf2,
	0x3e, 0x90, 0xd6, 0xaf, 0x0d, 0xd3, 0xe8, 0x5e, 0x04, 0x7b, 0x27, 0x90, 0x95, 0xdb, 0x40, 0xcb,
	0xc3, 0x14, 0xaf, 0xf3, 0x08, 0x16, 0xbf, 0xc0, 0x83, 0x9d, 0x32, 0x60, 0x3d, 0x4e, 0xf0, 0xa2,
	0x06, 0x47, 0x5d, 0x78, 0xdc, 0xa6, 0x46, 0x1f, 0x74, 0x3f, 0xb8, 0xf0, 0x24, 0xc3, 0xf3, 0x63,
	0xd1, 0x15, 0x03, 0xc6, 0x81, 0x1f, 0x4b, 0x65, 0x43, 0x5f, 0xb4, 0x88, 0x51, 0xd9, 0xa1, 0x3f,
	0x62, 0xc6, 0xf7, 0xf1, 0x04, 0x95, 0x5d, 0x1b, 0xd3, 0x6f, 0x93, 0x0d, 0xb5, 0x4d, 0xe7, 0xc8,
	0x0f, 0x17, 0x8d, 0xfe, 0xba, 0xd2, 0xaa, 0xbb, 0x3f, 0xf2, 0xf4, 0xcf, 0x91, 0xeb, 0x85, 0x6e,
	0x1d, 0x17, 0xad, 0x8a, 0xc5, 0xab, 0x74, 0xec, 0x40, 0x76, 0x5a, 0x6b, 0xc0, 0x2e, 0xc4, 0x6b,
	0xa9, 0x5a, 0x8f, 0xd8, 0xc5, 0xac, 0x56, 0x10, 0x5d, 0x9a, 0xd5, 0x0a, 0xb2, 0xaf, 0x10, 0xe2,
	0xa5, 0xce, 0x24, 0x3a, 0x89, 0x5d, 0x0f, 0xa7, 0x41, 0xeb, 0x37, 0xbc, 0xf4, 0x31, 0x12, 0x78,
	0x65, 0xc6, 0xce, 0x31, 0x14, 0xc4, 0x6b, 0x7b, 0xec, 0x1c, 0x22, 0x60, 0xaf, 0xf5, 0xde, 0x87,
	0x37, 0x2b, 0xef, 0x7f, 0x78, 0xb3, 0xf2, 0xb7, 0x1f, 0xde, 0xac, 0x7c, 0xfd, 0xa3, 0x9b, 0xcf,
	0xbd, 0xff, 0xd1, 0xcd, 0xe7, 0x3e, 0xf8, 0xe8, 0xe6, 0x73, 0x6f, 0x56, 0x8e, 0xeb, 0xfc, 0x3f,
	0x59, 0xf6, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x35, 0x5c, 0x37, 0xde, 0xa5, 0x35, 0x00, 0x00,
}

func (m *RS_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RS_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RS_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rc != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Rc))
		i--
		dAtA[i] = 0x18
	}
	if m.Bps != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Bps))
		i--
		dAtA[i] = 0x10
	}
	if m.Idx != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnitIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnitIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Fn))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sp != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Sp))
		i--
		dAtA[i] = 0x68
	}
	if m.Addr != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Fun != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Fun))
		i--
		dAtA[i] = 0x50
	}
	if m.Afn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x48
	}
	if m.Seq != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x40
	}
	if m.Ec2 != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ec2))
		i--
		dAtA[i] = 0x38
	}
	if m.Ec1 != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ec1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pw) > 0 {
		i -= len(m.Pw)
		copy(dAtA[i:], m.Pw)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Pw)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Tp != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Tp))
		i--
		dAtA[i] = 0x18
	}
	if m.Dir != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Dir))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UintID) > 0 {
		for iNdEx := len(m.UintID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UintID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgGBOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGBOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGBOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Afn10P0F41 != nil {
		{
			size, err := m.Afn10P0F41.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
		i--
		dAtA[i] = 0x9a
	}
	if m.Afn10P0F10 != nil {
		{
			size, err := m.Afn10P0F10.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
		i--
		dAtA[i] = 0x92
	}
	if m.Afn10P0F9 != nil {
		{
			size, err := m.Afn10P0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
		i--
		dAtA[i] = 0x8a
	}
	if m.Afn10P0F2 != nil {
		{
			size, err := m.Afn10P0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
		i--
		dAtA[i] = 0x82
	}
	if m.Afn0EP0F1 != nil {
		{
			size, err := m.Afn0EP0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2b
		i--
		dAtA[i] = 0xe2
	}
	if m.Afn0DPnF3 != nil {
		{
			size, err := m.Afn0DPnF3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn0DP0F2 != nil {
		{
			size, err := m.Afn0DP0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xca
	}
	if m.Afn0DPnF1 != nil {
		{
			size, err := m.Afn0DPnF1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn0CP0F20 != nil {
		{
			size, err := m.Afn0CP0F20.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xea
	}
	if m.Afn0CP0F19 != nil {
		{
			size, err := m.Afn0CP0F19.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xe2
	}
	if m.Afn0CP0F18 != nil {
		{
			size, err := m.Afn0CP0F18.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xda
	}
	if m.Afn0CP0F9 != nil {
		{
			size, err := m.Afn0CP0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn0CP0F7 != nil {
		{
			size, err := m.Afn0CP0F7.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xca
	}
	if m.Afn0CP0F6 != nil {
		{
			size, err := m.Afn0CP0F6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn0CP0F4 != nil {
		{
			size, err := m.Afn0CP0F4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xba
	}
	if m.Afn0CP0F3 != nil {
		{
			size, err := m.Afn0CP0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn0CP0F2 != nil {
		{
			size, err := m.Afn0CP0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xaa
	}
	if m.Afn0CPnF1 != nil {
		{
			size, err := m.Afn0CPnF1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xa2
	}
	if m.Afn0AP0F57 != nil {
		{
			size, err := m.Afn0AP0F57.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xba
	}
	if m.Afn0AP0F53 != nil {
		{
			size, err := m.Afn0AP0F53.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn0AP0F52 != nil {
		{
			size, err := m.Afn0AP0F52.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xaa
	}
	if m.Afn0AP0F51 != nil {
		{
			size, err := m.Afn0AP0F51.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xa2
	}
	if m.Afn0AP0F50 != nil {
		{
			size, err := m.Afn0AP0F50.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x9a
	}
	if m.Afn0AP0F49 != nil {
		{
			size, err := m.Afn0AP0F49.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x92
	}
	if m.Afn0AP0F46 != nil {
		{
			size, err := m.Afn0AP0F46.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x8a
	}
	if m.Afn0AP0F42 != nil {
		{
			size, err := m.Afn0AP0F42.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x82
	}
	if m.Afn0AP0F41 != nil {
		{
			size, err := m.Afn0AP0F41.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Afn0APnF15) > 0 {
		for iNdEx := len(m.Afn0APnF15) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Afn0APnF15[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x19
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.Afn0APnF14) > 0 {
		for iNdEx := len(m.Afn0APnF14) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Afn0APnF14[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x19
			i--
			dAtA[i] = 0xda
		}
	}
	if m.Afn0AP0F11 != nil {
		{
			size, err := m.Afn0AP0F11.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn0AP0F10 != nil {
		{
			size, err := m.Afn0AP0F10.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xba
	}
	if m.Afn0AP0F9 != nil {
		{
			size, err := m.Afn0AP0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn0AP0F3 != nil {
		{
			size, err := m.Afn0AP0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x8a
	}
	if m.Afn0AP0F1 != nil {
		{
			size, err := m.Afn0AP0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x82
	}
	if m.Afn09P0F1 != nil {
		{
			size, err := m.Afn09P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xe2
	}
	if m.Afn05P0F31 != nil {
		{
			size, err := m.Afn05P0F31.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn05P0F9 != nil {
		{
			size, err := m.Afn05P0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Afn05P0F1 != nil {
		{
			size, err := m.Afn05P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn04P0F57 != nil {
		{
			size, err := m.Afn04P0F57.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	if m.Afn04P0F53 != nil {
		{
			size, err := m.Afn04P0F53.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	if m.Afn04P0F52 != nil {
		{
			size, err := m.Afn04P0F52.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	if m.Afn04P0F51 != nil {
		{
			size, err := m.Afn04P0F51.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	if m.Afn04P0F50 != nil {
		{
			size, err := m.Afn04P0F50.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	if m.Afn04P0F49 != nil {
		{
			size, err := m.Afn04P0F49.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if m.Afn04P0F46 != nil {
		{
			size, err := m.Afn04P0F46.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	if m.Afn04P0F42 != nil {
		{
			size, err := m.Afn04P0F42.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if m.Afn04P0F41 != nil {
		{
			size, err := m.Afn04P0F41.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if len(m.Afn04PnF15) > 0 {
		for iNdEx := len(m.Afn04PnF15) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Afn04PnF15[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Afn04PnF14) > 0 {
		for iNdEx := len(m.Afn04PnF14) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Afn04PnF14[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Afn04P0F11 != nil {
		{
			size, err := m.Afn04P0F11.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn04P0F10 != nil {
		{
			size, err := m.Afn04P0F10.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.Afn04P0F9 != nil {
		{
			size, err := m.Afn04P0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn04P0F3 != nil {
		{
			size, err := m.Afn04P0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Afn04P0F1 != nil {
		{
			size, err := m.Afn04P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Afn00P0F3 != nil {
		{
			size, err := m.Afn00P0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Afn00P0F2 != nil {
		{
			size, err := m.Afn00P0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Afn00P0F1 != nil {
		{
			size, err := m.Afn00P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DataID != nil {
		{
			size, err := m.DataID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn00_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn00_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn00_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Afn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn00_P0_F3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn00_P0_F3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn00_P0_F3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA56 := make([]byte, len(m.Status)*10)
		var j55 int
		for _, num1 := range m.Status {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA56[:j55])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UnitId) > 0 {
		for iNdEx := len(m.UnitId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnitId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Afn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeepAlive != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.KeepAlive))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReportMark) > 0 {
		dAtA58 := make([]byte, len(m.ReportMark)*10)
		var j57 int
		for _, num1 := range m.ReportMark {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		i -= j57
		copy(dAtA[i:], dAtA58[:j57])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j57))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResendNum != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ResendNum))
		i--
		dAtA[i] = 0x20
	}
	if m.ResendTimeout != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ResendTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.MasterRts != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.MasterRts))
		i--
		dAtA[i] = 0x10
	}
	if m.Rts != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Rts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pwd) > 0 {
		i -= len(m.Pwd)
		copy(dAtA[i:], m.Pwd)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Pwd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Apn) > 0 {
		i -= len(m.Apn)
		copy(dAtA[i:], m.Apn)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Apn)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BackupPort != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.BackupPort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BackupIp) > 0 {
		i -= len(m.BackupIp)
		copy(dAtA[i:], m.BackupIp)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.BackupIp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MainPort != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.MainPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MainIp) > 0 {
		i -= len(m.MainIp)
		copy(dAtA[i:], m.MainIp)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.MainIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventsReport) > 0 {
		dAtA60 := make([]byte, len(m.EventsReport)*10)
		var j59 int
		for _, num1 := range m.EventsReport {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		i -= j59
		copy(dAtA[i:], dAtA60[:j59])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j59))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventsAvailable) > 0 {
		dAtA62 := make([]byte, len(m.EventsAvailable)*10)
		var j61 int
		for _, num1 := range m.EventsAvailable {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		i -= j61
		copy(dAtA[i:], dAtA62[:j61])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j61))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F10) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F10) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F10) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchinHopping) > 0 {
		dAtA64 := make([]byte, len(m.SwitchinHopping)*10)
		var j63 int
		for _, num1 := range m.SwitchinHopping {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		i -= j63
		copy(dAtA[i:], dAtA64[:j63])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j63))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SwitchinAvailable) > 0 {
		dAtA66 := make([]byte, len(m.SwitchinAvailable)*10)
		var j65 int
		for _, num1 := range m.SwitchinAvailable {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA66[j65] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j65++
			}
			dAtA66[j65] = uint8(num)
			j65++
		}
		i -= j65
		copy(dAtA[i:], dAtA66[:j65])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j65))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F11) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F11) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F11) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatitudeMark != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LatitudeMark))
		i--
		dAtA[i] = 0x20
	}
	if m.LongitudeMark != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LongitudeMark))
		i--
		dAtA[i] = 0x18
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x11
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_Pn_F14) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_Pn_F14) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_Pn_F14) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EluSetting != nil {
		{
			size, err := m.EluSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Addr != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x48
	}
	if m.Phase != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x40
	}
	if m.Number != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x38
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x30
	}
	if m.Ver != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ver))
		i--
		dAtA[i] = 0x28
	}
	if m.RsPort != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.RsPort))
		i--
		dAtA[i] = 0x20
	}
	if m.Sp != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Sp))
		i--
		dAtA[i] = 0x18
	}
	if m.RsType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.RsType))
		i--
		dAtA[i] = 0x10
	}
	if m.RsSetting != nil {
		{
			size, err := m.RsSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_Pn_F14_Elu_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_Pn_F14_Elu_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_Pn_F14_Elu_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delay != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x20
	}
	if m.Retry != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x18
	}
	if m.SwitchoutNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutNo))
		i--
		dAtA[i] = 0x10
	}
	if m.EnableOff != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EnableOff))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_Pn_F15) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_Pn_F15) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_Pn_F15) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeSlot) > 0 {
		for iNdEx := len(m.TimeSlot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeSlot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SwitchoutNo) > 0 {
		dAtA70 := make([]byte, len(m.SwitchoutNo)*10)
		var j69 int
		for _, num1 := range m.SwitchoutNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		i -= j69
		copy(dAtA[i:], dAtA70[:j69])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j69))
		i--
		dAtA[i] = 0x1a
	}
	if m.DtDays != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtDays))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DtStart) > 0 {
		i -= len(m.DtStart)
		copy(dAtA[i:], m.DtStart)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.DtStart)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_Pn_F15_Time_Slot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_Pn_F15_Time_Slot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_Pn_F15_Time_Slot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeOff != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeOff))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeOn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeOn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F41) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F41) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F41) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchoutLoops) > 0 {
		dAtA72 := make([]byte, len(m.SwitchoutLoops)*10)
		var j71 int
		for _, num1 := range m.SwitchoutLoops {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA72[j71] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j71++
			}
			dAtA72[j71] = uint8(num)
			j71++
		}
		i -= j71
		copy(dAtA[i:], dAtA72[:j71])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j71))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F42) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F42) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F42) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentSetting) > 0 {
		for iNdEx := len(m.CurrentSetting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentSetting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EnergyCTransformer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EnergyCTransformer))
		i--
		dAtA[i] = 0x20
	}
	if m.EnergyBTransformer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EnergyBTransformer))
		i--
		dAtA[i] = 0x18
	}
	if m.EnergyATransformer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EnergyATransformer))
		i--
		dAtA[i] = 0x10
	}
	if m.VoltageTransformer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.VoltageTransformer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F42_Current_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F42_Current_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F42_Current_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Phase != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x10
	}
	if m.Transformer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Transformer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F46) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F46) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F46) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WeekDay7) > 0 {
		for iNdEx := len(m.WeekDay7) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay7[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.WeekDay6) > 0 {
		for iNdEx := len(m.WeekDay6) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay6[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.WeekDay5) > 0 {
		for iNdEx := len(m.WeekDay5) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay5[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WeekDay4) > 0 {
		for iNdEx := len(m.WeekDay4) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay4[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.WeekDay3) > 0 {
		for iNdEx := len(m.WeekDay3) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay3[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WeekDay2) > 0 {
		for iNdEx := len(m.WeekDay2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WeekDay1) > 0 {
		for iNdEx := len(m.WeekDay1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekDay1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F46_Time_Slot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F46_Time_Slot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F46_Time_Slot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeOff != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeOff))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeOn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeOn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F49) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F49) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F49) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OffsetOff != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.OffsetOff))
		i--
		dAtA[i] = 0x10
	}
	if m.OffsetOn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.OffsetOn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F50) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F50) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F50) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportTimer != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ReportTimer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F51) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F51) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F51) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentSetting) > 0 {
		for iNdEx := len(m.CurrentSetting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentSetting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.VoltageUpperLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VoltageUpperLimit))))
		i--
		dAtA[i] = 0x11
	}
	if m.VoltageLowerLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VoltageLowerLimit))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F51_Current_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F51_Current_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F51_Current_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopSetting) > 0 {
		for iNdEx := len(m.LoopSetting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopSetting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F51_Loop_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F51_Loop_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F51_Loop_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentUpperLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentUpperLimit))))
		i--
		dAtA[i] = 0x21
	}
	if m.CurrentLowerLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentLowerLimit))))
		i--
		dAtA[i] = 0x19
	}
	if m.TimeEnd != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeEnd))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeStart != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F52) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F52) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F52) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeakageLimit) > 0 {
		for iNdEx := len(m.LeakageLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeakageLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F52_Leakage_Limit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F52_Leakage_Limit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F52_Leakage_Limit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level4Limit != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Level4Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Level3Limit != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Level3Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Level2Limit != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Level2Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Level1Limit != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Level1Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.LoopSwitchout != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopSwitchout))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopEnable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F53) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F53) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F53) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeTick != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeTick))
		i--
		dAtA[i] = 0x10
	}
	if m.LuxThreshold != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LuxThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F57) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F57) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F57) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopMark) > 0 {
		dAtA74 := make([]byte, len(m.LoopMark)*10)
		var j73 int
		for _, num1 := range m.LoopMark {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		i -= j73
		copy(dAtA[i:], dAtA74[:j73])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j73))
		i--
		dAtA[i] = 0x12
	}
	if m.RuntimeMark != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.RuntimeMark))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F65) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F65) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F65) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchinVector) > 0 {
		dAtA76 := make([]byte, len(m.SwitchinVector)*10)
		var j75 int
		for _, num1 := range m.SwitchinVector {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA76[j75] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j75++
			}
			dAtA76[j75] = uint8(num)
			j75++
		}
		i -= j75
		copy(dAtA[i:], dAtA76[:j75])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j75))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F66) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F66) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F66) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchinSwitchout) > 0 {
		dAtA78 := make([]byte, len(m.SwitchinSwitchout)*10)
		var j77 int
		for _, num1 := range m.SwitchinSwitchout {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA78[j77] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j77++
			}
			dAtA78[j77] = uint8(num)
			j77++
		}
		i -= j77
		copy(dAtA[i:], dAtA78[:j77])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j77))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F67) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F67) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F67) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchoutVector) > 0 {
		dAtA80 := make([]byte, len(m.SwitchoutVector)*10)
		var j79 int
		for _, num1 := range m.SwitchoutVector {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA80[:j79])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F68) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F68) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F68) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpperLimitC != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitC))
		i--
		dAtA[i] = 0x60
	}
	if m.UpperLimitB != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitB))
		i--
		dAtA[i] = 0x58
	}
	if m.UpperLimitA != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitA))
		i--
		dAtA[i] = 0x50
	}
	if m.LowerLimitC != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitC))
		i--
		dAtA[i] = 0x48
	}
	if m.LowerLimitB != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitB))
		i--
		dAtA[i] = 0x40
	}
	if m.LowerLimitA != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitA))
		i--
		dAtA[i] = 0x38
	}
	if m.UpperLimitCEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitCEnable))
		i--
		dAtA[i] = 0x30
	}
	if m.UpperLimitBEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitBEnable))
		i--
		dAtA[i] = 0x28
	}
	if m.UpperLimitAEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.UpperLimitAEnable))
		i--
		dAtA[i] = 0x20
	}
	if m.LowerLimitCEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitCEnable))
		i--
		dAtA[i] = 0x18
	}
	if m.LowerLimitBEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitBEnable))
		i--
		dAtA[i] = 0x10
	}
	if m.LowerLimitAEnable != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LowerLimitAEnable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchoutCtrl) > 0 {
		for iNdEx := len(m.SwitchoutCtrl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwitchoutCtrl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F1_Switchout_Ctrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F1_Switchout_Ctrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F1_Switchout_Ctrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwitchoutTime != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutTime))
		i--
		dAtA[i] = 0x18
	}
	if m.SwitchoutDo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutDo))
		i--
		dAtA[i] = 0x10
	}
	if m.SwitchoutNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopMark) > 0 {
		dAtA82 := make([]byte, len(m.LoopMark)*10)
		var j81 int
		for _, num1 := range m.LoopMark {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA82[j81] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j81++
			}
			dAtA82[j81] = uint8(num)
			j81++
		}
		i -= j81
		copy(dAtA[i:], dAtA82[:j81])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j81))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F31) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F31) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F31) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeUnix != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeUnix))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F57) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F57) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F57) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dismiss != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Dismiss))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn09_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn09_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn09_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalComDate != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LocalComDate))
		i--
		dAtA[i] = 0x58
	}
	if len(m.LocalComVer) > 0 {
		i -= len(m.LocalComVer)
		copy(dAtA[i:], m.LocalComVer)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.LocalComVer)))
		i--
		dAtA[i] = 0x52
	}
	if m.RemoteComDate != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.RemoteComDate))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RemoteComVer) > 0 {
		i -= len(m.RemoteComVer)
		copy(dAtA[i:], m.RemoteComVer)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.RemoteComVer)))
		i--
		dAtA[i] = 0x42
	}
	if m.HardwareDate != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.HardwareDate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.HardwareVer) > 0 {
		i -= len(m.HardwareVer)
		copy(dAtA[i:], m.HardwareVer)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.HardwareVer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceInfo) > 0 {
		i -= len(m.DeviceInfo)
		copy(dAtA[i:], m.DeviceInfo)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.DeviceInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SoftwareDate != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SoftwareDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SoftwareVer) > 0 {
		i -= len(m.SoftwareVer)
		copy(dAtA[i:], m.SoftwareVer)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.SoftwareVer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceNum) > 0 {
		i -= len(m.DeviceNum)
		copy(dAtA[i:], m.DeviceNum)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.DeviceNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_Pn_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_Pn_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_Pn_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopData) > 0 {
		for iNdEx := len(m.LoopData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DtReport != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtReport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_Pn_F1_Loop_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_Pn_F1_Loop_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_Pn_F1_Loop_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Other != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Other))))
		i--
		dAtA[i] = 0x39
	}
	if m.LuxValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LuxValue))))
		i--
		dAtA[i] = 0x31
	}
	if m.PowerFactor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerFactor))))
		i--
		dAtA[i] = 0x29
	}
	if m.ReactivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactivePower))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeUnix != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.TimeUnix))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Frequency))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.PhaseData) > 0 {
		for iNdEx := len(m.PhaseData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhaseData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F3_Phase_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F3_Phase_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F3_Phase_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReactiveEnergy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactiveEnergy))))
		i--
		dAtA[i] = 0x39
	}
	if m.ActiveEnergy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActiveEnergy))))
		i--
		dAtA[i] = 0x31
	}
	if m.PowerFactor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerFactor))))
		i--
		dAtA[i] = 0x29
	}
	if m.ReactivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactivePower))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableReport != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EnableReport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwitchoutStatus) > 0 {
		dAtA84 := make([]byte, len(m.SwitchoutStatus)*10)
		var j83 int
		for _, num1 := range m.SwitchoutStatus {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA84[j83] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j83++
			}
			dAtA84[j83] = uint8(num)
			j83++
		}
		i -= j83
		copy(dAtA[i:], dAtA84[:j83])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j83))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F7) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F7) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ec2 != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ec2))
		i--
		dAtA[i] = 0x10
	}
	if m.Ec1 != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ec1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopStatus) > 0 {
		for iNdEx := len(m.LoopStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F9_Loop_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F9_Loop_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F9_Loop_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StChanged != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.StChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.StNow != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.StNow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F18) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F18) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F18) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventsDo) > 0 {
		dAtA86 := make([]byte, len(m.EventsDo)*10)
		var j85 int
		for _, num1 := range m.EventsDo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA86[j85] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j85++
			}
			dAtA86[j85] = uint8(num)
			j85++
		}
		i -= j85
		copy(dAtA[i:], dAtA86[:j85])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j85))
		i--
		dAtA[i] = 0x1a
	}
	if m.LoopPhase != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopPhase))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F19) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F19) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F19) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeakageCurrent) > 0 {
		for iNdEx := len(m.LeakageCurrent) - 1; iNdEx >= 0; iNdEx-- {
			f87 := math.Float64bits(float64(m.LeakageCurrent[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f87))
		}
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.LeakageCurrent)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Temperature != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Temperature))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lux != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lux))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F25) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F25) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F25) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeakageBreak) > 0 {
		dAtA89 := make([]byte, len(m.LeakageBreak)*10)
		var j88 int
		for _, num1 := range m.LeakageBreak {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA89[j88] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j88++
			}
			dAtA89[j88] = uint8(num)
			j88++
		}
		i -= j88
		copy(dAtA[i:], dAtA89[:j88])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j88))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoltageOverUpper != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.VoltageOverUpper))
		i--
		dAtA[i] = 0x10
	}
	if m.VoltageOverLower != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.VoltageOverLower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0D_Pn_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0D_Pn_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0D_Pn_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopData) > 0 {
		for iNdEx := len(m.LoopData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LoopNo) > 0 {
		dAtA91 := make([]byte, len(m.LoopNo)*10)
		var j90 int
		for _, num1 := range m.LoopNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA91[j90] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j90++
			}
			dAtA91[j90] = uint8(num)
			j90++
		}
		i -= j90
		copy(dAtA[i:], dAtA91[:j90])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j90))
		i--
		dAtA[i] = 0x22
	}
	if m.DataNum != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataNum))
		i--
		dAtA[i] = 0x18
	}
	if m.DataDensity != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataDensity))
		i--
		dAtA[i] = 0x10
	}
	if m.DtStart != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0D_Pn_F1_Loop_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0D_Pn_F1_Loop_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0D_Pn_F1_Loop_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Other != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Other))))
		i--
		dAtA[i] = 0x39
	}
	if m.LuxValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LuxValue))))
		i--
		dAtA[i] = 0x31
	}
	if m.PowerFactor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerFactor))))
		i--
		dAtA[i] = 0x29
	}
	if m.ReactivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactivePower))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn0D_P0_F2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0D_P0_F2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0D_P0_F2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhaseCData) > 0 {
		for iNdEx := len(m.PhaseCData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhaseCData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PhaseBData) > 0 {
		for iNdEx := len(m.PhaseBData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhaseBData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PhaseAData) > 0 {
		for iNdEx := len(m.PhaseAData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhaseAData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x20
	}
	if m.DataNum != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataNum))
		i--
		dAtA[i] = 0x18
	}
	if m.DataDensity != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataDensity))
		i--
		dAtA[i] = 0x10
	}
	if m.DtStart != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0D_P0_F2_Phase_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0D_P0_F2_Phase_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0D_P0_F2_Phase_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PowerFactor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerFactor))))
		i--
		dAtA[i] = 0x29
	}
	if m.ReactivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactivePower))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Afn0D_Pn_F3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0D_Pn_F3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0D_Pn_F3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeakageCurrent) > 0 {
		for iNdEx := len(m.LeakageCurrent) - 1; iNdEx >= 0; iNdEx-- {
			f92 := math.Float64bits(float64(m.LeakageCurrent[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f92))
		}
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.LeakageCurrent)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LoopNo) > 0 {
		dAtA94 := make([]byte, len(m.LoopNo)*10)
		var j93 int
		for _, num1 := range m.LoopNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA94[j93] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j93++
			}
			dAtA94[j93] = uint8(num)
			j93++
		}
		i -= j93
		copy(dAtA[i:], dAtA94[:j93])
		i = encodeVarintMsgWlst(dAtA, i, uint64(j93))
		i--
		dAtA[i] = 0x22
	}
	if m.DataNum != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataNum))
		i--
		dAtA[i] = 0x18
	}
	if m.DataDensity != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DataDensity))
		i--
		dAtA[i] = 0x10
	}
	if m.DtStart != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventsData) > 0 {
		for iNdEx := len(m.EventsData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventsData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EcNow != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EcNow))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Pm != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Pm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Events_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Events_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Events_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Erc32 != nil {
		{
			size, err := m.Erc32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Erc31 != nil {
		{
			size, err := m.Erc31.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Erc30 != nil {
		{
			size, err := m.Erc30.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Erc29 != nil {
		{
			size, err := m.Erc29.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Erc28 != nil {
		{
			size, err := m.Erc28.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Erc27 != nil {
		{
			size, err := m.Erc27.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Erc26 != nil {
		{
			size, err := m.Erc26.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Erc25 != nil {
		{
			size, err := m.Erc25.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Erc24 != nil {
		{
			size, err := m.Erc24.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Erc23 != nil {
		{
			size, err := m.Erc23.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Erc22 != nil {
		{
			size, err := m.Erc22.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Erc21 != nil {
		{
			size, err := m.Erc21.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Erc20 != nil {
		{
			size, err := m.Erc20.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Erc13 != nil {
		{
			size, err := m.Erc13.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Erc05 != nil {
		{
			size, err := m.Erc05.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Erc04 != nil {
		{
			size, err := m.Erc04.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EventTime != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EventTime))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc04_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc04_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc04_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DiNo))
		i--
		dAtA[i] = 0x10
	}
	if m.DiStatus != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc05_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc05_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc05_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwitchoutSource != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutSource))
		i--
		dAtA[i] = 0x18
	}
	if m.SwitchoutDo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutDo))
		i--
		dAtA[i] = 0x10
	}
	if m.SwitchoutNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SwitchoutNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc13_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc13_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc13_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ReportType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc20_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc20_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc20_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeakageCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeakageCurrent))))
		i--
		dAtA[i] = 0x21
	}
	if m.LeakageLevel != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LeakageLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.LeakageNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LeakageNo))
		i--
		dAtA[i] = 0x10
	}
	if m.ReportType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ReportType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc22_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc22_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc22_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Phase != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x10
	}
	if m.ReportType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ReportType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc25_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc25_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc25_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoopNo != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x10
	}
	if m.ReportType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.ReportType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn10_P0_F2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn10_P0_F2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn10_P0_F2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WlstMru_9100 != nil {
		{
			size, err := m.WlstMru_9100.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Cmd) > 0 {
		i -= len(m.Cmd)
		copy(dAtA[i:], m.Cmd)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.Cmd)))
		i--
		dAtA[i] = 0x12
	}
	if m.RsSetting != nil {
		{
			size, err := m.RsSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn10_P0_F2_WlstMru_9100) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn10_P0_F2_WlstMru_9100) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn10_P0_F2_WlstMru_9100) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MeterValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeterValue))))
		i--
		dAtA[i] = 0x29
	}
	if m.Ver != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Ver))
		i--
		dAtA[i] = 0x20
	}
	if m.MeterReadingDate != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.MeterReadingDate))
		i--
		dAtA[i] = 0x18
	}
	if m.MeterReadingType != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.MeterReadingType))
		i--
		dAtA[i] = 0x10
	}
	if m.Addr != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn10_P0_F9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn10_P0_F9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn10_P0_F9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FtpFile) > 0 {
		i -= len(m.FtpFile)
		copy(dAtA[i:], m.FtpFile)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.FtpFile)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FtpDir) > 0 {
		i -= len(m.FtpDir)
		copy(dAtA[i:], m.FtpDir)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.FtpDir)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FtpPwd) > 0 {
		i -= len(m.FtpPwd)
		copy(dAtA[i:], m.FtpPwd)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.FtpPwd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FtpUser) > 0 {
		i -= len(m.FtpUser)
		copy(dAtA[i:], m.FtpUser)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.FtpUser)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FtpPort != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.FtpPort))
		i--
		dAtA[i] = 0x10
	}
	if m.FtpIp != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.FtpIp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn10_P0_F10) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn10_P0_F10) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn10_P0_F10) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DevType) > 0 {
		i -= len(m.DevType)
		copy(dAtA[i:], m.DevType)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.DevType)))
		i--
		dAtA[i] = 0x32
	}
	if m.DtUpgrade != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.DtUpgrade))
		i--
		dAtA[i] = 0x28
	}
	if m.SoftwareDateNew != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SoftwareDateNew))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SoftwareVerNew) > 0 {
		i -= len(m.SoftwareVerNew)
		copy(dAtA[i:], m.SoftwareVerNew)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.SoftwareVerNew)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SoftwareDateOld != 0 {
		i = encodeVarintMsgWlst(dAtA, i, uint64(m.SoftwareDateOld))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SoftwareVerOld) > 0 {
		i -= len(m.SoftwareVerOld)
		copy(dAtA[i:], m.SoftwareVerOld)
		i = encodeVarintMsgWlst(dAtA, i, uint64(len(m.SoftwareVerOld)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgWlst(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgWlst(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RS_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovMsgWlst(uint64(m.Idx))
	}
	if m.Bps != 0 {
		n += 1 + sovMsgWlst(uint64(m.Bps))
	}
	if m.Rc != 0 {
		n += 1 + sovMsgWlst(uint64(m.Rc))
	}
	return n
}

func (m *UnitIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Pn))
	}
	if m.Fn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Fn))
	}
	return n
}

func (m *DataIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UintID) > 0 {
		for _, e := range m.UintID {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if m.Dir != 0 {
		n += 1 + sovMsgWlst(uint64(m.Dir))
	}
	if m.Tp != 0 {
		n += 1 + sovMsgWlst(uint64(m.Tp))
	}
	l = len(m.Pw)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Ec1 != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ec1))
	}
	if m.Ec2 != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ec2))
	}
	if m.Seq != 0 {
		n += 1 + sovMsgWlst(uint64(m.Seq))
	}
	if m.Afn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Afn))
	}
	if m.Fun != 0 {
		n += 1 + sovMsgWlst(uint64(m.Fun))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Addr != 0 {
		n += 1 + sovMsgWlst(uint64(m.Addr))
	}
	if m.Sp != 0 {
		n += 1 + sovMsgWlst(uint64(m.Sp))
	}
	return n
}

func (m *MsgGBOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataID != nil {
		l = m.DataID.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn00P0F1 != nil {
		l = m.Afn00P0F1.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn00P0F2 != nil {
		l = m.Afn00P0F2.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn00P0F3 != nil {
		l = m.Afn00P0F3.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F1 != nil {
		l = m.Afn04P0F1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F3 != nil {
		l = m.Afn04P0F3.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F9 != nil {
		l = m.Afn04P0F9.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F10 != nil {
		l = m.Afn04P0F10.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F11 != nil {
		l = m.Afn04P0F11.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if len(m.Afn04PnF14) > 0 {
		for _, e := range m.Afn04PnF14 {
			l = e.Size()
			n += 2 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.Afn04PnF15) > 0 {
		for _, e := range m.Afn04PnF15 {
			l = e.Size()
			n += 2 + l + sovMsgWlst(uint64(l))
		}
	}
	if m.Afn04P0F41 != nil {
		l = m.Afn04P0F41.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F42 != nil {
		l = m.Afn04P0F42.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F46 != nil {
		l = m.Afn04P0F46.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F49 != nil {
		l = m.Afn04P0F49.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F50 != nil {
		l = m.Afn04P0F50.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F51 != nil {
		l = m.Afn04P0F51.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F52 != nil {
		l = m.Afn04P0F52.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F53 != nil {
		l = m.Afn04P0F53.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn04P0F57 != nil {
		l = m.Afn04P0F57.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn05P0F1 != nil {
		l = m.Afn05P0F1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn05P0F9 != nil {
		l = m.Afn05P0F9.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn05P0F31 != nil {
		l = m.Afn05P0F31.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn09P0F1 != nil {
		l = m.Afn09P0F1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F1 != nil {
		l = m.Afn0AP0F1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F3 != nil {
		l = m.Afn0AP0F3.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F9 != nil {
		l = m.Afn0AP0F9.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F10 != nil {
		l = m.Afn0AP0F10.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F11 != nil {
		l = m.Afn0AP0F11.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if len(m.Afn0APnF14) > 0 {
		for _, e := range m.Afn0APnF14 {
			l = e.Size()
			n += 2 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.Afn0APnF15) > 0 {
		for _, e := range m.Afn0APnF15 {
			l = e.Size()
			n += 2 + l + sovMsgWlst(uint64(l))
		}
	}
	if m.Afn0AP0F41 != nil {
		l = m.Afn0AP0F41.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F42 != nil {
		l = m.Afn0AP0F42.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F46 != nil {
		l = m.Afn0AP0F46.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F49 != nil {
		l = m.Afn0AP0F49.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F50 != nil {
		l = m.Afn0AP0F50.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F51 != nil {
		l = m.Afn0AP0F51.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F52 != nil {
		l = m.Afn0AP0F52.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F53 != nil {
		l = m.Afn0AP0F53.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0AP0F57 != nil {
		l = m.Afn0AP0F57.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CPnF1 != nil {
		l = m.Afn0CPnF1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F2 != nil {
		l = m.Afn0CP0F2.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F3 != nil {
		l = m.Afn0CP0F3.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F4 != nil {
		l = m.Afn0CP0F4.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F6 != nil {
		l = m.Afn0CP0F6.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F7 != nil {
		l = m.Afn0CP0F7.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F9 != nil {
		l = m.Afn0CP0F9.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F18 != nil {
		l = m.Afn0CP0F18.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F19 != nil {
		l = m.Afn0CP0F19.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0CP0F20 != nil {
		l = m.Afn0CP0F20.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0DPnF1 != nil {
		l = m.Afn0DPnF1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0DP0F2 != nil {
		l = m.Afn0DP0F2.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0DPnF3 != nil {
		l = m.Afn0DPnF3.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn0EP0F1 != nil {
		l = m.Afn0EP0F1.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn10P0F2 != nil {
		l = m.Afn10P0F2.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn10P0F9 != nil {
		l = m.Afn10P0F9.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn10P0F10 != nil {
		l = m.Afn10P0F10.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Afn10P0F41 != nil {
		l = m.Afn10P0F41.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn00_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Afn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Afn))
	}
	return n
}

func (m *Afn00_P0_F3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Afn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Afn))
	}
	if len(m.UnitId) > 0 {
		for _, e := range m.UnitId {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rts != 0 {
		n += 1 + sovMsgWlst(uint64(m.Rts))
	}
	if m.MasterRts != 0 {
		n += 1 + sovMsgWlst(uint64(m.MasterRts))
	}
	if m.ResendTimeout != 0 {
		n += 1 + sovMsgWlst(uint64(m.ResendTimeout))
	}
	if m.ResendNum != 0 {
		n += 1 + sovMsgWlst(uint64(m.ResendNum))
	}
	if len(m.ReportMark) > 0 {
		l = 0
		for _, e := range m.ReportMark {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if m.KeepAlive != 0 {
		n += 1 + sovMsgWlst(uint64(m.KeepAlive))
	}
	return n
}

func (m *Afn04_P0_F3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MainIp)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.MainPort != 0 {
		n += 1 + sovMsgWlst(uint64(m.MainPort))
	}
	l = len(m.BackupIp)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.BackupPort != 0 {
		n += 1 + sovMsgWlst(uint64(m.BackupPort))
	}
	l = len(m.Apn)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn04_P0_F9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventsAvailable) > 0 {
		l = 0
		for _, e := range m.EventsAvailable {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if len(m.EventsReport) > 0 {
		l = 0
		for _, e := range m.EventsReport {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F10) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchinAvailable) > 0 {
		l = 0
		for _, e := range m.SwitchinAvailable {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if len(m.SwitchinHopping) > 0 {
		l = 0
		for _, e := range m.SwitchinHopping {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F11) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.LongitudeMark != 0 {
		n += 1 + sovMsgWlst(uint64(m.LongitudeMark))
	}
	if m.LatitudeMark != 0 {
		n += 1 + sovMsgWlst(uint64(m.LatitudeMark))
	}
	return n
}

func (m *Afn04_Pn_F14) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RsSetting != nil {
		l = m.RsSetting.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.RsType != 0 {
		n += 1 + sovMsgWlst(uint64(m.RsType))
	}
	if m.Sp != 0 {
		n += 1 + sovMsgWlst(uint64(m.Sp))
	}
	if m.RsPort != 0 {
		n += 1 + sovMsgWlst(uint64(m.RsPort))
	}
	if m.Ver != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ver))
	}
	if m.LoopNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopNo))
	}
	if m.Number != 0 {
		n += 1 + sovMsgWlst(uint64(m.Number))
	}
	if m.Phase != 0 {
		n += 1 + sovMsgWlst(uint64(m.Phase))
	}
	if m.Addr != 0 {
		n += 1 + sovMsgWlst(uint64(m.Addr))
	}
	if m.EluSetting != nil {
		l = m.EluSetting.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn04_Pn_F14_Elu_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableOff != 0 {
		n += 1 + sovMsgWlst(uint64(m.EnableOff))
	}
	if m.SwitchoutNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutNo))
	}
	if m.Retry != 0 {
		n += 1 + sovMsgWlst(uint64(m.Retry))
	}
	if m.Delay != 0 {
		n += 1 + sovMsgWlst(uint64(m.Delay))
	}
	return n
}

func (m *Afn04_Pn_F15) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DtStart)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.DtDays != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtDays))
	}
	if len(m.SwitchoutNo) > 0 {
		l = 0
		for _, e := range m.SwitchoutNo {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if len(m.TimeSlot) > 0 {
		for _, e := range m.TimeSlot {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_Pn_F15_Time_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeOn != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeOn))
	}
	if m.TimeOff != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeOff))
	}
	return n
}

func (m *Afn04_P0_F41) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchoutLoops) > 0 {
		l = 0
		for _, e := range m.SwitchoutLoops {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F42) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltageTransformer != 0 {
		n += 1 + sovMsgWlst(uint64(m.VoltageTransformer))
	}
	if m.EnergyATransformer != 0 {
		n += 1 + sovMsgWlst(uint64(m.EnergyATransformer))
	}
	if m.EnergyBTransformer != 0 {
		n += 1 + sovMsgWlst(uint64(m.EnergyBTransformer))
	}
	if m.EnergyCTransformer != 0 {
		n += 1 + sovMsgWlst(uint64(m.EnergyCTransformer))
	}
	if len(m.CurrentSetting) > 0 {
		for _, e := range m.CurrentSetting {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F42_Current_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transformer != 0 {
		n += 1 + sovMsgWlst(uint64(m.Transformer))
	}
	if m.Phase != 0 {
		n += 1 + sovMsgWlst(uint64(m.Phase))
	}
	return n
}

func (m *Afn04_P0_F46) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WeekDay1) > 0 {
		for _, e := range m.WeekDay1 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay2) > 0 {
		for _, e := range m.WeekDay2 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay3) > 0 {
		for _, e := range m.WeekDay3 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay4) > 0 {
		for _, e := range m.WeekDay4 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay5) > 0 {
		for _, e := range m.WeekDay5 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay6) > 0 {
		for _, e := range m.WeekDay6 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.WeekDay7) > 0 {
		for _, e := range m.WeekDay7 {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F46_Time_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeOn != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeOn))
	}
	if m.TimeOff != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeOff))
	}
	return n
}

func (m *Afn04_P0_F49) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OffsetOn != 0 {
		n += 1 + sovMsgWlst(uint64(m.OffsetOn))
	}
	if m.OffsetOff != 0 {
		n += 1 + sovMsgWlst(uint64(m.OffsetOff))
	}
	return n
}

func (m *Afn04_P0_F50) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportTimer != 0 {
		n += 1 + sovMsgWlst(uint64(m.ReportTimer))
	}
	return n
}

func (m *Afn04_P0_F51) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltageLowerLimit != 0 {
		n += 9
	}
	if m.VoltageUpperLimit != 0 {
		n += 9
	}
	if len(m.CurrentSetting) > 0 {
		for _, e := range m.CurrentSetting {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F51_Current_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopSetting) > 0 {
		for _, e := range m.LoopSetting {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F51_Loop_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeStart != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeStart))
	}
	if m.TimeEnd != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeEnd))
	}
	if m.CurrentLowerLimit != 0 {
		n += 9
	}
	if m.CurrentUpperLimit != 0 {
		n += 9
	}
	return n
}

func (m *Afn04_P0_F52) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LeakageLimit) > 0 {
		for _, e := range m.LeakageLimit {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F52_Leakage_Limit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopEnable))
	}
	if m.LoopSwitchout != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopSwitchout))
	}
	if m.Level1Limit != 0 {
		n += 1 + sovMsgWlst(uint64(m.Level1Limit))
	}
	if m.Level2Limit != 0 {
		n += 1 + sovMsgWlst(uint64(m.Level2Limit))
	}
	if m.Level3Limit != 0 {
		n += 1 + sovMsgWlst(uint64(m.Level3Limit))
	}
	if m.Level4Limit != 0 {
		n += 1 + sovMsgWlst(uint64(m.Level4Limit))
	}
	return n
}

func (m *Afn04_P0_F53) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LuxThreshold != 0 {
		n += 1 + sovMsgWlst(uint64(m.LuxThreshold))
	}
	if m.TimeTick != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeTick))
	}
	return n
}

func (m *Afn04_P0_F57) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuntimeMark != 0 {
		n += 1 + sovMsgWlst(uint64(m.RuntimeMark))
	}
	if len(m.LoopMark) > 0 {
		l = 0
		for _, e := range m.LoopMark {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F65) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchinVector) > 0 {
		l = 0
		for _, e := range m.SwitchinVector {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F66) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchinSwitchout) > 0 {
		l = 0
		for _, e := range m.SwitchinSwitchout {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F67) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchoutVector) > 0 {
		l = 0
		for _, e := range m.SwitchoutVector {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F68) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerLimitAEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitAEnable))
	}
	if m.LowerLimitBEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitBEnable))
	}
	if m.LowerLimitCEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitCEnable))
	}
	if m.UpperLimitAEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitAEnable))
	}
	if m.UpperLimitBEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitBEnable))
	}
	if m.UpperLimitCEnable != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitCEnable))
	}
	if m.LowerLimitA != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitA))
	}
	if m.LowerLimitB != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitB))
	}
	if m.LowerLimitC != 0 {
		n += 1 + sovMsgWlst(uint64(m.LowerLimitC))
	}
	if m.UpperLimitA != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitA))
	}
	if m.UpperLimitB != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitB))
	}
	if m.UpperLimitC != 0 {
		n += 1 + sovMsgWlst(uint64(m.UpperLimitC))
	}
	return n
}

func (m *Afn05_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchoutCtrl) > 0 {
		for _, e := range m.SwitchoutCtrl {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn05_P0_F1_Switchout_Ctrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwitchoutNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutNo))
	}
	if m.SwitchoutDo != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutDo))
	}
	if m.SwitchoutTime != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutTime))
	}
	return n
}

func (m *Afn05_P0_F9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopMark) > 0 {
		l = 0
		for _, e := range m.LoopMark {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn05_P0_F31) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeUnix != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeUnix))
	}
	return n
}

func (m *Afn05_P0_F57) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dismiss != 0 {
		n += 1 + sovMsgWlst(uint64(m.Dismiss))
	}
	return n
}

func (m *Afn09_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.DeviceNum)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.SoftwareVer)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.SoftwareDate != 0 {
		n += 1 + sovMsgWlst(uint64(m.SoftwareDate))
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.HardwareVer)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.HardwareDate != 0 {
		n += 1 + sovMsgWlst(uint64(m.HardwareDate))
	}
	l = len(m.RemoteComVer)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.RemoteComDate != 0 {
		n += 1 + sovMsgWlst(uint64(m.RemoteComDate))
	}
	l = len(m.LocalComVer)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.LocalComDate != 0 {
		n += 1 + sovMsgWlst(uint64(m.LocalComDate))
	}
	return n
}

func (m *Afn0C_Pn_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtReport != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtReport))
	}
	if len(m.LoopData) > 0 {
		for _, e := range m.LoopData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn0C_Pn_F1_Loop_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.ReactivePower != 0 {
		n += 9
	}
	if m.PowerFactor != 0 {
		n += 9
	}
	if m.LuxValue != 0 {
		n += 9
	}
	if m.Other != 0 {
		n += 9
	}
	return n
}

func (m *Afn0C_P0_F2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeUnix != 0 {
		n += 1 + sovMsgWlst(uint64(m.TimeUnix))
	}
	return n
}

func (m *Afn0C_P0_F3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PhaseData) > 0 {
		for _, e := range m.PhaseData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if m.Frequency != 0 {
		n += 9
	}
	return n
}

func (m *Afn0C_P0_F3_Phase_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.ReactivePower != 0 {
		n += 9
	}
	if m.PowerFactor != 0 {
		n += 9
	}
	if m.ActiveEnergy != 0 {
		n += 9
	}
	if m.ReactiveEnergy != 0 {
		n += 9
	}
	return n
}

func (m *Afn0C_P0_F4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableReport != 0 {
		n += 1 + sovMsgWlst(uint64(m.EnableReport))
	}
	return n
}

func (m *Afn0C_P0_F6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchoutStatus) > 0 {
		l = 0
		for _, e := range m.SwitchoutStatus {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn0C_P0_F7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ec1 != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ec1))
	}
	if m.Ec2 != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ec2))
	}
	return n
}

func (m *Afn0C_P0_F9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopStatus) > 0 {
		for _, e := range m.LoopStatus {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn0C_P0_F9_Loop_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StNow != 0 {
		n += 1 + sovMsgWlst(uint64(m.StNow))
	}
	if m.StChanged != 0 {
		n += 1 + sovMsgWlst(uint64(m.StChanged))
	}
	return n
}

func (m *Afn0C_P0_F18) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopNo))
	}
	if m.LoopPhase != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopPhase))
	}
	if len(m.EventsDo) > 0 {
		l = 0
		for _, e := range m.EventsDo {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn0C_P0_F19) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LeakageCurrent) > 0 {
		n += 1 + sovMsgWlst(uint64(len(m.LeakageCurrent)*8)) + len(m.LeakageCurrent)*8
	}
	return n
}

func (m *Afn0C_P0_F20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lux != 0 {
		n += 9
	}
	if m.Temperature != 0 {
		n += 9
	}
	return n
}

func (m *Afn0C_P0_F25) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoltageOverLower != 0 {
		n += 1 + sovMsgWlst(uint64(m.VoltageOverLower))
	}
	if m.VoltageOverUpper != 0 {
		n += 1 + sovMsgWlst(uint64(m.VoltageOverUpper))
	}
	if len(m.LeakageBreak) > 0 {
		l = 0
		for _, e := range m.LeakageBreak {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	return n
}

func (m *Afn0D_Pn_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtStart != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtStart))
	}
	if m.DataDensity != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataDensity))
	}
	if m.DataNum != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataNum))
	}
	if len(m.LoopNo) > 0 {
		l = 0
		for _, e := range m.LoopNo {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if len(m.LoopData) > 0 {
		for _, e := range m.LoopData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn0D_Pn_F1_Loop_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.ReactivePower != 0 {
		n += 9
	}
	if m.PowerFactor != 0 {
		n += 9
	}
	if m.LuxValue != 0 {
		n += 9
	}
	if m.Other != 0 {
		n += 9
	}
	return n
}

func (m *Afn0D_P0_F2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtStart != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtStart))
	}
	if m.DataDensity != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataDensity))
	}
	if m.DataNum != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataNum))
	}
	if m.LoopNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopNo))
	}
	if len(m.PhaseAData) > 0 {
		for _, e := range m.PhaseAData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.PhaseBData) > 0 {
		for _, e := range m.PhaseBData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	if len(m.PhaseCData) > 0 {
		for _, e := range m.PhaseCData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn0D_P0_F2_Phase_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.ReactivePower != 0 {
		n += 9
	}
	if m.PowerFactor != 0 {
		n += 9
	}
	return n
}

func (m *Afn0D_Pn_F3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtStart != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtStart))
	}
	if m.DataDensity != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataDensity))
	}
	if m.DataNum != 0 {
		n += 1 + sovMsgWlst(uint64(m.DataNum))
	}
	if len(m.LoopNo) > 0 {
		l = 0
		for _, e := range m.LoopNo {
			l += sovMsgWlst(uint64(e))
		}
		n += 1 + sovMsgWlst(uint64(l)) + l
	}
	if len(m.LeakageCurrent) > 0 {
		n += 1 + sovMsgWlst(uint64(len(m.LeakageCurrent)*8)) + len(m.LeakageCurrent)*8
	}
	return n
}

func (m *Afn0E_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pm != 0 {
		n += 1 + sovMsgWlst(uint64(m.Pm))
	}
	if m.Pn != 0 {
		n += 1 + sovMsgWlst(uint64(m.Pn))
	}
	if m.EcNow != 0 {
		n += 1 + sovMsgWlst(uint64(m.EcNow))
	}
	if len(m.EventsData) > 0 {
		for _, e := range m.EventsData {
			l = e.Size()
			n += 1 + l + sovMsgWlst(uint64(l))
		}
	}
	return n
}

func (m *Afn0E_P0_F1_Events_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMsgWlst(uint64(m.EventId))
	}
	if m.EventTime != 0 {
		n += 1 + sovMsgWlst(uint64(m.EventTime))
	}
	if m.Erc04 != nil {
		l = m.Erc04.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc05 != nil {
		l = m.Erc05.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc13 != nil {
		l = m.Erc13.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc20 != nil {
		l = m.Erc20.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc21 != nil {
		l = m.Erc21.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc22 != nil {
		l = m.Erc22.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc23 != nil {
		l = m.Erc23.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc24 != nil {
		l = m.Erc24.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc25 != nil {
		l = m.Erc25.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc26 != nil {
		l = m.Erc26.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc27 != nil {
		l = m.Erc27.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc28 != nil {
		l = m.Erc28.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc29 != nil {
		l = m.Erc29.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc30 != nil {
		l = m.Erc30.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc31 != nil {
		l = m.Erc31.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	if m.Erc32 != nil {
		l = m.Erc32.Size()
		n += 2 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc04_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiStatus != 0 {
		n += 1 + sovMsgWlst(uint64(m.DiStatus))
	}
	if m.DiNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.DiNo))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc05_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwitchoutNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutNo))
	}
	if m.SwitchoutDo != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutDo))
	}
	if m.SwitchoutSource != 0 {
		n += 1 + sovMsgWlst(uint64(m.SwitchoutSource))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc13_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportType != 0 {
		n += 1 + sovMsgWlst(uint64(m.ReportType))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc20_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportType != 0 {
		n += 1 + sovMsgWlst(uint64(m.ReportType))
	}
	if m.LeakageNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.LeakageNo))
	}
	if m.LeakageLevel != 0 {
		n += 1 + sovMsgWlst(uint64(m.LeakageLevel))
	}
	if m.LeakageCurrent != 0 {
		n += 9
	}
	return n
}

func (m *Afn0E_P0_F1_Erc22_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportType != 0 {
		n += 1 + sovMsgWlst(uint64(m.ReportType))
	}
	if m.Phase != 0 {
		n += 1 + sovMsgWlst(uint64(m.Phase))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc25_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportType != 0 {
		n += 1 + sovMsgWlst(uint64(m.ReportType))
	}
	if m.LoopNo != 0 {
		n += 1 + sovMsgWlst(uint64(m.LoopNo))
	}
	return n
}

func (m *Afn10_P0_F2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RsSetting != nil {
		l = m.RsSetting.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.WlstMru_9100 != nil {
		l = m.WlstMru_9100.Size()
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn10_P0_F2_WlstMru_9100) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovMsgWlst(uint64(m.Addr))
	}
	if m.MeterReadingType != 0 {
		n += 1 + sovMsgWlst(uint64(m.MeterReadingType))
	}
	if m.MeterReadingDate != 0 {
		n += 1 + sovMsgWlst(uint64(m.MeterReadingDate))
	}
	if m.Ver != 0 {
		n += 1 + sovMsgWlst(uint64(m.Ver))
	}
	if m.MeterValue != 0 {
		n += 9
	}
	return n
}

func (m *Afn10_P0_F9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FtpIp != 0 {
		n += 1 + sovMsgWlst(uint64(m.FtpIp))
	}
	if m.FtpPort != 0 {
		n += 1 + sovMsgWlst(uint64(m.FtpPort))
	}
	l = len(m.FtpUser)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.FtpPwd)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.FtpDir)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	l = len(m.FtpFile)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func (m *Afn10_P0_F10) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SoftwareVerOld)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.SoftwareDateOld != 0 {
		n += 1 + sovMsgWlst(uint64(m.SoftwareDateOld))
	}
	l = len(m.SoftwareVerNew)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	if m.SoftwareDateNew != 0 {
		n += 1 + sovMsgWlst(uint64(m.SoftwareDateNew))
	}
	if m.DtUpgrade != 0 {
		n += 1 + sovMsgWlst(uint64(m.DtUpgrade))
	}
	l = len(m.DevType)
	if l > 0 {
		n += 1 + l + sovMsgWlst(uint64(l))
	}
	return n
}

func sovMsgWlst(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgWlst(x uint64) (n int) {
	return sovMsgWlst(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RS_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RS_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RS_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bps", wireType)
			}
			m.Bps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rc", wireType)
			}
			m.Rc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			m.Fn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UintID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UintID = append(m.UintID, &UnitIdentification{})
			if err := m.UintID[len(m.UintID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec1", wireType)
			}
			m.Ec1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2", wireType)
			}
			m.Ec2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fun", wireType)
			}
			m.Fun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fun |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGBOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGBOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGBOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataID == nil {
				m.DataID = &DataIdentification{}
			}
			if err := m.DataID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn00P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn00P0F1 == nil {
				m.Afn00P0F1 = &Afn00_P0_F1{}
			}
			if err := m.Afn00P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn00P0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn00P0F2 == nil {
				m.Afn00P0F2 = &Afn00_P0_F1{}
			}
			if err := m.Afn00P0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn00P0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn00P0F3 == nil {
				m.Afn00P0F3 = &Afn00_P0_F3{}
			}
			if err := m.Afn00P0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F1 == nil {
				m.Afn04P0F1 = &Afn04_P0_F1{}
			}
			if err := m.Afn04P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F3 == nil {
				m.Afn04P0F3 = &Afn04_P0_F3{}
			}
			if err := m.Afn04P0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F9 == nil {
				m.Afn04P0F9 = &Afn04_P0_F9{}
			}
			if err := m.Afn04P0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F10", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F10 == nil {
				m.Afn04P0F10 = &Afn04_P0_F10{}
			}
			if err := m.Afn04P0F10.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F11", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F11 == nil {
				m.Afn04P0F11 = &Afn04_P0_F11{}
			}
			if err := m.Afn04P0F11.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04PnF14", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Afn04PnF14 = append(m.Afn04PnF14, &Afn04_Pn_F14{})
			if err := m.Afn04PnF14[len(m.Afn04PnF14)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04PnF15", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Afn04PnF15 = append(m.Afn04PnF15, &Afn04_Pn_F15{})
			if err := m.Afn04PnF15[len(m.Afn04PnF15)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F41", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F41 == nil {
				m.Afn04P0F41 = &Afn04_P0_F41{}
			}
			if err := m.Afn04P0F41.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F42", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F42 == nil {
				m.Afn04P0F42 = &Afn04_P0_F42{}
			}
			if err := m.Afn04P0F42.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F46", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F46 == nil {
				m.Afn04P0F46 = &Afn04_P0_F46{}
			}
			if err := m.Afn04P0F46.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F49", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F49 == nil {
				m.Afn04P0F49 = &Afn04_P0_F49{}
			}
			if err := m.Afn04P0F49.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F50", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F50 == nil {
				m.Afn04P0F50 = &Afn04_P0_F50{}
			}
			if err := m.Afn04P0F50.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F51", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F51 == nil {
				m.Afn04P0F51 = &Afn04_P0_F51{}
			}
			if err := m.Afn04P0F51.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F52", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F52 == nil {
				m.Afn04P0F52 = &Afn04_P0_F52{}
			}
			if err := m.Afn04P0F52.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F53", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F53 == nil {
				m.Afn04P0F53 = &Afn04_P0_F53{}
			}
			if err := m.Afn04P0F53.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F57", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F57 == nil {
				m.Afn04P0F57 = &Afn04_P0_F57{}
			}
			if err := m.Afn04P0F57.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn05P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn05P0F1 == nil {
				m.Afn05P0F1 = &Afn05_P0_F1{}
			}
			if err := m.Afn05P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn05P0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn05P0F9 == nil {
				m.Afn05P0F9 = &Afn05_P0_F9{}
			}
			if err := m.Afn05P0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn05P0F31", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn05P0F31 == nil {
				m.Afn05P0F31 = &Afn05_P0_F31{}
			}
			if err := m.Afn05P0F31.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn09P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn09P0F1 == nil {
				m.Afn09P0F1 = &Afn09_P0_F1{}
			}
			if err := m.Afn09P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 400:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F1 == nil {
				m.Afn0AP0F1 = &Afn04_P0_F1{}
			}
			if err := m.Afn0AP0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F3 == nil {
				m.Afn0AP0F3 = &Afn04_P0_F3{}
			}
			if err := m.Afn0AP0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 406:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F9 == nil {
				m.Afn0AP0F9 = &Afn04_P0_F9{}
			}
			if err := m.Afn0AP0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 407:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F10", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F10 == nil {
				m.Afn0AP0F10 = &Afn04_P0_F10{}
			}
			if err := m.Afn0AP0F10.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 408:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F11", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F11 == nil {
				m.Afn0AP0F11 = &Afn04_P0_F11{}
			}
			if err := m.Afn0AP0F11.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 411:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0APnF14", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Afn0APnF14 = append(m.Afn0APnF14, &Afn04_Pn_F14{})
			if err := m.Afn0APnF14[len(m.Afn0APnF14)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 412:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0APnF15", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Afn0APnF15 = append(m.Afn0APnF15, &Afn04_Pn_F15{})
			if err := m.Afn0APnF15[len(m.Afn0APnF15)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 415:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F41", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F41 == nil {
				m.Afn0AP0F41 = &Afn04_P0_F41{}
			}
			if err := m.Afn0AP0F41.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 416:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F42", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F42 == nil {
				m.Afn0AP0F42 = &Afn04_P0_F42{}
			}
			if err := m.Afn0AP0F42.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 417:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F46", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F46 == nil {
				m.Afn0AP0F46 = &Afn04_P0_F46{}
			}
			if err := m.Afn0AP0F46.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 418:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F49", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F49 == nil {
				m.Afn0AP0F49 = &Afn04_P0_F49{}
			}
			if err := m.Afn0AP0F49.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 419:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F50", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F50 == nil {
				m.Afn0AP0F50 = &Afn04_P0_F50{}
			}
			if err := m.Afn0AP0F50.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 420:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F51", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F51 == nil {
				m.Afn0AP0F51 = &Afn04_P0_F51{}
			}
			if err := m.Afn0AP0F51.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 421:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F52", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F52 == nil {
				m.Afn0AP0F52 = &Afn04_P0_F52{}
			}
			if err := m.Afn0AP0F52.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 422:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F53", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F53 == nil {
				m.Afn0AP0F53 = &Afn04_P0_F53{}
			}
			if err := m.Afn0AP0F53.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 423:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F57", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F57 == nil {
				m.Afn0AP0F57 = &Afn04_P0_F57{}
			}
			if err := m.Afn0AP0F57.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 500:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CPnF1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CPnF1 == nil {
				m.Afn0CPnF1 = &Afn0C_Pn_F1{}
			}
			if err := m.Afn0CPnF1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 501:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F2 == nil {
				m.Afn0CP0F2 = &Afn0C_P0_F2{}
			}
			if err := m.Afn0CP0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 502:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F3 == nil {
				m.Afn0CP0F3 = &Afn0C_P0_F3{}
			}
			if err := m.Afn0CP0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 503:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F4 == nil {
				m.Afn0CP0F4 = &Afn0C_P0_F4{}
			}
			if err := m.Afn0CP0F4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 504:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F6 == nil {
				m.Afn0CP0F6 = &Afn0C_P0_F6{}
			}
			if err := m.Afn0CP0F6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 505:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F7 == nil {
				m.Afn0CP0F7 = &Afn0C_P0_F7{}
			}
			if err := m.Afn0CP0F7.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 506:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F9 == nil {
				m.Afn0CP0F9 = &Afn0C_P0_F9{}
			}
			if err := m.Afn0CP0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 507:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F18", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F18 == nil {
				m.Afn0CP0F18 = &Afn0C_P0_F18{}
			}
			if err := m.Afn0CP0F18.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 508:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F19", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F19 == nil {
				m.Afn0CP0F19 = &Afn0C_P0_F19{}
			}
			if err := m.Afn0CP0F19.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 509:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F20", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F20 == nil {
				m.Afn0CP0F20 = &Afn0C_P0_F20{}
			}
			if err := m.Afn0CP0F20.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 600:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0DPnF1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0DPnF1 == nil {
				m.Afn0DPnF1 = &Afn0D_Pn_F1{}
			}
			if err := m.Afn0DPnF1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 601:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0DP0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0DP0F2 == nil {
				m.Afn0DP0F2 = &Afn0D_P0_F2{}
			}
			if err := m.Afn0DP0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 602:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0DPnF3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0DPnF3 == nil {
				m.Afn0DPnF3 = &Afn0D_Pn_F3{}
			}
			if err := m.Afn0DPnF3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 700:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0EP0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0EP0F1 == nil {
				m.Afn0EP0F1 = &Afn0E_P0_F1{}
			}
			if err := m.Afn0EP0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn10P0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn10P0F2 == nil {
				m.Afn10P0F2 = &Afn10_P0_F2{}
			}
			if err := m.Afn10P0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn10P0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn10P0F9 == nil {
				m.Afn10P0F9 = &Afn10_P0_F9{}
			}
			if err := m.Afn10P0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 802:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn10P0F10", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn10P0F10 == nil {
				m.Afn10P0F10 = &Afn10_P0_F10{}
			}
			if err := m.Afn10P0F10.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 803:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn10P0F41", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn10P0F41 == nil {
				m.Afn10P0F41 = &Afn10_P0_F10{}
			}
			if err := m.Afn10P0F41.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn00_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn00_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn00_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn00_P0_F3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn00_P0_F3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn00_P0_F3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitId = append(m.UnitId, &UnitIdentification{})
			if err := m.UnitId[len(m.UnitId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rts", wireType)
			}
			m.Rts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterRts", wireType)
			}
			m.MasterRts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterRts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResendTimeout", wireType)
			}
			m.ResendTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResendTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResendNum", wireType)
			}
			m.ResendNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResendNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReportMark = append(m.ReportMark, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReportMark) == 0 {
					m.ReportMark = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReportMark = append(m.ReportMark, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMark", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			m.KeepAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepAlive |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPort", wireType)
			}
			m.MainPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupPort", wireType)
			}
			m.BackupPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventsAvailable = append(m.EventsAvailable, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EventsAvailable) == 0 {
					m.EventsAvailable = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventsAvailable = append(m.EventsAvailable, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsAvailable", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventsReport = append(m.EventsReport, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EventsReport) == 0 {
					m.EventsReport = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventsReport = append(m.EventsReport, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsReport", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F10) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F10: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F10: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchinAvailable = append(m.SwitchinAvailable, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchinAvailable) == 0 {
					m.SwitchinAvailable = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchinAvailable = append(m.SwitchinAvailable, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchinAvailable", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchinHopping = append(m.SwitchinHopping, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchinHopping) == 0 {
					m.SwitchinHopping = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchinHopping = append(m.SwitchinHopping, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchinHopping", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F11) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F11: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F11: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeMark", wireType)
			}
			m.LongitudeMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongitudeMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeMark", wireType)
			}
			m.LatitudeMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatitudeMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_Pn_F14) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_Pn_F14: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_Pn_F14: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RsSetting == nil {
				m.RsSetting = &RS_Setting{}
			}
			if err := m.RsSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsType", wireType)
			}
			m.RsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RsType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsPort", wireType)
			}
			m.RsPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RsPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EluSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EluSetting == nil {
				m.EluSetting = &Afn04_Pn_F14_Elu_Setting{}
			}
			if err := m.EluSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_Pn_F14_Elu_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Elu_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Elu_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableOff", wireType)
			}
			m.EnableOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableOff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutNo", wireType)
			}
			m.SwitchoutNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_Pn_F15) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_Pn_F15: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_Pn_F15: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtDays", wireType)
			}
			m.DtDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchoutNo = append(m.SwitchoutNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchoutNo) == 0 {
					m.SwitchoutNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchoutNo = append(m.SwitchoutNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutNo", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSlot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSlot = append(m.TimeSlot, &Afn04_Pn_F15_Time_Slot{})
			if err := m.TimeSlot[len(m.TimeSlot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_Pn_F15_Time_Slot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time_Slot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time_Slot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOn", wireType)
			}
			m.TimeOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOff", wireType)
			}
			m.TimeOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F41) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F41: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F41: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchoutLoops = append(m.SwitchoutLoops, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchoutLoops) == 0 {
					m.SwitchoutLoops = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchoutLoops = append(m.SwitchoutLoops, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutLoops", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F42) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F42: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F42: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltageTransformer", wireType)
			}
			m.VoltageTransformer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoltageTransformer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyATransformer", wireType)
			}
			m.EnergyATransformer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyATransformer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyBTransformer", wireType)
			}
			m.EnergyBTransformer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyBTransformer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyCTransformer", wireType)
			}
			m.EnergyCTransformer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyCTransformer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSetting = append(m.CurrentSetting, &Afn04_P0_F42_Current_Setting{})
			if err := m.CurrentSetting[len(m.CurrentSetting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F42_Current_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Current_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Current_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformer", wireType)
			}
			m.Transformer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transformer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F46) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F46: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F46: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay1 = append(m.WeekDay1, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay1[len(m.WeekDay1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay2 = append(m.WeekDay2, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay2[len(m.WeekDay2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay3 = append(m.WeekDay3, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay3[len(m.WeekDay3)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay4 = append(m.WeekDay4, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay4[len(m.WeekDay4)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay5 = append(m.WeekDay5, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay5[len(m.WeekDay5)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay6 = append(m.WeekDay6, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay6[len(m.WeekDay6)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDay7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekDay7 = append(m.WeekDay7, &Afn04_P0_F46_Time_Slot{})
			if err := m.WeekDay7[len(m.WeekDay7)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F46_Time_Slot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time_Slot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time_Slot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOn", wireType)
			}
			m.TimeOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOff", wireType)
			}
			m.TimeOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F49) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F49: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F49: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetOn", wireType)
			}
			m.OffsetOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetOff", wireType)
			}
			m.OffsetOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetOff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F50) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F50: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F50: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTimer", wireType)
			}
			m.ReportTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F51) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F51: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F51: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltageLowerLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VoltageLowerLimit = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltageUpperLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VoltageUpperLimit = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSetting = append(m.CurrentSetting, &Afn04_P0_F51_Current_Setting{})
			if err := m.CurrentSetting[len(m.CurrentSetting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F51_Current_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Current_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Current_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopSetting = append(m.LoopSetting, &Afn04_P0_F51_Loop_Setting{})
			if err := m.LoopSetting[len(m.LoopSetting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F51_Loop_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStart", wireType)
			}
			m.TimeStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			m.TimeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeEnd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLowerLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentLowerLimit = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUpperLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentUpperLimit = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F52) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F52: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F52: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeakageLimit = append(m.LeakageLimit, &Afn04_P0_F52_Leakage_Limit{})
			if err := m.LeakageLimit[len(m.LeakageLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F52_Leakage_Limit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leakage_Limit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leakage_Limit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopEnable", wireType)
			}
			m.LoopEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopSwitchout", wireType)
			}
			m.LoopSwitchout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopSwitchout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level1Limit", wireType)
			}
			m.Level1Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level1Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level2Limit", wireType)
			}
			m.Level2Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level2Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level3Limit", wireType)
			}
			m.Level3Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level3Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level4Limit", wireType)
			}
			m.Level4Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level4Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F53) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F53: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F53: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuxThreshold", wireType)
			}
			m.LuxThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LuxThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTick", wireType)
			}
			m.TimeTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F57) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F57: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F57: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeMark", wireType)
			}
			m.RuntimeMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuntimeMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopMark = append(m.LoopMark, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopMark) == 0 {
					m.LoopMark = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopMark = append(m.LoopMark, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopMark", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F65) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F65: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F65: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchinVector = append(m.SwitchinVector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchinVector) == 0 {
					m.SwitchinVector = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchinVector = append(m.SwitchinVector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchinVector", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F66) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F66: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F66: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchinSwitchout = append(m.SwitchinSwitchout, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchinSwitchout) == 0 {
					m.SwitchinSwitchout = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchinSwitchout = append(m.SwitchinSwitchout, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchinSwitchout", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F67) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F67: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F67: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchoutVector = append(m.SwitchoutVector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchoutVector) == 0 {
					m.SwitchoutVector = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchoutVector = append(m.SwitchoutVector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutVector", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F68) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F68: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F68: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitAEnable", wireType)
			}
			m.LowerLimitAEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitAEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitBEnable", wireType)
			}
			m.LowerLimitBEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitBEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitCEnable", wireType)
			}
			m.LowerLimitCEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitCEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitAEnable", wireType)
			}
			m.UpperLimitAEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitAEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitBEnable", wireType)
			}
			m.UpperLimitBEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitBEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitCEnable", wireType)
			}
			m.UpperLimitCEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitCEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitA", wireType)
			}
			m.LowerLimitA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitA |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitB", wireType)
			}
			m.LowerLimitB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimitC", wireType)
			}
			m.LowerLimitC = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerLimitC |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitA", wireType)
			}
			m.UpperLimitA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitA |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitB", wireType)
			}
			m.UpperLimitB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimitC", wireType)
			}
			m.UpperLimitC = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimitC |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchoutCtrl = append(m.SwitchoutCtrl, &Afn05_P0_F1_Switchout_Ctrl{})
			if err := m.SwitchoutCtrl[len(m.SwitchoutCtrl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F1_Switchout_Ctrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Switchout_Ctrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Switchout_Ctrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutNo", wireType)
			}
			m.SwitchoutNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutDo", wireType)
			}
			m.SwitchoutDo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutDo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutTime", wireType)
			}
			m.SwitchoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopMark = append(m.LoopMark, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopMark) == 0 {
					m.LoopMark = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopMark = append(m.LoopMark, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopMark", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F31) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F31: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F31: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnix", wireType)
			}
			m.TimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F57) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F57: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F57: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dismiss", wireType)
			}
			m.Dismiss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dismiss |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn09_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn09_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn09_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareDate", wireType)
			}
			m.SoftwareDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareDate", wireType)
			}
			m.HardwareDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteComVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteComVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteComDate", wireType)
			}
			m.RemoteComDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteComDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalComVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalComVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalComDate", wireType)
			}
			m.LocalComDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalComDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_Pn_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_Pn_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_Pn_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtReport", wireType)
			}
			m.DtReport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtReport |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopData = append(m.LoopData, &Afn0C_Pn_F1_Loop_Data{})
			if err := m.LoopData[len(m.LoopData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_Pn_F1_Loop_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactivePower = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerFactor = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuxValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LuxValue = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Other = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnix", wireType)
			}
			m.TimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhaseData = append(m.PhaseData, &Afn0C_P0_F3_Phase_Data{})
			if err := m.PhaseData[len(m.PhaseData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Frequency = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F3_Phase_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactivePower = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerFactor = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnergy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActiveEnergy = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactiveEnergy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactiveEnergy = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableReport", wireType)
			}
			m.EnableReport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableReport |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchoutStatus = append(m.SwitchoutStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchoutStatus) == 0 {
					m.SwitchoutStatus = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchoutStatus = append(m.SwitchoutStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec1", wireType)
			}
			m.Ec1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2", wireType)
			}
			m.Ec2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopStatus = append(m.LoopStatus, &Afn0C_P0_F9_Loop_Status{})
			if err := m.LoopStatus[len(m.LoopStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F9_Loop_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StNow", wireType)
			}
			m.StNow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StNow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StChanged", wireType)
			}
			m.StChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StChanged |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F18) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F18: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F18: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopPhase", wireType)
			}
			m.LoopPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopPhase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventsDo = append(m.EventsDo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EventsDo) == 0 {
					m.EventsDo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventsDo = append(m.EventsDo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsDo", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F19) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F19: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F19: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LeakageCurrent = append(m.LeakageCurrent, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.LeakageCurrent) == 0 {
					m.LeakageCurrent = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LeakageCurrent = append(m.LeakageCurrent, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lux", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lux = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Temperature = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F25) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F25: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F25: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltageOverLower", wireType)
			}
			m.VoltageOverLower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoltageOverLower |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltageOverUpper", wireType)
			}
			m.VoltageOverUpper = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoltageOverUpper |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeakageBreak = append(m.LeakageBreak, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LeakageBreak) == 0 {
					m.LeakageBreak = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeakageBreak = append(m.LeakageBreak, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageBreak", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0D_Pn_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0d_Pn_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0d_Pn_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			m.DtStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDensity", wireType)
			}
			m.DataDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataDensity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNum", wireType)
			}
			m.DataNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopNo = append(m.LoopNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopNo) == 0 {
					m.LoopNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopNo = append(m.LoopNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopData = append(m.LoopData, &Afn0D_Pn_F1_Loop_Data{})
			if err := m.LoopData[len(m.LoopData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0D_Pn_F1_Loop_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactivePower = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerFactor = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuxValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LuxValue = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Other = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0D_P0_F2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0d_P0_F2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0d_P0_F2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			m.DtStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDensity", wireType)
			}
			m.DataDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataDensity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNum", wireType)
			}
			m.DataNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseAData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhaseAData = append(m.PhaseAData, &Afn0D_P0_F2_Phase_Data{})
			if err := m.PhaseAData[len(m.PhaseAData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseBData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhaseBData = append(m.PhaseBData, &Afn0D_P0_F2_Phase_Data{})
			if err := m.PhaseBData[len(m.PhaseBData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseCData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhaseCData = append(m.PhaseCData, &Afn0D_P0_F2_Phase_Data{})
			if err := m.PhaseCData[len(m.PhaseCData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0D_P0_F2_Phase_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactivePower = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerFactor = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0D_Pn_F3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0d_Pn_F3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0d_Pn_F3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			m.DtStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDensity", wireType)
			}
			m.DataDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataDensity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNum", wireType)
			}
			m.DataNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopNo = append(m.LoopNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopNo) == 0 {
					m.LoopNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgWlst
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopNo = append(m.LoopNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LeakageCurrent = append(m.LeakageCurrent, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgWlst
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgWlst
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgWlst
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.LeakageCurrent) == 0 {
					m.LeakageCurrent = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LeakageCurrent = append(m.LeakageCurrent, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0e_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0e_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pm", wireType)
			}
			m.Pm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcNow", wireType)
			}
			m.EcNow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcNow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventsData = append(m.EventsData, &Afn0E_P0_F1_Events_Data{})
			if err := m.EventsData[len(m.EventsData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Events_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			m.EventTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc04", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc04 == nil {
				m.Erc04 = &Afn0E_P0_F1_Erc04_Data{}
			}
			if err := m.Erc04.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc05", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc05 == nil {
				m.Erc05 = &Afn0E_P0_F1_Erc05_Data{}
			}
			if err := m.Erc05.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc13", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc13 == nil {
				m.Erc13 = &Afn0E_P0_F1_Erc13_Data{}
			}
			if err := m.Erc13.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc20 == nil {
				m.Erc20 = &Afn0E_P0_F1_Erc20_Data{}
			}
			if err := m.Erc20.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc21", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc21 == nil {
				m.Erc21 = &Afn0E_P0_F1_Erc20_Data{}
			}
			if err := m.Erc21.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc22", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc22 == nil {
				m.Erc22 = &Afn0E_P0_F1_Erc22_Data{}
			}
			if err := m.Erc22.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc23", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc23 == nil {
				m.Erc23 = &Afn0E_P0_F1_Erc22_Data{}
			}
			if err := m.Erc23.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc24", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc24 == nil {
				m.Erc24 = &Afn0E_P0_F1_Erc22_Data{}
			}
			if err := m.Erc24.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc25", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc25 == nil {
				m.Erc25 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc25.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc26", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc26 == nil {
				m.Erc26 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc26.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc27", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc27 == nil {
				m.Erc27 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc27.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc28", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc28 == nil {
				m.Erc28 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc28.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc29", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc29 == nil {
				m.Erc29 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc29.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc30", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc30 == nil {
				m.Erc30 = &Afn0E_P0_F1_Erc25_Data{}
			}
			if err := m.Erc30.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc31", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc31 == nil {
				m.Erc31 = &Afn0E_P0_F1_Erc13_Data{}
			}
			if err := m.Erc31.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc32 == nil {
				m.Erc32 = &Afn0E_P0_F1_Erc13_Data{}
			}
			if err := m.Erc32.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc04_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc04_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc04_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiStatus", wireType)
			}
			m.DiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiNo", wireType)
			}
			m.DiNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc05_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc05_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc05_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutNo", wireType)
			}
			m.SwitchoutNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutDo", wireType)
			}
			m.SwitchoutDo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutDo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchoutSource", wireType)
			}
			m.SwitchoutSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchoutSource |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc13_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc13_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc13_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportType", wireType)
			}
			m.ReportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc20_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc20_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc20_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportType", wireType)
			}
			m.ReportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageNo", wireType)
			}
			m.LeakageNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeakageNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageLevel", wireType)
			}
			m.LeakageLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeakageLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeakageCurrent = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc22_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc22_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc22_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportType", wireType)
			}
			m.ReportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc25_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc25_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc25_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportType", wireType)
			}
			m.ReportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn10_P0_F2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn10_P0_F2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn10_P0_F2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RsSetting == nil {
				m.RsSetting = &RS_Setting{}
			}
			if err := m.RsSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WlstMru_9100", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WlstMru_9100 == nil {
				m.WlstMru_9100 = &Afn10_P0_F2_WlstMru_9100{}
			}
			if err := m.WlstMru_9100.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn10_P0_F2_WlstMru_9100) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_mru_9100: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_mru_9100: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterReadingType", wireType)
			}
			m.MeterReadingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterReadingType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterReadingDate", wireType)
			}
			m.MeterReadingDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterReadingDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeterValue = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn10_P0_F9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn10_P0_F9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn10_P0_F9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpIp", wireType)
			}
			m.FtpIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FtpIp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpPort", wireType)
			}
			m.FtpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FtpPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtpUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpPwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtpPwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtpDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtpFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn10_P0_F10) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn10_P0_F10: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn10_P0_F10: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVerOld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVerOld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareDateOld", wireType)
			}
			m.SoftwareDateOld = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareDateOld |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVerNew", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVerNew = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareDateNew", wireType)
			}
			m.SoftwareDateNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareDateNew |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtUpgrade", wireType)
			}
			m.DtUpgrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtUpgrade |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgWlst(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgWlst
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgWlst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgWlst
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgWlst
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgWlst
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgWlst        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgWlst          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgWlst = fmt.Errorf("proto: unexpected end of group")
)
