// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_sh.proto

package wlst_sh

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 串口配置
type RS_Setting struct {
	// 波特率，300,600,1200,2400,4800,7200,9600,19200
	Bps int32 `protobuf:"varint,1,opt,name=bps,proto3" json:"bps,omitempty"`
	// 停止位，0-1位，1-2位
	Stop int32 `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
	// 是否校验0-否，1-是
	Rc int32 `protobuf:"varint,3,opt,name=rc,proto3" json:"rc,omitempty"`
	// 是否奇校验，0-否（偶校验），1-是
	Odd int32 `protobuf:"varint,4,opt,name=odd,proto3" json:"odd,omitempty"`
}

func (m *RS_Setting) Reset()         { *m = RS_Setting{} }
func (m *RS_Setting) String() string { return proto.CompactTextString(m) }
func (*RS_Setting) ProtoMessage()    {}
func (*RS_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{0}
}
func (m *RS_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RS_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RS_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RS_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RS_Setting.Merge(m, src)
}
func (m *RS_Setting) XXX_Size() int {
	return m.Size()
}
func (m *RS_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_RS_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_RS_Setting proto.InternalMessageInfo

func (m *RS_Setting) GetBps() int32 {
	if m != nil {
		return m.Bps
	}
	return 0
}

func (m *RS_Setting) GetStop() int32 {
	if m != nil {
		return m.Stop
	}
	return 0
}

func (m *RS_Setting) GetRc() int32 {
	if m != nil {
		return m.Rc
	}
	return 0
}

func (m *RS_Setting) GetOdd() int32 {
	if m != nil {
		return m.Odd
	}
	return 0
}

// 数据单元标识
type UnitIdentification struct {
	// 信息点DA
	Pn int32 `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	// 信息类DT
	Fn int32 `protobuf:"varint,2,opt,name=fn,proto3" json:"fn,omitempty"`
}

func (m *UnitIdentification) Reset()         { *m = UnitIdentification{} }
func (m *UnitIdentification) String() string { return proto.CompactTextString(m) }
func (*UnitIdentification) ProtoMessage()    {}
func (*UnitIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{1}
}
func (m *UnitIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnitIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitIdentification.Merge(m, src)
}
func (m *UnitIdentification) XXX_Size() int {
	return m.Size()
}
func (m *UnitIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_UnitIdentification proto.InternalMessageInfo

func (m *UnitIdentification) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UnitIdentification) GetFn() int32 {
	if m != nil {
		return m.Fn
	}
	return 0
}

// 数据标识信息
type DataIdentification struct {
	// 数据单元标识
	UintID []*UnitIdentification `protobuf:"bytes,1,rep,name=uintID,proto3" json:"uintID,omitempty"`
	// dir 数据方向,0-下行，1-上行
	Dir int32 `protobuf:"varint,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// 指令有效的分钟数，0-不启用（默认），>0指令在指定的分钟内才有效，超时丢弃（下行有，暂不用）
	Tp int32 `protobuf:"varint,3,opt,name=tp,proto3" json:"tp,omitempty"`
	// 高优先级事件数量（上行才有）
	Ec1 int32 `protobuf:"varint,6,opt,name=ec1,proto3" json:"ec1,omitempty"`
	// 普通优先级事件数量（上行才有）
	Ec2 int32 `protobuf:"varint,7,opt,name=ec2,proto3" json:"ec2,omitempty"`
	// 顺序码0-15
	Seq int32 `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
	// afn 功能码
	Afn int32 `protobuf:"varint,9,opt,name=afn,proto3" json:"afn,omitempty"`
	// 设备地址，1-65534，（65535为广播地址下行不可使用）
	Addr int64 `protobuf:"varint,12,opt,name=addr,proto3" json:"addr,omitempty"`
	// 命令优先级,0-普通，1-高，普通优先级命令先进先出，高优先级命令后进先出
	Sp int32 `protobuf:"varint,13,opt,name=sp,proto3" json:"sp,omitempty"`
}

func (m *DataIdentification) Reset()         { *m = DataIdentification{} }
func (m *DataIdentification) String() string { return proto.CompactTextString(m) }
func (*DataIdentification) ProtoMessage()    {}
func (*DataIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{2}
}
func (m *DataIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataIdentification.Merge(m, src)
}
func (m *DataIdentification) XXX_Size() int {
	return m.Size()
}
func (m *DataIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_DataIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_DataIdentification proto.InternalMessageInfo

func (m *DataIdentification) GetUintID() []*UnitIdentification {
	if m != nil {
		return m.UintID
	}
	return nil
}

func (m *DataIdentification) GetDir() int32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

func (m *DataIdentification) GetTp() int32 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *DataIdentification) GetEc1() int32 {
	if m != nil {
		return m.Ec1
	}
	return 0
}

func (m *DataIdentification) GetEc2() int32 {
	if m != nil {
		return m.Ec2
	}
	return 0
}

func (m *DataIdentification) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DataIdentification) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

func (m *DataIdentification) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *DataIdentification) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

type MsgSHv1 struct {
	// 指令头
	// 依据DataID.unitid的内容读取对应结构体数据
	// 一条指令可能存在多个unitid，因此可以读取多个结构体数据
	// 但是注意：多个unitid必须属于同一个fun和afn的组合
	DataID *DataIdentification `protobuf:"bytes,1,opt,name=DataID,proto3" json:"DataID,omitempty"`
	// 设置参数，所有设置指令均为通用应答
	// 设置事件记录
	Afn04P0F3 *Afn04_P0_F3 `protobuf:"bytes,101,opt,name=afn04_p0_f3,json=afn04P0F3,proto3" json:"afn04_p0_f3,omitempty"`
	// 设置设备基本信息
	Afn04P0F4 *Afn04_P0_F4 `protobuf:"bytes,102,opt,name=afn04_p0_f4,json=afn04P0F4,proto3" json:"afn04_p0_f4,omitempty"`
	// 开关灯时间设置
	Afn04P0F9 *Afn04_P0_F9 `protobuf:"bytes,103,opt,name=afn04_p0_f9,json=afn04P0F9,proto3" json:"afn04_p0_f9,omitempty"`
	// 控制回路设置
	Afn04P0F12 *Afn04_P0_F12 `protobuf:"bytes,104,opt,name=afn04_p0_f12,json=afn04P0F12,proto3" json:"afn04_p0_f12,omitempty"`
	// 状态量设置
	Afn04P0F25 *Afn04_P0_F25 `protobuf:"bytes,105,opt,name=afn04_p0_f25,json=afn04P0F25,proto3" json:"afn04_p0_f25,omitempty"`
	// 模拟量设置
	Afn04P0F26 *Afn04_P0_F26 `protobuf:"bytes,106,opt,name=afn04_p0_f26,json=afn04P0F26,proto3" json:"afn04_p0_f26,omitempty"`
	// 控制,全部使用通用应答
	// 开关灯
	Afn05P0F1 *Afn05_P0_F1 `protobuf:"bytes,201,opt,name=afn05_p0_f1,json=afn05P0F1,proto3" json:"afn05_p0_f1,omitempty"`
	// 对时
	Afn05P0F31 *Afn05_P0_F31 `protobuf:"bytes,202,opt,name=afn05_p0_f31,json=afn05P0F31,proto3" json:"afn05_p0_f31,omitempty"`
	// 读取版本信息
	Afn09P0F1 *Afn09_P0_F1 `protobuf:"bytes,301,opt,name=afn09_p0_f1,json=afn09P0F1,proto3" json:"afn09_p0_f1,omitempty"`
	// 读取参数，此类命令下行无数据结构
	// 查询事件设置
	Afn0AP0F3 *Afn04_P0_F3 `protobuf:"bytes,401,opt,name=afn0a_p0_f3,json=afn0aP0F3,proto3" json:"afn0a_p0_f3,omitempty"`
	// 查询设备基本信息
	Afn0AP0F4 *Afn04_P0_F4 `protobuf:"bytes,402,opt,name=afn0a_p0_f4,json=afn0aP0F4,proto3" json:"afn0a_p0_f4,omitempty"`
	// 查询开关灯时间设置
	Afn0AP0F9 *Afn04_P0_F9 `protobuf:"bytes,403,opt,name=afn0a_p0_f9,json=afn0aP0F9,proto3" json:"afn0a_p0_f9,omitempty"`
	// 查询控制回路设置
	Afn0AP0F12 *Afn04_P0_F12 `protobuf:"bytes,404,opt,name=afn0a_p0_f12,json=afn0aP0F12,proto3" json:"afn0a_p0_f12,omitempty"`
	// 查询状态量设置
	Afn0AP0F25 *Afn04_P0_F25 `protobuf:"bytes,405,opt,name=afn0a_p0_f25,json=afn0aP0F25,proto3" json:"afn0a_p0_f25,omitempty"`
	// 查询模拟量设置
	Afn0AP0F26 *Afn04_P0_F26 `protobuf:"bytes,406,opt,name=afn0a_p0_f26,json=afn0aP0F26,proto3" json:"afn0a_p0_f26,omitempty"`
	// 读取实时数据
	// 读取时钟（上行）
	Afn0CP0F2 *Afn05_P0_F31 `protobuf:"bytes,501,opt,name=afn0c_p0_f2,json=afn0cP0F2,proto3" json:"afn0c_p0_f2,omitempty"`
	// 读取模拟量
	Afn0CP0F11 *Afn0C_P0_F11 `protobuf:"bytes,502,opt,name=afn0c_p0_f11,json=afn0cP0F11,proto3" json:"afn0c_p0_f11,omitempty"`
	// 读取状态量
	Afn0CP0F12 *Afn0C_P0_F12 `protobuf:"bytes,503,opt,name=afn0c_p0_f12,json=afn0cP0F12,proto3" json:"afn0c_p0_f12,omitempty"`
	// 读取事件
	// 重要事件
	Afn0EP0F1 *Afn0E_P0_F1 `protobuf:"bytes,601,opt,name=afn0e_p0_f1,json=afn0eP0F1,proto3" json:"afn0e_p0_f1,omitempty"`
	// 一般事件
	Afn0EP0F2 *Afn0E_P0_F1 `protobuf:"bytes,602,opt,name=afn0e_p0_f2,json=afn0eP0F2,proto3" json:"afn0e_p0_f2,omitempty"`
}

func (m *MsgSHv1) Reset()         { *m = MsgSHv1{} }
func (m *MsgSHv1) String() string { return proto.CompactTextString(m) }
func (*MsgSHv1) ProtoMessage()    {}
func (*MsgSHv1) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{3}
}
func (m *MsgSHv1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSHv1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSHv1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSHv1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSHv1.Merge(m, src)
}
func (m *MsgSHv1) XXX_Size() int {
	return m.Size()
}
func (m *MsgSHv1) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSHv1.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSHv1 proto.InternalMessageInfo

func (m *MsgSHv1) GetDataID() *DataIdentification {
	if m != nil {
		return m.DataID
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F3() *Afn04_P0_F3 {
	if m != nil {
		return m.Afn04P0F3
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F4() *Afn04_P0_F4 {
	if m != nil {
		return m.Afn04P0F4
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F9() *Afn04_P0_F9 {
	if m != nil {
		return m.Afn04P0F9
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F12() *Afn04_P0_F12 {
	if m != nil {
		return m.Afn04P0F12
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F25() *Afn04_P0_F25 {
	if m != nil {
		return m.Afn04P0F25
	}
	return nil
}

func (m *MsgSHv1) GetAfn04P0F26() *Afn04_P0_F26 {
	if m != nil {
		return m.Afn04P0F26
	}
	return nil
}

func (m *MsgSHv1) GetAfn05P0F1() *Afn05_P0_F1 {
	if m != nil {
		return m.Afn05P0F1
	}
	return nil
}

func (m *MsgSHv1) GetAfn05P0F31() *Afn05_P0_F31 {
	if m != nil {
		return m.Afn05P0F31
	}
	return nil
}

func (m *MsgSHv1) GetAfn09P0F1() *Afn09_P0_F1 {
	if m != nil {
		return m.Afn09P0F1
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F3() *Afn04_P0_F3 {
	if m != nil {
		return m.Afn0AP0F3
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F4() *Afn04_P0_F4 {
	if m != nil {
		return m.Afn0AP0F4
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F9() *Afn04_P0_F9 {
	if m != nil {
		return m.Afn0AP0F9
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F12() *Afn04_P0_F12 {
	if m != nil {
		return m.Afn0AP0F12
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F25() *Afn04_P0_F25 {
	if m != nil {
		return m.Afn0AP0F25
	}
	return nil
}

func (m *MsgSHv1) GetAfn0AP0F26() *Afn04_P0_F26 {
	if m != nil {
		return m.Afn0AP0F26
	}
	return nil
}

func (m *MsgSHv1) GetAfn0CP0F2() *Afn05_P0_F31 {
	if m != nil {
		return m.Afn0CP0F2
	}
	return nil
}

func (m *MsgSHv1) GetAfn0CP0F11() *Afn0C_P0_F11 {
	if m != nil {
		return m.Afn0CP0F11
	}
	return nil
}

func (m *MsgSHv1) GetAfn0CP0F12() *Afn0C_P0_F12 {
	if m != nil {
		return m.Afn0CP0F12
	}
	return nil
}

func (m *MsgSHv1) GetAfn0EP0F1() *Afn0E_P0_F1 {
	if m != nil {
		return m.Afn0EP0F1
	}
	return nil
}

func (m *MsgSHv1) GetAfn0EP0F2() *Afn0E_P0_F1 {
	if m != nil {
		return m.Afn0EP0F2
	}
	return nil
}

// 设置参数
// 事件记录
type Afn04_P0_F3 struct {
	// 1	RTU失电记录
	// 2	正常开灯成功记录
	// 3	正常开灯失败记录
	// 4	正常关灯成功记录
	// 5	正常关灯失败记录
	// 6	异常开灯记录
	// 7	异常关灯记录
	// 11	终端通信故障记录
	// 13	节能接触器档位正常切换记录
	// 14	节能接触器档位切换失败记录
	// 上报故障标识，默认填1,6，7
	Report []int32 `protobuf:"varint,1,rep,packed,name=report,proto3" json:"report,omitempty"`
	// 重要故障标识，默认填1,6，7
	Import []int32 `protobuf:"varint,2,rep,packed,name=import,proto3" json:"import,omitempty"`
	// 一般故障标识，默认留空
	Normal []int32 `protobuf:"varint,3,rep,packed,name=normal,proto3" json:"normal,omitempty"`
}

func (m *Afn04_P0_F3) Reset()         { *m = Afn04_P0_F3{} }
func (m *Afn04_P0_F3) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F3) ProtoMessage()    {}
func (*Afn04_P0_F3) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{4}
}
func (m *Afn04_P0_F3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F3.Merge(m, src)
}
func (m *Afn04_P0_F3) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F3) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F3.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F3 proto.InternalMessageInfo

func (m *Afn04_P0_F3) GetReport() []int32 {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *Afn04_P0_F3) GetImport() []int32 {
	if m != nil {
		return m.Import
	}
	return nil
}

func (m *Afn04_P0_F3) GetNormal() []int32 {
	if m != nil {
		return m.Normal
	}
	return nil
}

// 设备基本信息
type Afn04_P0_F4 struct {
	// 控制箱编号
	CboxNumber int64 `protobuf:"varint,1,opt,name=cbox_number,json=cboxNumber,proto3" json:"cbox_number,omitempty"`
	// 终端地址
	TmlPhyid int64 `protobuf:"varint,2,opt,name=tml_phyid,json=tmlPhyid,proto3" json:"tml_phyid,omitempty"`
	// 经度
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 启用单灯，0-不启用，1-启用
	UseSlu int32 `protobuf:"varint,5,opt,name=use_slu,json=useSlu,proto3" json:"use_slu,omitempty"`
	//单灯通讯频点
	SluFreq int32 `protobuf:"varint,6,opt,name=slu_freq,json=sluFreq,proto3" json:"slu_freq,omitempty"`
}

func (m *Afn04_P0_F4) Reset()         { *m = Afn04_P0_F4{} }
func (m *Afn04_P0_F4) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F4) ProtoMessage()    {}
func (*Afn04_P0_F4) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{5}
}
func (m *Afn04_P0_F4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F4.Merge(m, src)
}
func (m *Afn04_P0_F4) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F4) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F4.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F4 proto.InternalMessageInfo

func (m *Afn04_P0_F4) GetCboxNumber() int64 {
	if m != nil {
		return m.CboxNumber
	}
	return 0
}

func (m *Afn04_P0_F4) GetTmlPhyid() int64 {
	if m != nil {
		return m.TmlPhyid
	}
	return 0
}

func (m *Afn04_P0_F4) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Afn04_P0_F4) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Afn04_P0_F4) GetUseSlu() int32 {
	if m != nil {
		return m.UseSlu
	}
	return 0
}

func (m *Afn04_P0_F4) GetSluFreq() int32 {
	if m != nil {
		return m.SluFreq
	}
	return 0
}

// 控制器开关灯时间参数
type Afn04_P0_F9 struct {
	// 起始日期,MMdd格式
	DtStart string `protobuf:"bytes,1,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 数据天数，2月始终按29天算
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	// 每日开关灯时间
	TimeSlot []*Afn04_P0_F9_Time_Slot `protobuf:"bytes,3,rep,name=time_slot,json=timeSlot,proto3" json:"time_slot,omitempty"`
}

func (m *Afn04_P0_F9) Reset()         { *m = Afn04_P0_F9{} }
func (m *Afn04_P0_F9) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F9) ProtoMessage()    {}
func (*Afn04_P0_F9) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{6}
}
func (m *Afn04_P0_F9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F9.Merge(m, src)
}
func (m *Afn04_P0_F9) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F9) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F9.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F9 proto.InternalMessageInfo

func (m *Afn04_P0_F9) GetDtStart() string {
	if m != nil {
		return m.DtStart
	}
	return ""
}

func (m *Afn04_P0_F9) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *Afn04_P0_F9) GetTimeSlot() []*Afn04_P0_F9_Time_Slot {
	if m != nil {
		return m.TimeSlot
	}
	return nil
}

type Afn04_P0_F9_Time_Slot struct {
	// 开灯时间hh*60+mm
	TimeOn int32 `protobuf:"varint,1,opt,name=time_on,json=timeOn,proto3" json:"time_on,omitempty"`
	// 关灯时间hh*60+mm
	TimeOff int32 `protobuf:"varint,2,opt,name=time_off,json=timeOff,proto3" json:"time_off,omitempty"`
}

func (m *Afn04_P0_F9_Time_Slot) Reset()         { *m = Afn04_P0_F9_Time_Slot{} }
func (m *Afn04_P0_F9_Time_Slot) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F9_Time_Slot) ProtoMessage()    {}
func (*Afn04_P0_F9_Time_Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{6, 0}
}
func (m *Afn04_P0_F9_Time_Slot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F9_Time_Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F9_Time_Slot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F9_Time_Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F9_Time_Slot.Merge(m, src)
}
func (m *Afn04_P0_F9_Time_Slot) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F9_Time_Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F9_Time_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F9_Time_Slot proto.InternalMessageInfo

func (m *Afn04_P0_F9_Time_Slot) GetTimeOn() int32 {
	if m != nil {
		return m.TimeOn
	}
	return 0
}

func (m *Afn04_P0_F9_Time_Slot) GetTimeOff() int32 {
	if m != nil {
		return m.TimeOff
	}
	return 0
}

// 控制回路表示
type Afn04_P0_F12 struct {
	// 有效回路序号，1,2,3这样填，最大16
	LoopNo []int32 `protobuf:"varint,1,rep,packed,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 节能档位有效标识，1,2,3这样，最大8
	EngNo []int32 `protobuf:"varint,2,rep,packed,name=eng_no,json=engNo,proto3" json:"eng_no,omitempty"`
	// 节能档位数,1-254,255表示无极调光
	EngLevel int32 `protobuf:"varint,3,opt,name=eng_level,json=engLevel,proto3" json:"eng_level,omitempty"`
}

func (m *Afn04_P0_F12) Reset()         { *m = Afn04_P0_F12{} }
func (m *Afn04_P0_F12) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F12) ProtoMessage()    {}
func (*Afn04_P0_F12) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{7}
}
func (m *Afn04_P0_F12) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F12) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F12.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F12) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F12.Merge(m, src)
}
func (m *Afn04_P0_F12) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F12) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F12.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F12 proto.InternalMessageInfo

func (m *Afn04_P0_F12) GetLoopNo() []int32 {
	if m != nil {
		return m.LoopNo
	}
	return nil
}

func (m *Afn04_P0_F12) GetEngNo() []int32 {
	if m != nil {
		return m.EngNo
	}
	return nil
}

func (m *Afn04_P0_F12) GetEngLevel() int32 {
	if m != nil {
		return m.EngLevel
	}
	return 0
}

// 状态量参数
type Afn04_P0_F25 struct {
	// 起始回路序号
	LoopStart int32 `protobuf:"varint,1,opt,name=loop_start,json=loopStart,proto3" json:"loop_start,omitempty"`
	// 总计读取回路数（上下行）
	LoopNum int32 `protobuf:"varint,2,opt,name=loop_num,json=loopNum,proto3" json:"loop_num,omitempty"`
	// 回路设置
	LoopInfo []*Afn04_P0_F25_Loop_Info `protobuf:"bytes,3,rep,name=loop_info,json=loopInfo,proto3" json:"loop_info,omitempty"`
}

func (m *Afn04_P0_F25) Reset()         { *m = Afn04_P0_F25{} }
func (m *Afn04_P0_F25) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F25) ProtoMessage()    {}
func (*Afn04_P0_F25) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{8}
}
func (m *Afn04_P0_F25) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F25) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F25.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F25) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F25.Merge(m, src)
}
func (m *Afn04_P0_F25) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F25) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F25.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F25 proto.InternalMessageInfo

func (m *Afn04_P0_F25) GetLoopStart() int32 {
	if m != nil {
		return m.LoopStart
	}
	return 0
}

func (m *Afn04_P0_F25) GetLoopNum() int32 {
	if m != nil {
		return m.LoopNum
	}
	return 0
}

func (m *Afn04_P0_F25) GetLoopInfo() []*Afn04_P0_F25_Loop_Info {
	if m != nil {
		return m.LoopInfo
	}
	return nil
}

type Afn04_P0_F25_Loop_Info struct {
	// 回路类型0x00 开关;0x01 失电;0x02 接触器状态;0x03 节能档位状态;0x04
	// 中间继电器状态;0x05 手自动切换;0x06 门磁;0x7 设施物理状态
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 进出线,0-进，1-出
	InOut int32 `protobuf:"varint,2,opt,name=in_out,json=inOut,proto3" json:"in_out,omitempty"`
	// 回路序号，1-127
	Index int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// 相位0x00 未知;0x01 A 相;0x02 B 相;0x03 C 相
	Phase int32 `protobuf:"varint,4,opt,name=phase,proto3" json:"phase,omitempty"`
	// 回路号
	LoopNo int32 `protobuf:"varint,5,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
}

func (m *Afn04_P0_F25_Loop_Info) Reset()         { *m = Afn04_P0_F25_Loop_Info{} }
func (m *Afn04_P0_F25_Loop_Info) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F25_Loop_Info) ProtoMessage()    {}
func (*Afn04_P0_F25_Loop_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{8, 0}
}
func (m *Afn04_P0_F25_Loop_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F25_Loop_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F25_Loop_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F25_Loop_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F25_Loop_Info.Merge(m, src)
}
func (m *Afn04_P0_F25_Loop_Info) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F25_Loop_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F25_Loop_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F25_Loop_Info proto.InternalMessageInfo

func (m *Afn04_P0_F25_Loop_Info) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Afn04_P0_F25_Loop_Info) GetInOut() int32 {
	if m != nil {
		return m.InOut
	}
	return 0
}

func (m *Afn04_P0_F25_Loop_Info) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Afn04_P0_F25_Loop_Info) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *Afn04_P0_F25_Loop_Info) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

// 回路设置/读取
type Afn04_P0_F26 struct {
	// 起始回路序号
	LoopStart int32 `protobuf:"varint,1,opt,name=loop_start,json=loopStart,proto3" json:"loop_start,omitempty"`
	// 总计读取回路数（上下行）
	LoopNum  int32                     `protobuf:"varint,2,opt,name=loop_num,json=loopNum,proto3" json:"loop_num,omitempty"`
	LoopData []*Afn04_P0_F26_Loop_Data `protobuf:"bytes,3,rep,name=loop_data,json=loopData,proto3" json:"loop_data,omitempty"`
}

func (m *Afn04_P0_F26) Reset()         { *m = Afn04_P0_F26{} }
func (m *Afn04_P0_F26) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F26) ProtoMessage()    {}
func (*Afn04_P0_F26) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{9}
}
func (m *Afn04_P0_F26) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F26) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F26.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F26) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F26.Merge(m, src)
}
func (m *Afn04_P0_F26) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F26) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F26.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F26 proto.InternalMessageInfo

func (m *Afn04_P0_F26) GetLoopStart() int32 {
	if m != nil {
		return m.LoopStart
	}
	return 0
}

func (m *Afn04_P0_F26) GetLoopNum() int32 {
	if m != nil {
		return m.LoopNum
	}
	return 0
}

func (m *Afn04_P0_F26) GetLoopData() []*Afn04_P0_F26_Loop_Data {
	if m != nil {
		return m.LoopData
	}
	return nil
}

type Afn04_P0_F26_Loop_Data struct {
	// 0x00 未知;0x01 电压;0x02 电流;0x03 有功功率;0x04 无功功率;
	// 0x05功率因数;0x06 频率;0x07 相角;0x08 照度
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 进出线,0-进，1-出
	InOut int32 `protobuf:"varint,2,opt,name=in_out,json=inOut,proto3" json:"in_out,omitempty"`
	// 回路序号，1-127
	LoopNo int32 `protobuf:"varint,3,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 相位0x00 未知;0x01 A 相;0x02 B 相;0x03 C 相（仅下行）
	Phase int32 `protobuf:"varint,4,opt,name=phase,proto3" json:"phase,omitempty"`
	// 是否启用0x00 不启用;0x01 启用（仅下行）
	Using int32 `protobuf:"varint,5,opt,name=using,proto3" json:"using,omitempty"`
	// 开灯上限（仅下行）
	UplimitOn float64 `protobuf:"fixed64,6,opt,name=uplimit_on,json=uplimitOn,proto3" json:"uplimit_on,omitempty"`
	// 开灯下限（仅下行）
	LowlimitOn float64 `protobuf:"fixed64,7,opt,name=lowlimit_on,json=lowlimitOn,proto3" json:"lowlimit_on,omitempty"`
	// 关灯上限（仅下行）
	UplimitOff float64 `protobuf:"fixed64,8,opt,name=uplimit_off,json=uplimitOff,proto3" json:"uplimit_off,omitempty"`
	// 关灯下限（仅下行）
	LowlimitOff float64 `protobuf:"fixed64,9,opt,name=lowlimit_off,json=lowlimitOff,proto3" json:"lowlimit_off,omitempty"`
	// 数据（仅上行）
	Data float64 `protobuf:"fixed64,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Afn04_P0_F26_Loop_Data) Reset()         { *m = Afn04_P0_F26_Loop_Data{} }
func (m *Afn04_P0_F26_Loop_Data) String() string { return proto.CompactTextString(m) }
func (*Afn04_P0_F26_Loop_Data) ProtoMessage()    {}
func (*Afn04_P0_F26_Loop_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{9, 0}
}
func (m *Afn04_P0_F26_Loop_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn04_P0_F26_Loop_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn04_P0_F26_Loop_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn04_P0_F26_Loop_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn04_P0_F26_Loop_Data.Merge(m, src)
}
func (m *Afn04_P0_F26_Loop_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn04_P0_F26_Loop_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn04_P0_F26_Loop_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn04_P0_F26_Loop_Data proto.InternalMessageInfo

func (m *Afn04_P0_F26_Loop_Data) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetInOut() int32 {
	if m != nil {
		return m.InOut
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetUsing() int32 {
	if m != nil {
		return m.Using
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetUplimitOn() float64 {
	if m != nil {
		return m.UplimitOn
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetLowlimitOn() float64 {
	if m != nil {
		return m.LowlimitOn
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetUplimitOff() float64 {
	if m != nil {
		return m.UplimitOff
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetLowlimitOff() float64 {
	if m != nil {
		return m.LowlimitOff
	}
	return 0
}

func (m *Afn04_P0_F26_Loop_Data) GetData() float64 {
	if m != nil {
		return m.Data
	}
	return 0
}

// 开关节能
type Afn05_P0_F1 struct {
	// 控制类型 0x00 开,0x01 关,0x02 节能开关调档
	CtlType int32 `protobuf:"varint,1,opt,name=ctl_type,json=ctlType,proto3" json:"ctl_type,omitempty"`
	// 节能档位，0-255
	EngLevel int32 `protobuf:"varint,2,opt,name=eng_level,json=engLevel,proto3" json:"eng_level,omitempty"`
}

func (m *Afn05_P0_F1) Reset()         { *m = Afn05_P0_F1{} }
func (m *Afn05_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F1) ProtoMessage()    {}
func (*Afn05_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{10}
}
func (m *Afn05_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F1.Merge(m, src)
}
func (m *Afn05_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F1 proto.InternalMessageInfo

func (m *Afn05_P0_F1) GetCtlType() int32 {
	if m != nil {
		return m.CtlType
	}
	return 0
}

func (m *Afn05_P0_F1) GetEngLevel() int32 {
	if m != nil {
		return m.EngLevel
	}
	return 0
}

// 对时
type Afn05_P0_F31 struct {
	// 时间，unix时间戳，精确到秒
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Afn05_P0_F31) Reset()         { *m = Afn05_P0_F31{} }
func (m *Afn05_P0_F31) String() string { return proto.CompactTextString(m) }
func (*Afn05_P0_F31) ProtoMessage()    {}
func (*Afn05_P0_F31) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{11}
}
func (m *Afn05_P0_F31) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn05_P0_F31) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn05_P0_F31.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn05_P0_F31) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn05_P0_F31.Merge(m, src)
}
func (m *Afn05_P0_F31) XXX_Size() int {
	return m.Size()
}
func (m *Afn05_P0_F31) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn05_P0_F31.DiscardUnknown(m)
}

var xxx_messageInfo_Afn05_P0_F31 proto.InternalMessageInfo

func (m *Afn05_P0_F31) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 招测终端版本
type Afn09_P0_F1 struct {
	// 厂商代号
	CompanyCode string `protobuf:"bytes,1,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`
	// 厂商设备编号
	CompanyDevCode string `protobuf:"bytes,2,opt,name=company_dev_code,json=companyDevCode,proto3" json:"company_dev_code,omitempty"`
	// 设备软件版本
	DevSoftVer string `protobuf:"bytes,3,opt,name=dev_soft_ver,json=devSoftVer,proto3" json:"dev_soft_ver,omitempty"`
	// 终端软件发布日期
	DevSoftDate string `protobuf:"bytes,4,opt,name=dev_soft_date,json=devSoftDate,proto3" json:"dev_soft_date,omitempty"`
	// 终端配置容量 信息码
	DevCapacity string `protobuf:"bytes,5,opt,name=dev_capacity,json=devCapacity,proto3" json:"dev_capacity,omitempty"`
	// 终端通讯协议版本
	DevComVer string `protobuf:"bytes,6,opt,name=dev_com_ver,json=devComVer,proto3" json:"dev_com_ver,omitempty"`
	// 终端硬件版本
	DevHardVer string `protobuf:"bytes,7,opt,name=dev_hard_ver,json=devHardVer,proto3" json:"dev_hard_ver,omitempty"`
	// 载波芯片型号
	ChipModule string `protobuf:"bytes,8,opt,name=chip_module,json=chipModule,proto3" json:"chip_module,omitempty"`
	// 终端硬件发布日期
	DevHardDate string `protobuf:"bytes,9,opt,name=dev_hard_date,json=devHardDate,proto3" json:"dev_hard_date,omitempty"`
	// 是否有中间继电器0x00 否;0x01 是
	ContainRelay int32 `protobuf:"varint,10,opt,name=contain_relay,json=containRelay,proto3" json:"contain_relay,omitempty"`
	//终端设备类型0x00 未分类;0x01 RTU;0x02 集中器;0x03 一体化终端
	DevModule int32 `protobuf:"varint,11,opt,name=dev_module,json=devModule,proto3" json:"dev_module,omitempty"`
	// 终端出厂日期
	DevManufactureDate string `protobuf:"bytes,12,opt,name=dev_manufacture_date,json=devManufactureDate,proto3" json:"dev_manufacture_date,omitempty"`
}

func (m *Afn09_P0_F1) Reset()         { *m = Afn09_P0_F1{} }
func (m *Afn09_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn09_P0_F1) ProtoMessage()    {}
func (*Afn09_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{12}
}
func (m *Afn09_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn09_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn09_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn09_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn09_P0_F1.Merge(m, src)
}
func (m *Afn09_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn09_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn09_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn09_P0_F1 proto.InternalMessageInfo

func (m *Afn09_P0_F1) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

func (m *Afn09_P0_F1) GetCompanyDevCode() string {
	if m != nil {
		return m.CompanyDevCode
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevSoftVer() string {
	if m != nil {
		return m.DevSoftVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevSoftDate() string {
	if m != nil {
		return m.DevSoftDate
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevCapacity() string {
	if m != nil {
		return m.DevCapacity
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevComVer() string {
	if m != nil {
		return m.DevComVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevHardVer() string {
	if m != nil {
		return m.DevHardVer
	}
	return ""
}

func (m *Afn09_P0_F1) GetChipModule() string {
	if m != nil {
		return m.ChipModule
	}
	return ""
}

func (m *Afn09_P0_F1) GetDevHardDate() string {
	if m != nil {
		return m.DevHardDate
	}
	return ""
}

func (m *Afn09_P0_F1) GetContainRelay() int32 {
	if m != nil {
		return m.ContainRelay
	}
	return 0
}

func (m *Afn09_P0_F1) GetDevModule() int32 {
	if m != nil {
		return m.DevModule
	}
	return 0
}

func (m *Afn09_P0_F1) GetDevManufactureDate() string {
	if m != nil {
		return m.DevManufactureDate
	}
	return ""
}

// 模拟量查询
type Afn0C_P0_F11 struct {
	// 起始回路序号(上下行)
	LoopStart int32 `protobuf:"varint,1,opt,name=loop_start,json=loopStart,proto3" json:"loop_start,omitempty"`
	// 总计读取回路数（上下行）
	LoopNum int32 `protobuf:"varint,2,opt,name=loop_num,json=loopNum,proto3" json:"loop_num,omitempty"`
	// 回路数据（上行）
	LoopData []*Afn0C_P0_F11_Loop_Data `protobuf:"bytes,3,rep,name=loop_data,json=loopData,proto3" json:"loop_data,omitempty"`
}

func (m *Afn0C_P0_F11) Reset()         { *m = Afn0C_P0_F11{} }
func (m *Afn0C_P0_F11) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F11) ProtoMessage()    {}
func (*Afn0C_P0_F11) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{13}
}
func (m *Afn0C_P0_F11) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F11) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F11.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F11) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F11.Merge(m, src)
}
func (m *Afn0C_P0_F11) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F11) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F11.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F11 proto.InternalMessageInfo

func (m *Afn0C_P0_F11) GetLoopStart() int32 {
	if m != nil {
		return m.LoopStart
	}
	return 0
}

func (m *Afn0C_P0_F11) GetLoopNum() int32 {
	if m != nil {
		return m.LoopNum
	}
	return 0
}

func (m *Afn0C_P0_F11) GetLoopData() []*Afn0C_P0_F11_Loop_Data {
	if m != nil {
		return m.LoopData
	}
	return nil
}

type Afn0C_P0_F11_Loop_Data struct {
	// 回路序号
	LoopNo int32 `protobuf:"varint,1,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 回路类型
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 状态
	Data float64 `protobuf:"fixed64,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Afn0C_P0_F11_Loop_Data) Reset()         { *m = Afn0C_P0_F11_Loop_Data{} }
func (m *Afn0C_P0_F11_Loop_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F11_Loop_Data) ProtoMessage()    {}
func (*Afn0C_P0_F11_Loop_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{13, 0}
}
func (m *Afn0C_P0_F11_Loop_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F11_Loop_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F11_Loop_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F11_Loop_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F11_Loop_Data.Merge(m, src)
}
func (m *Afn0C_P0_F11_Loop_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F11_Loop_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F11_Loop_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F11_Loop_Data proto.InternalMessageInfo

func (m *Afn0C_P0_F11_Loop_Data) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn0C_P0_F11_Loop_Data) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Afn0C_P0_F11_Loop_Data) GetData() float64 {
	if m != nil {
		return m.Data
	}
	return 0
}

// 状态量查询
type Afn0C_P0_F12 struct {
	// 起始回路序号(上下行)
	LoopStart int32 `protobuf:"varint,1,opt,name=loop_start,json=loopStart,proto3" json:"loop_start,omitempty"`
	// 总计读取回路数（上下行）
	LoopNum int32 `protobuf:"varint,2,opt,name=loop_num,json=loopNum,proto3" json:"loop_num,omitempty"`
	// 回路数据（上行）
	LoopStatus []*Afn0C_P0_F12_Loop_Status `protobuf:"bytes,3,rep,name=loop_status,json=loopStatus,proto3" json:"loop_status,omitempty"`
}

func (m *Afn0C_P0_F12) Reset()         { *m = Afn0C_P0_F12{} }
func (m *Afn0C_P0_F12) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F12) ProtoMessage()    {}
func (*Afn0C_P0_F12) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{14}
}
func (m *Afn0C_P0_F12) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F12) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F12.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F12) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F12.Merge(m, src)
}
func (m *Afn0C_P0_F12) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F12) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F12.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F12 proto.InternalMessageInfo

func (m *Afn0C_P0_F12) GetLoopStart() int32 {
	if m != nil {
		return m.LoopStart
	}
	return 0
}

func (m *Afn0C_P0_F12) GetLoopNum() int32 {
	if m != nil {
		return m.LoopNum
	}
	return 0
}

func (m *Afn0C_P0_F12) GetLoopStatus() []*Afn0C_P0_F12_Loop_Status {
	if m != nil {
		return m.LoopStatus
	}
	return nil
}

type Afn0C_P0_F12_Loop_Status struct {
	// 回路序号
	LoopNo int32 `protobuf:"varint,1,opt,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	// 状态
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Afn0C_P0_F12_Loop_Status) Reset()         { *m = Afn0C_P0_F12_Loop_Status{} }
func (m *Afn0C_P0_F12_Loop_Status) String() string { return proto.CompactTextString(m) }
func (*Afn0C_P0_F12_Loop_Status) ProtoMessage()    {}
func (*Afn0C_P0_F12_Loop_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{14, 0}
}
func (m *Afn0C_P0_F12_Loop_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0C_P0_F12_Loop_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0C_P0_F12_Loop_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0C_P0_F12_Loop_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0C_P0_F12_Loop_Status.Merge(m, src)
}
func (m *Afn0C_P0_F12_Loop_Status) XXX_Size() int {
	return m.Size()
}
func (m *Afn0C_P0_F12_Loop_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0C_P0_F12_Loop_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0C_P0_F12_Loop_Status proto.InternalMessageInfo

func (m *Afn0C_P0_F12_Loop_Status) GetLoopNo() int32 {
	if m != nil {
		return m.LoopNo
	}
	return 0
}

func (m *Afn0C_P0_F12_Loop_Status) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 事件查询
// ERC1 RTU 失电记录（done）对应我公司设备故障2终端断电
// ERC2 正常开灯成功记录
// ERC3 正常开灯失败记录
// ERC4 正常关灯成功记录
// ERC5 正常关灯失败记录
// ERC6 异常开灯记录（done）对应我公司设备故障38接触器未释放
// ERC7 异常关灯记录（done）对应我公司设备故障40接触器断路
// ERC8 模拟量越上限(关灯时间内)记录
// ERC9 模拟量越上限(开灯时间内)记录
// ERC10 模拟量越下限(开灯时间内)记录
// ERC11 终端  通信故障记录
// ERC12 集中器路由板故障记录
// ERC13 节能接触器档位正常切换记录
// ERC14 节能接触器档位切换失败记录
// ERC15 单灯正常开灯记录
// ERC16 单灯正常关灯记录
// ERC17 单灯异常开灯记录
// ERC18 单灯异常关灯记录
// ERC19 单灯电流过大记录
// ERC20 单灯电流过小记录
// ERC21 单灯电容故障记录
// ERC22 单灯灯具故障记录
// ERC23 单灯熔丝故障记录
// ERC24 单灯通信故障记录
// ERC25 设施物理状态报警记录
// 请求事件
type Afn0E_P0_F1 struct {
	// pn应大于pm
	// 事件起始指针（上下行）0-254
	Pm int32 `protobuf:"varint,1,opt,name=pm,proto3" json:"pm,omitempty"`
	// 事件结束指针（上下行）1-255
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	// 以下为上行填充字段
	// 事件信息
	EventsData []*Afn0E_P0_F1_Events_Data `protobuf:"bytes,5,rep,name=events_data,json=eventsData,proto3" json:"events_data,omitempty"`
}

func (m *Afn0E_P0_F1) Reset()         { *m = Afn0E_P0_F1{} }
func (m *Afn0E_P0_F1) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1) ProtoMessage()    {}
func (*Afn0E_P0_F1) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{15}
}
func (m *Afn0E_P0_F1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1.Merge(m, src)
}
func (m *Afn0E_P0_F1) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1 proto.InternalMessageInfo

func (m *Afn0E_P0_F1) GetPm() int32 {
	if m != nil {
		return m.Pm
	}
	return 0
}

func (m *Afn0E_P0_F1) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *Afn0E_P0_F1) GetEventsData() []*Afn0E_P0_F1_Events_Data {
	if m != nil {
		return m.EventsData
	}
	return nil
}

type Afn0E_P0_F1_Events_Data struct {
	ErcId int32 `protobuf:"varint,1,opt,name=erc_id,json=ercId,proto3" json:"erc_id,omitempty"`
	// 发生时间
	DtReport int64                   `protobuf:"varint,2,opt,name=dt_report,json=dtReport,proto3" json:"dt_report,omitempty"`
	Erc01    *Afn0E_P0_F1_Erc01_Data `protobuf:"bytes,11,opt,name=erc01,proto3" json:"erc01,omitempty"`
	Erc06    *Afn0E_P0_F1_Erc06_Data `protobuf:"bytes,12,opt,name=erc06,proto3" json:"erc06,omitempty"`
	Erc07    *Afn0E_P0_F1_Erc06_Data `protobuf:"bytes,13,opt,name=erc07,proto3" json:"erc07,omitempty"`
	Erc11    *Afn0E_P0_F1_Erc01_Data `protobuf:"bytes,14,opt,name=erc11,proto3" json:"erc11,omitempty"`
	Erc12    *Afn0E_P0_F1_Erc01_Data `protobuf:"bytes,15,opt,name=erc12,proto3" json:"erc12,omitempty"`
	Erc14    *Afn0E_P0_F1_Erc14_Data `protobuf:"bytes,16,opt,name=erc14,proto3" json:"erc14,omitempty"`
	Erc15    *Afn0E_P0_F1_Erc14_Data `protobuf:"bytes,17,opt,name=erc15,proto3" json:"erc15,omitempty"`
}

func (m *Afn0E_P0_F1_Events_Data) Reset()         { *m = Afn0E_P0_F1_Events_Data{} }
func (m *Afn0E_P0_F1_Events_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Events_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Events_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{15, 0}
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Events_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Events_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Events_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Events_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Events_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Events_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Events_Data) GetErcId() int32 {
	if m != nil {
		return m.ErcId
	}
	return 0
}

func (m *Afn0E_P0_F1_Events_Data) GetDtReport() int64 {
	if m != nil {
		return m.DtReport
	}
	return 0
}

func (m *Afn0E_P0_F1_Events_Data) GetErc01() *Afn0E_P0_F1_Erc01_Data {
	if m != nil {
		return m.Erc01
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc06() *Afn0E_P0_F1_Erc06_Data {
	if m != nil {
		return m.Erc06
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc07() *Afn0E_P0_F1_Erc06_Data {
	if m != nil {
		return m.Erc07
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc11() *Afn0E_P0_F1_Erc01_Data {
	if m != nil {
		return m.Erc11
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc12() *Afn0E_P0_F1_Erc01_Data {
	if m != nil {
		return m.Erc12
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc14() *Afn0E_P0_F1_Erc14_Data {
	if m != nil {
		return m.Erc14
	}
	return nil
}

func (m *Afn0E_P0_F1_Events_Data) GetErc15() *Afn0E_P0_F1_Erc14_Data {
	if m != nil {
		return m.Erc15
	}
	return nil
}

type Afn0E_P0_F1_Erc01_Data struct {
	// 记录类型，0x00 事件恢复;0x01 事件开始
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Afn0E_P0_F1_Erc01_Data) Reset()         { *m = Afn0E_P0_F1_Erc01_Data{} }
func (m *Afn0E_P0_F1_Erc01_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc01_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc01_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{15, 1}
}
func (m *Afn0E_P0_F1_Erc01_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc01_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc01_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc01_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc01_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc01_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc01_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc01_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc01_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc01_Data) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Afn0E_P0_F1_Erc06_Data struct {
	// 记录类型，0x00 事件恢复;0x01 事件开始
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 异常开灯原因:0x00 未知;0x01 调试
	Why int32 `protobuf:"varint,2,opt,name=why,proto3" json:"why,omitempty"`
}

func (m *Afn0E_P0_F1_Erc06_Data) Reset()         { *m = Afn0E_P0_F1_Erc06_Data{} }
func (m *Afn0E_P0_F1_Erc06_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc06_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc06_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{15, 2}
}
func (m *Afn0E_P0_F1_Erc06_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc06_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc06_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc06_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc06_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc06_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc06_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc06_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc06_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc06_Data) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc06_Data) GetWhy() int32 {
	if m != nil {
		return m.Why
	}
	return 0
}

type Afn0E_P0_F1_Erc14_Data struct {
	D1 int32 `protobuf:"varint,1,opt,name=d1,proto3" json:"d1,omitempty"`
	D2 int32 `protobuf:"varint,2,opt,name=d2,proto3" json:"d2,omitempty"`
	D3 int32 `protobuf:"varint,3,opt,name=d3,proto3" json:"d3,omitempty"`
}

func (m *Afn0E_P0_F1_Erc14_Data) Reset()         { *m = Afn0E_P0_F1_Erc14_Data{} }
func (m *Afn0E_P0_F1_Erc14_Data) String() string { return proto.CompactTextString(m) }
func (*Afn0E_P0_F1_Erc14_Data) ProtoMessage()    {}
func (*Afn0E_P0_F1_Erc14_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_26356b1ce2c0395d, []int{15, 3}
}
func (m *Afn0E_P0_F1_Erc14_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Afn0E_P0_F1_Erc14_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Afn0E_P0_F1_Erc14_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Afn0E_P0_F1_Erc14_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Afn0E_P0_F1_Erc14_Data.Merge(m, src)
}
func (m *Afn0E_P0_F1_Erc14_Data) XXX_Size() int {
	return m.Size()
}
func (m *Afn0E_P0_F1_Erc14_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Afn0E_P0_F1_Erc14_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Afn0E_P0_F1_Erc14_Data proto.InternalMessageInfo

func (m *Afn0E_P0_F1_Erc14_Data) GetD1() int32 {
	if m != nil {
		return m.D1
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc14_Data) GetD2() int32 {
	if m != nil {
		return m.D2
	}
	return 0
}

func (m *Afn0E_P0_F1_Erc14_Data) GetD3() int32 {
	if m != nil {
		return m.D3
	}
	return 0
}

func init() {
	proto.RegisterType((*RS_Setting)(nil), "wlst.sh.RS_Setting")
	proto.RegisterType((*UnitIdentification)(nil), "wlst.sh.UnitIdentification")
	proto.RegisterType((*DataIdentification)(nil), "wlst.sh.DataIdentification")
	proto.RegisterType((*MsgSHv1)(nil), "wlst.sh.MsgSHv1")
	proto.RegisterType((*Afn04_P0_F3)(nil), "wlst.sh.Afn04_P0_F3")
	proto.RegisterType((*Afn04_P0_F4)(nil), "wlst.sh.Afn04_P0_F4")
	proto.RegisterType((*Afn04_P0_F9)(nil), "wlst.sh.Afn04_P0_F9")
	proto.RegisterType((*Afn04_P0_F9_Time_Slot)(nil), "wlst.sh.Afn04_P0_F9.Time_Slot")
	proto.RegisterType((*Afn04_P0_F12)(nil), "wlst.sh.Afn04_P0_F12")
	proto.RegisterType((*Afn04_P0_F25)(nil), "wlst.sh.Afn04_P0_F25")
	proto.RegisterType((*Afn04_P0_F25_Loop_Info)(nil), "wlst.sh.Afn04_P0_F25.Loop_Info")
	proto.RegisterType((*Afn04_P0_F26)(nil), "wlst.sh.Afn04_P0_F26")
	proto.RegisterType((*Afn04_P0_F26_Loop_Data)(nil), "wlst.sh.Afn04_P0_F26.Loop_Data")
	proto.RegisterType((*Afn05_P0_F1)(nil), "wlst.sh.Afn05_P0_F1")
	proto.RegisterType((*Afn05_P0_F31)(nil), "wlst.sh.Afn05_P0_F31")
	proto.RegisterType((*Afn09_P0_F1)(nil), "wlst.sh.Afn09_P0_F1")
	proto.RegisterType((*Afn0C_P0_F11)(nil), "wlst.sh.Afn0c_P0_F11")
	proto.RegisterType((*Afn0C_P0_F11_Loop_Data)(nil), "wlst.sh.Afn0c_P0_F11.Loop_Data")
	proto.RegisterType((*Afn0C_P0_F12)(nil), "wlst.sh.Afn0c_P0_F12")
	proto.RegisterType((*Afn0C_P0_F12_Loop_Status)(nil), "wlst.sh.Afn0c_P0_F12.Loop_Status")
	proto.RegisterType((*Afn0E_P0_F1)(nil), "wlst.sh.Afn0e_P0_F1")
	proto.RegisterType((*Afn0E_P0_F1_Events_Data)(nil), "wlst.sh.Afn0e_P0_F1.Events_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc01_Data)(nil), "wlst.sh.Afn0e_P0_F1.Erc01_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc06_Data)(nil), "wlst.sh.Afn0e_P0_F1.Erc06_Data")
	proto.RegisterType((*Afn0E_P0_F1_Erc14_Data)(nil), "wlst.sh.Afn0e_P0_F1.Erc14_Data")
}

func init() { proto.RegisterFile("msg_sh.proto", fileDescriptor_26356b1ce2c0395d) }

var fileDescriptor_26356b1ce2c0395d = []byte{
	// 1693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x8f, 0xdc, 0x48,
	0x15, 0x8f, 0xdb, 0xe9, 0xee, 0xe9, 0xea, 0x49, 0x18, 0xac, 0x2c, 0x5b, 0xe9, 0xc0, 0xec, 0xac,
	0xb9, 0xcc, 0x69, 0x34, 0x76, 0xff, 0x09, 0x23, 0x56, 0xa0, 0xcd, 0xce, 0x46, 0x89, 0x94, 0xcd,
	0x44, 0xee, 0xc0, 0xd5, 0xaa, 0xb8, 0xca, 0xdd, 0x46, 0xfe, 0x17, 0xbb, 0xdc, 0xb3, 0x2d, 0x8e,
	0x7c, 0x01, 0x60, 0x81, 0x13, 0x07, 0xbe, 0x00, 0x1f, 0x00, 0x4e, 0x88, 0x13, 0x8b, 0x38, 0xec,
	0x01, 0x89, 0x3f, 0x27, 0x94, 0x7c, 0x06, 0xe0, 0x8a, 0xde, 0xab, 0x72, 0xb7, 0x7b, 0xb6, 0x67,
	0x26, 0x11, 0x70, 0xab, 0x7a, 0xef, 0xfd, 0xea, 0xfd, 0xf9, 0xd5, 0xab, 0x2a, 0x9b, 0xec, 0x26,
	0xe5, 0xcc, 0x2f, 0xe7, 0x47, 0x79, 0x91, 0xc9, 0xcc, 0xea, 0x9e, 0xc7, 0xa5, 0x3c, 0x2a, 0xe7,
	0xf6, 0x73, 0x42, 0xbc, 0xa9, 0x3f, 0x15, 0x52, 0x46, 0xe9, 0xcc, 0xda, 0x23, 0xe6, 0x8b, 0xbc,
	0xa4, 0xc6, 0x81, 0x71, 0xd8, 0xf6, 0x60, 0x68, 0x59, 0xe4, 0x66, 0x29, 0xb3, 0x9c, 0xb6, 0x50,
	0x84, 0x63, 0xeb, 0x36, 0x69, 0x15, 0x01, 0x35, 0x51, 0xd2, 0x2a, 0x02, 0x40, 0x65, 0x9c, 0xd3,
	0x9b, 0x0a, 0x95, 0x71, 0x6e, 0x8f, 0x88, 0xf5, 0xbd, 0x34, 0x92, 0x8f, 0xb9, 0x48, 0x65, 0x14,
	0x46, 0x01, 0x93, 0x51, 0x96, 0x02, 0x2e, 0x4f, 0xf5, 0xe2, 0xad, 0x1c, 0xe7, 0x61, 0xaa, 0x57,
	0x6e, 0x85, 0xa9, 0xfd, 0x17, 0x83, 0x58, 0xa7, 0x4c, 0xb2, 0x0b, 0xb0, 0x21, 0xe9, 0x54, 0x51,
	0x2a, 0x1f, 0x9f, 0x52, 0xe3, 0xc0, 0x3c, 0xec, 0xbb, 0xf7, 0x8e, 0x74, 0xf0, 0x47, 0x5f, 0xf6,
	0xe1, 0x69, 0x53, 0x88, 0x89, 0x47, 0x85, 0x5e, 0x1c, 0x86, 0xe0, 0x4d, 0xe6, 0x75, 0xd4, 0x32,
	0x07, 0x0b, 0x11, 0x38, 0xb4, 0xa3, 0x2c, 0x44, 0xe0, 0x28, 0x89, 0x4b, 0xbb, 0xb5, 0xc4, 0x05,
	0x49, 0x29, 0x5e, 0xd2, 0x1d, 0x25, 0x29, 0xc5, 0x4b, 0x90, 0xb0, 0x30, 0xa5, 0x3d, 0x25, 0x61,
	0x61, 0x0a, 0x15, 0x62, 0x9c, 0x17, 0x74, 0xf7, 0xc0, 0x38, 0x34, 0x3d, 0x1c, 0x83, 0xaf, 0x32,
	0xa7, 0xb7, 0x94, 0xaf, 0x32, 0xb7, 0x7f, 0xd5, 0x23, 0xdd, 0x4f, 0xca, 0xd9, 0xf4, 0xd1, 0xc2,
	0x81, 0x74, 0x30, 0xc9, 0x53, 0xac, 0x44, 0x33, 0x9d, 0x2f, 0xe7, 0xee, 0x69, 0x53, 0x6b, 0x44,
	0xfa, 0x2c, 0x4c, 0x8f, 0x47, 0x7e, 0x7e, 0xec, 0x87, 0x43, 0x2a, 0x10, 0x79, 0x67, 0x85, 0xfc,
	0x10, 0x75, 0xcf, 0x8e, 0xfd, 0x87, 0x43, 0xaf, 0x87, 0x86, 0xcf, 0x8e, 0x1f, 0x0e, 0x37, 0x51,
	0x23, 0x1a, 0x5e, 0x8a, 0x1a, 0xad, 0x51, 0xa3, 0x4d, 0xd4, 0x09, 0x9d, 0x5d, 0x8a, 0x3a, 0x59,
	0xa3, 0x4e, 0xac, 0xfb, 0x64, 0x77, 0x8d, 0x72, 0x5c, 0x3a, 0x47, 0xd8, 0x3b, 0x5b, 0x60, 0x8e,
	0xeb, 0x91, 0x1a, 0xe7, 0xb8, 0x9b, 0x40, 0x77, 0x4c, 0xa3, 0x4b, 0x81, 0xee, 0x78, 0x0d, 0x74,
	0xc7, 0x17, 0x80, 0x13, 0xfa, 0x83, 0xcb, 0x81, 0x93, 0x06, 0x70, 0x62, 0x8d, 0x55, 0x82, 0x63,
	0x15, 0x2a, 0xfd, 0xdc, 0xd8, 0x92, 0xe1, 0x58, 0x85, 0xaa, 0x32, 0x1c, 0x43, 0xa4, 0xd6, 0xb7,
	0x94, 0x3f, 0x05, 0x1b, 0x3a, 0xf4, 0x8f, 0xc6, 0x16, 0x87, 0x0a, 0x37, 0x74, 0x94, 0x43, 0x00,
	0x0e, 0x9d, 0xda, 0xe1, 0x89, 0x76, 0xf8, 0xeb, 0xd6, 0x16, 0x87, 0x27, 0x4d, 0x87, 0x27, 0xe8,
	0x50, 0xc3, 0x98, 0x26, 0xfd, 0x27, 0xe6, 0x75, 0xac, 0x33, 0x64, 0x7d, 0x03, 0x36, 0xa2, 0x3f,
	0x35, 0xaf, 0xa3, 0x9d, 0x21, 0xed, 0x1b, 0xb0, 0x13, 0xfa, 0x99, 0x79, 0x1d, 0xef, 0x0c, 0x79,
	0xd7, 0x55, 0x61, 0x35, 0xef, 0x3f, 0x33, 0xaf, 0x25, 0x9e, 0x29, 0xe2, 0x37, 0x90, 0xee, 0x98,
	0xfe, 0xdc, 0xbc, 0x96, 0x79, 0xa6, 0x98, 0xdf, 0x44, 0x4e, 0xe8, 0x2f, 0xcc, 0x6b, 0xa9, 0x67,
	0x8a, 0xfa, 0x89, 0x4a, 0x32, 0x50, 0x48, 0xfa, 0x4f, 0xf3, 0x2a, 0x0a, 0x31, 0xcb, 0x00, 0x80,
	0xb5, 0x47, 0x85, 0x73, 0x1c, 0xfa, 0xaf, 0x6d, 0xc0, 0x40, 0x65, 0xa9, 0xb9, 0x07, 0xa0, 0xe3,
	0x5c, 0x40, 0xba, 0xf4, 0xdf, 0x57, 0x20, 0xdd, 0x06, 0xd2, 0xad, 0x09, 0x11, 0x7a, 0xd7, 0xfc,
	0xed, 0xe6, 0x16, 0x42, 0x44, 0x73, 0xd7, 0x88, 0xe6, 0xae, 0x11, 0x3a, 0xc5, 0xbf, 0xbf, 0x11,
	0xcc, 0xb5, 0x19, 0xe9, 0x37, 0xf6, 0x93, 0x35, 0x20, 0x9d, 0x42, 0xe4, 0x59, 0x21, 0xf1, 0xd0,
	0x6d, 0x3f, 0x68, 0xed, 0x19, 0x9e, 0x96, 0x80, 0x2e, 0x4a, 0x50, 0xd7, 0x5a, 0xeb, 0x94, 0x04,
	0x74, 0x69, 0x56, 0x24, 0x2c, 0xa6, 0xe6, 0x5a, 0xa7, 0x24, 0xf6, 0x6f, 0x8c, 0xa6, 0x8f, 0x91,
	0xf5, 0x1e, 0xe9, 0x07, 0x2f, 0xb2, 0x4f, 0xfd, 0xb4, 0x4a, 0x5e, 0x88, 0x02, 0x8f, 0x43, 0xd3,
	0x23, 0x20, 0x7a, 0x8a, 0x12, 0xeb, 0x1e, 0xe9, 0xc9, 0x24, 0xf6, 0xf3, 0xf9, 0x32, 0xe2, 0x78,
	0x94, 0x9b, 0xde, 0x8e, 0x4c, 0xe2, 0x67, 0x30, 0xb7, 0xbe, 0x4e, 0x7a, 0x71, 0x96, 0xce, 0x22,
	0x59, 0x71, 0x81, 0xc7, 0xba, 0xe1, 0xad, 0x05, 0xd6, 0x80, 0xec, 0xc4, 0x4c, 0x2a, 0xe5, 0x4d,
	0x54, 0xae, 0xe6, 0xd6, 0xbb, 0xa4, 0x5b, 0x95, 0xc2, 0x2f, 0xe3, 0x8a, 0xb6, 0xf1, 0x88, 0xee,
	0x54, 0xa5, 0x98, 0xc6, 0x95, 0x75, 0x97, 0xec, 0x94, 0x71, 0xe5, 0x87, 0x85, 0x78, 0xa9, 0xef,
	0x85, 0x6e, 0x19, 0x57, 0x0f, 0x0b, 0xf1, 0xd2, 0xfe, 0xed, 0x46, 0xec, 0x27, 0x60, 0xca, 0xa5,
	0x5f, 0x4a, 0x86, 0x15, 0x32, 0x0e, 0x7b, 0x5e, 0x97, 0xcb, 0x29, 0x4c, 0xe1, 0x42, 0xe0, 0x6c,
	0x59, 0xd6, 0x57, 0x26, 0x8c, 0xad, 0x6f, 0x93, 0x9e, 0x8c, 0x12, 0xf0, 0x99, 0x49, 0xac, 0x4c,
	0xdf, 0xdd, 0xdf, 0xd6, 0x59, 0x47, 0xcf, 0xc1, 0x6a, 0x1a, 0x67, 0xd2, 0xdb, 0x01, 0x00, 0x8c,
	0x06, 0xdf, 0x25, 0xbd, 0x95, 0x18, 0x82, 0xc7, 0x95, 0xb2, 0xfa, 0x26, 0xed, 0xc0, 0xf4, 0x2c,
	0x85, 0x88, 0x94, 0x22, 0x0c, 0xb5, 0x6b, 0x34, 0x3c, 0x0b, 0x43, 0x3b, 0x20, 0xbb, 0xcd, 0x2e,
	0xb4, 0xee, 0x91, 0x6e, 0x9c, 0x65, 0xb9, 0x9f, 0x66, 0x4d, 0x76, 0x41, 0xf4, 0x34, 0xb3, 0xee,
	0x92, 0x8e, 0x48, 0x67, 0xa0, 0x5b, 0xb3, 0xdb, 0x16, 0xe9, 0xec, 0x69, 0x06, 0x7c, 0x80, 0x2a,
	0x16, 0x0b, 0x11, 0xeb, 0x9b, 0x74, 0x47, 0xa4, 0xb3, 0x27, 0x30, 0xb7, 0x7f, 0xd4, 0x6a, 0x7a,
	0x71, 0xc7, 0xd6, 0x37, 0x08, 0x41, 0x2f, 0xeb, 0x22, 0xb5, 0x81, 0xa1, 0x2c, 0x57, 0x65, 0xba,
	0x4b, 0x76, 0x54, 0x10, 0x55, 0x52, 0xc7, 0x8b, 0x11, 0x54, 0x89, 0xf5, 0x01, 0x41, 0x3b, 0x3f,
	0x4a, 0xc3, 0x4c, 0x57, 0xeb, 0xbd, 0xad, 0xa7, 0xc2, 0xd1, 0x13, 0x30, 0x7b, 0x9c, 0x86, 0x99,
	0x87, 0x8b, 0xc1, 0x68, 0xf0, 0x43, 0xd2, 0x5b, 0x89, 0x81, 0x0c, 0xb9, 0xcc, 0x85, 0x76, 0x8f,
	0x63, 0xeb, 0x1d, 0xd2, 0x89, 0x52, 0x3f, 0xab, 0xa4, 0xf6, 0xdb, 0x8e, 0xd2, 0xb3, 0x4a, 0x5a,
	0x77, 0x48, 0x3b, 0x4a, 0xb9, 0xf8, 0x54, 0x67, 0xa6, 0x26, 0x20, 0xcd, 0xe7, 0xac, 0x14, 0xfa,
	0x79, 0xa3, 0x26, 0xc0, 0x42, 0x5d, 0x41, 0xbd, 0x85, 0x54, 0xf5, 0xec, 0x5f, 0x9a, 0x1b, 0x55,
	0x98, 0xfc, 0x0f, 0xaa, 0xc0, 0x99, 0x64, 0x57, 0x55, 0x61, 0xa2, 0xaa, 0x00, 0x2f, 0x05, 0x55,
	0x05, 0x18, 0x0d, 0x3e, 0x6b, 0xe9, 0x32, 0xc0, 0xec, 0x6d, 0xca, 0xd0, 0x48, 0xcd, 0x6c, 0xa6,
	0x76, 0x49, 0x25, 0xee, 0x90, 0x76, 0x55, 0x46, 0xe9, 0x4c, 0xd7, 0x41, 0x4d, 0x20, 0xeb, 0x2a,
	0x8f, 0xa3, 0x24, 0x92, 0xb0, 0x51, 0x3b, 0xaa, 0x3b, 0xb5, 0xe4, 0x2c, 0x85, 0xce, 0x8f, 0xb3,
	0xf3, 0x95, 0xbe, 0x8b, 0x7a, 0x52, 0x8b, 0x94, 0xc1, 0x0a, 0x1f, 0x86, 0xf8, 0x00, 0x33, 0xbc,
	0x7a, 0xc9, 0xb3, 0x30, 0xb4, 0xde, 0x27, 0xbb, 0xeb, 0x15, 0xc2, 0x10, 0x1f, 0x64, 0x86, 0xb7,
	0x5a, 0x15, 0x4c, 0xb0, 0x0f, 0x25, 0xa3, 0x04, 0x55, 0x38, 0xb6, 0x3f, 0x56, 0x5d, 0xac, 0x6f,
	0x77, 0xa8, 0x7e, 0x20, 0x63, 0xbf, 0x51, 0x9a, 0x6e, 0x20, 0xe3, 0xe7, 0x50, 0x9d, 0x8d, 0xbd,
	0xde, 0xba, 0xb0, 0xd7, 0x6d, 0x45, 0x72, 0x7d, 0x53, 0x60, 0x79, 0xa3, 0x44, 0xe8, 0x23, 0x0c,
	0xc7, 0xf6, 0xef, 0x4c, 0xe5, 0x4b, 0x5f, 0xec, 0x10, 0x71, 0x90, 0x25, 0x39, 0x4b, 0x97, 0x7e,
	0x90, 0x71, 0xa1, 0x4f, 0x8d, 0xbe, 0x96, 0x7d, 0x94, 0x71, 0x61, 0x1d, 0x92, 0xbd, 0xda, 0x84,
	0x8b, 0x85, 0x32, 0x6b, 0xa1, 0xd9, 0x6d, 0x2d, 0x3f, 0x15, 0x0b, 0xb4, 0x3c, 0x20, 0xbb, 0x60,
	0x51, 0x66, 0xa1, 0xf4, 0x17, 0xa2, 0x40, 0xa6, 0x7a, 0x1e, 0xe1, 0x62, 0x31, 0xcd, 0x42, 0xf9,
	0x7d, 0x51, 0x58, 0x36, 0xb9, 0xb5, 0xb2, 0xe0, 0x4c, 0x2a, 0xd6, 0x7a, 0x5e, 0x5f, 0x9b, 0x9c,
	0x32, 0x29, 0x20, 0x24, 0xf4, 0xc3, 0x72, 0x16, 0x44, 0x72, 0x89, 0x14, 0x2a, 0x93, 0x8f, 0xb4,
	0xc8, 0xda, 0x27, 0x7d, 0x15, 0x4a, 0x82, 0x7e, 0x3a, 0x68, 0xd1, 0x03, 0x8b, 0x2c, 0x01, 0x37,
	0x3a, 0x90, 0x39, 0x2b, 0x38, 0x1a, 0x74, 0x57, 0x81, 0x3c, 0x62, 0x05, 0x07, 0x0b, 0x38, 0xe5,
	0xe7, 0x51, 0xee, 0x27, 0x19, 0xaf, 0x62, 0x81, 0x54, 0xf6, 0x3c, 0x02, 0xa2, 0x4f, 0x50, 0x52,
	0x47, 0x8a, 0x4b, 0x60, 0xa4, 0xbd, 0x55, 0x18, 0xb0, 0x06, 0x46, 0xfa, 0x4d, 0x72, 0x2b, 0xc8,
	0x52, 0xc9, 0xa2, 0xd4, 0x2f, 0x44, 0xcc, 0x96, 0x48, 0x6a, 0xdb, 0xdb, 0xd5, 0x42, 0x0f, 0x64,
	0xb0, 0xe9, 0x60, 0x21, 0xed, 0xa8, 0xaf, 0x5a, 0x8d, 0x8b, 0x85, 0xf6, 0x73, 0x4c, 0xee, 0xa0,
	0x9a, 0xa5, 0x55, 0xc8, 0x02, 0x59, 0x15, 0x42, 0xb9, 0xdb, 0x45, 0x77, 0x16, 0x18, 0xae, 0x55,
	0xe0, 0xd5, 0xfe, 0xb3, 0xa1, 0x78, 0xae, 0x2f, 0xf6, 0xff, 0x67, 0x33, 0xd7, 0x3e, 0xb6, 0x36,
	0xf3, 0x93, 0x66, 0x2f, 0xbf, 0xdb, 0x3c, 0xbd, 0x9b, 0x0d, 0x5a, 0x37, 0x79, 0xab, 0xd1, 0xe4,
	0x75, 0x13, 0x98, 0x8d, 0x26, 0xf8, 0xd3, 0x66, 0x5a, 0xee, 0x7f, 0x91, 0xd6, 0x03, 0x68, 0x64,
	0x85, 0x94, 0x55, 0xa9, 0x13, 0x7b, 0x7f, 0xeb, 0xdb, 0x46, 0x25, 0x36, 0x45, 0x43, 0x8f, 0xe8,
	0xd5, 0x65, 0x55, 0x0e, 0xbe, 0x43, 0xfa, 0x0d, 0xd5, 0xe5, 0xe9, 0x7d, 0x8d, 0x74, 0xb4, 0x1b,
	0x15, 0x84, 0x9e, 0xd9, 0x9f, 0xb7, 0x55, 0xa3, 0xe9, 0x47, 0x0d, 0x7e, 0x66, 0x26, 0xab, 0xcf,
	0xcc, 0x44, 0x7f, 0x76, 0xb6, 0x56, 0x9f, 0x9d, 0x1f, 0x92, 0xbe, 0x58, 0x88, 0x54, 0x96, 0x8a,
	0x8c, 0x36, 0xc6, 0x7c, 0xb0, 0xed, 0x7d, 0x74, 0xf4, 0xb1, 0xb2, 0x43, 0x36, 0x88, 0x02, 0x21,
	0x1f, 0xbf, 0x37, 0x49, 0xbf, 0xa1, 0x83, 0xa3, 0x54, 0x14, 0x81, 0x1f, 0x71, 0xed, 0xb6, 0x2d,
	0x8a, 0xe0, 0x31, 0x87, 0x33, 0x84, 0x4b, 0x5f, 0xbf, 0xa3, 0xf4, 0xfb, 0x85, 0x4b, 0x4f, 0xbd,
	0xa2, 0xc6, 0x04, 0xac, 0x8e, 0x1d, 0xdc, 0xa8, 0x17, 0x77, 0xc3, 0x2a, 0x00, 0xb0, 0x50, 0xfe,
	0x95, 0x75, 0x0d, 0x9b, 0xe0, 0xb6, 0xbd, 0x0a, 0x36, 0x69, 0xc0, 0x26, 0x35, 0xec, 0x3e, 0x7e,
	0x94, 0xbe, 0x29, 0xec, 0xbe, 0x86, 0x39, 0x0e, 0xbd, 0xfd, 0xe6, 0x41, 0x3a, 0x75, 0x90, 0x8e,
	0x4b, 0xbf, 0xf2, 0x16, 0x30, 0xb7, 0x86, 0x8d, 0xe8, 0xde, 0xd5, 0x30, 0x67, 0xd4, 0x80, 0x8d,
	0x6a, 0xd8, 0x98, 0x7e, 0xf5, 0x2d, 0x60, 0xe3, 0xc1, 0x01, 0x21, 0xeb, 0x10, 0xb6, 0xdd, 0x90,
	0x03, 0x57, 0x59, 0x4c, 0x2e, 0xbf, 0x43, 0xf7, 0x88, 0x79, 0x3e, 0x5f, 0xd6, 0xbf, 0x19, 0xce,
	0xe7, 0xcb, 0xc1, 0x07, 0x88, 0xd1, 0xae, 0x60, 0xef, 0x71, 0xa7, 0xde, 0x8b, 0x1c, 0xf7, 0x26,
	0x77, 0xeb, 0xbd, 0xc8, 0x5d, 0x9c, 0x0f, 0xeb, 0x9f, 0x12, 0x7c, 0xf8, 0x60, 0xf0, 0x87, 0x57,
	0xfb, 0xc6, 0x17, 0xaf, 0xf6, 0x8d, 0x7f, 0xbc, 0xda, 0x37, 0x7e, 0xfc, 0x7a, 0xff, 0xc6, 0x17,
	0xaf, 0xf7, 0x6f, 0xfc, 0xf5, 0xf5, 0xfe, 0x8d, 0x47, 0xc6, 0x8b, 0x0e, 0xfe, 0xba, 0x19, 0xfe,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x90, 0xb7, 0x3c, 0xf9, 0xca, 0x11, 0x00, 0x00,
}

func (m *RS_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RS_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RS_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Odd != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Odd))
		i--
		dAtA[i] = 0x20
	}
	if m.Rc != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Rc))
		i--
		dAtA[i] = 0x18
	}
	if m.Stop != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Stop))
		i--
		dAtA[i] = 0x10
	}
	if m.Bps != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Bps))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnitIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnitIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fn != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Fn))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sp != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Sp))
		i--
		dAtA[i] = 0x68
	}
	if m.Addr != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x60
	}
	if m.Afn != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x48
	}
	if m.Seq != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x40
	}
	if m.Ec2 != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Ec2))
		i--
		dAtA[i] = 0x38
	}
	if m.Ec1 != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Ec1))
		i--
		dAtA[i] = 0x30
	}
	if m.Tp != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Tp))
		i--
		dAtA[i] = 0x18
	}
	if m.Dir != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Dir))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UintID) > 0 {
		for iNdEx := len(m.UintID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UintID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSHv1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSHv1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSHv1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Afn0EP0F2 != nil {
		{
			size, err := m.Afn0EP0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn0EP0F1 != nil {
		{
			size, err := m.Afn0EP0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xca
	}
	if m.Afn0CP0F12 != nil {
		{
			size, err := m.Afn0CP0F12.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xba
	}
	if m.Afn0CP0F11 != nil {
		{
			size, err := m.Afn0CP0F11.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn0CP0F2 != nil {
		{
			size, err := m.Afn0CP0F2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xaa
	}
	if m.Afn0AP0F26 != nil {
		{
			size, err := m.Afn0AP0F26.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn0AP0F25 != nil {
		{
			size, err := m.Afn0AP0F25.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xaa
	}
	if m.Afn0AP0F12 != nil {
		{
			size, err := m.Afn0AP0F12.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xa2
	}
	if m.Afn0AP0F9 != nil {
		{
			size, err := m.Afn0AP0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x9a
	}
	if m.Afn0AP0F4 != nil {
		{
			size, err := m.Afn0AP0F4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x92
	}
	if m.Afn0AP0F3 != nil {
		{
			size, err := m.Afn0AP0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x8a
	}
	if m.Afn09P0F1 != nil {
		{
			size, err := m.Afn09P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
		i--
		dAtA[i] = 0xea
	}
	if m.Afn05P0F31 != nil {
		{
			size, err := m.Afn05P0F31.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn05P0F1 != nil {
		{
			size, err := m.Afn05P0F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.Afn04P0F26 != nil {
		{
			size, err := m.Afn04P0F26.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if m.Afn04P0F25 != nil {
		{
			size, err := m.Afn04P0F25.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.Afn04P0F12 != nil {
		{
			size, err := m.Afn04P0F12.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.Afn04P0F9 != nil {
		{
			size, err := m.Afn04P0F9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.Afn04P0F4 != nil {
		{
			size, err := m.Afn04P0F4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.Afn04P0F3 != nil {
		{
			size, err := m.Afn04P0F3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.DataID != nil {
		{
			size, err := m.DataID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Normal) > 0 {
		dAtA23 := make([]byte, len(m.Normal)*10)
		var j22 int
		for _, num1 := range m.Normal {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintMsgSh(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Import) > 0 {
		dAtA25 := make([]byte, len(m.Import)*10)
		var j24 int
		for _, num1 := range m.Import {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintMsgSh(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Report) > 0 {
		dAtA27 := make([]byte, len(m.Report)*10)
		var j26 int
		for _, num1 := range m.Report {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintMsgSh(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SluFreq != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.SluFreq))
		i--
		dAtA[i] = 0x30
	}
	if m.UseSlu != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.UseSlu))
		i--
		dAtA[i] = 0x28
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x21
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x19
	}
	if m.TmlPhyid != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.TmlPhyid))
		i--
		dAtA[i] = 0x10
	}
	if m.CboxNumber != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.CboxNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeSlot) > 0 {
		for iNdEx := len(m.TimeSlot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeSlot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Days != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DtStart) > 0 {
		i -= len(m.DtStart)
		copy(dAtA[i:], m.DtStart)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DtStart)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F9_Time_Slot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F9_Time_Slot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F9_Time_Slot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeOff != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.TimeOff))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeOn != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.TimeOn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F12) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F12) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F12) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EngLevel != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.EngLevel))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EngNo) > 0 {
		dAtA29 := make([]byte, len(m.EngNo)*10)
		var j28 int
		for _, num1 := range m.EngNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		i -= j28
		copy(dAtA[i:], dAtA29[:j28])
		i = encodeVarintMsgSh(dAtA, i, uint64(j28))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoopNo) > 0 {
		dAtA31 := make([]byte, len(m.LoopNo)*10)
		var j30 int
		for _, num1 := range m.LoopNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintMsgSh(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F25) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F25) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F25) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopInfo) > 0 {
		for iNdEx := len(m.LoopInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LoopNum != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopStart != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F25_Loop_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F25_Loop_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F25_Loop_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoopNo != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x28
	}
	if m.Phase != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.InOut != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.InOut))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F26) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F26) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F26) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopData) > 0 {
		for iNdEx := len(m.LoopData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LoopNum != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopStart != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn04_P0_F26_Loop_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn04_P0_F26_Loop_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn04_P0_F26_Loop_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Data))))
		i--
		dAtA[i] = 0x51
	}
	if m.LowlimitOff != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowlimitOff))))
		i--
		dAtA[i] = 0x49
	}
	if m.UplimitOff != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UplimitOff))))
		i--
		dAtA[i] = 0x41
	}
	if m.LowlimitOn != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowlimitOn))))
		i--
		dAtA[i] = 0x39
	}
	if m.UplimitOn != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UplimitOn))))
		i--
		dAtA[i] = 0x31
	}
	if m.Using != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Using))
		i--
		dAtA[i] = 0x28
	}
	if m.Phase != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x20
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x18
	}
	if m.InOut != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.InOut))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EngLevel != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.EngLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.CtlType != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.CtlType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn05_P0_F31) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn05_P0_F31) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn05_P0_F31) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn09_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn09_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn09_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DevManufactureDate) > 0 {
		i -= len(m.DevManufactureDate)
		copy(dAtA[i:], m.DevManufactureDate)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevManufactureDate)))
		i--
		dAtA[i] = 0x62
	}
	if m.DevModule != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.DevModule))
		i--
		dAtA[i] = 0x58
	}
	if m.ContainRelay != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.ContainRelay))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DevHardDate) > 0 {
		i -= len(m.DevHardDate)
		copy(dAtA[i:], m.DevHardDate)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevHardDate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChipModule) > 0 {
		i -= len(m.ChipModule)
		copy(dAtA[i:], m.ChipModule)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.ChipModule)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DevHardVer) > 0 {
		i -= len(m.DevHardVer)
		copy(dAtA[i:], m.DevHardVer)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevHardVer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DevComVer) > 0 {
		i -= len(m.DevComVer)
		copy(dAtA[i:], m.DevComVer)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevComVer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevCapacity) > 0 {
		i -= len(m.DevCapacity)
		copy(dAtA[i:], m.DevCapacity)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevCapacity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DevSoftDate) > 0 {
		i -= len(m.DevSoftDate)
		copy(dAtA[i:], m.DevSoftDate)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevSoftDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DevSoftVer) > 0 {
		i -= len(m.DevSoftVer)
		copy(dAtA[i:], m.DevSoftVer)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.DevSoftVer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CompanyDevCode) > 0 {
		i -= len(m.CompanyDevCode)
		copy(dAtA[i:], m.CompanyDevCode)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.CompanyDevCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyCode) > 0 {
		i -= len(m.CompanyCode)
		copy(dAtA[i:], m.CompanyCode)
		i = encodeVarintMsgSh(dAtA, i, uint64(len(m.CompanyCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F11) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F11) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F11) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopData) > 0 {
		for iNdEx := len(m.LoopData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LoopNum != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopStart != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F11_Loop_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F11_Loop_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F11_Loop_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Data))))
		i--
		dAtA[i] = 0x19
	}
	if m.Type != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F12) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F12) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F12) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoopStatus) > 0 {
		for iNdEx := len(m.LoopStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoopStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LoopNum != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopStart != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0C_P0_F12_Loop_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0C_P0_F12_Loop_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0C_P0_F12_Loop_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopNo != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.LoopNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventsData) > 0 {
		for iNdEx := len(m.EventsData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventsData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgSh(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Pn != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Pm != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Pm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Events_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Events_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Events_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Erc15 != nil {
		{
			size, err := m.Erc15.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Erc14 != nil {
		{
			size, err := m.Erc14.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Erc12 != nil {
		{
			size, err := m.Erc12.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Erc11 != nil {
		{
			size, err := m.Erc11.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Erc07 != nil {
		{
			size, err := m.Erc07.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Erc06 != nil {
		{
			size, err := m.Erc06.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Erc01 != nil {
		{
			size, err := m.Erc01.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgSh(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.DtReport != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.DtReport))
		i--
		dAtA[i] = 0x10
	}
	if m.ErcId != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.ErcId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc01_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc01_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc01_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc06_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc06_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc06_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Why != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Why))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Afn0E_P0_F1_Erc14_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Afn0E_P0_F1_Erc14_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Afn0E_P0_F1_Erc14_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.D3 != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.D3))
		i--
		dAtA[i] = 0x18
	}
	if m.D2 != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.D2))
		i--
		dAtA[i] = 0x10
	}
	if m.D1 != 0 {
		i = encodeVarintMsgSh(dAtA, i, uint64(m.D1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgSh(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSh(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RS_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bps != 0 {
		n += 1 + sovMsgSh(uint64(m.Bps))
	}
	if m.Stop != 0 {
		n += 1 + sovMsgSh(uint64(m.Stop))
	}
	if m.Rc != 0 {
		n += 1 + sovMsgSh(uint64(m.Rc))
	}
	if m.Odd != 0 {
		n += 1 + sovMsgSh(uint64(m.Odd))
	}
	return n
}

func (m *UnitIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovMsgSh(uint64(m.Pn))
	}
	if m.Fn != 0 {
		n += 1 + sovMsgSh(uint64(m.Fn))
	}
	return n
}

func (m *DataIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UintID) > 0 {
		for _, e := range m.UintID {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	if m.Dir != 0 {
		n += 1 + sovMsgSh(uint64(m.Dir))
	}
	if m.Tp != 0 {
		n += 1 + sovMsgSh(uint64(m.Tp))
	}
	if m.Ec1 != 0 {
		n += 1 + sovMsgSh(uint64(m.Ec1))
	}
	if m.Ec2 != 0 {
		n += 1 + sovMsgSh(uint64(m.Ec2))
	}
	if m.Seq != 0 {
		n += 1 + sovMsgSh(uint64(m.Seq))
	}
	if m.Afn != 0 {
		n += 1 + sovMsgSh(uint64(m.Afn))
	}
	if m.Addr != 0 {
		n += 1 + sovMsgSh(uint64(m.Addr))
	}
	if m.Sp != 0 {
		n += 1 + sovMsgSh(uint64(m.Sp))
	}
	return n
}

func (m *MsgSHv1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataID != nil {
		l = m.DataID.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F3 != nil {
		l = m.Afn04P0F3.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F4 != nil {
		l = m.Afn04P0F4.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F9 != nil {
		l = m.Afn04P0F9.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F12 != nil {
		l = m.Afn04P0F12.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F25 != nil {
		l = m.Afn04P0F25.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn04P0F26 != nil {
		l = m.Afn04P0F26.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn05P0F1 != nil {
		l = m.Afn05P0F1.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn05P0F31 != nil {
		l = m.Afn05P0F31.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn09P0F1 != nil {
		l = m.Afn09P0F1.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F3 != nil {
		l = m.Afn0AP0F3.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F4 != nil {
		l = m.Afn0AP0F4.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F9 != nil {
		l = m.Afn0AP0F9.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F12 != nil {
		l = m.Afn0AP0F12.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F25 != nil {
		l = m.Afn0AP0F25.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0AP0F26 != nil {
		l = m.Afn0AP0F26.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0CP0F2 != nil {
		l = m.Afn0CP0F2.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0CP0F11 != nil {
		l = m.Afn0CP0F11.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0CP0F12 != nil {
		l = m.Afn0CP0F12.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0EP0F1 != nil {
		l = m.Afn0EP0F1.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Afn0EP0F2 != nil {
		l = m.Afn0EP0F2.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	return n
}

func (m *Afn04_P0_F3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Report) > 0 {
		l = 0
		for _, e := range m.Report {
			l += sovMsgSh(uint64(e))
		}
		n += 1 + sovMsgSh(uint64(l)) + l
	}
	if len(m.Import) > 0 {
		l = 0
		for _, e := range m.Import {
			l += sovMsgSh(uint64(e))
		}
		n += 1 + sovMsgSh(uint64(l)) + l
	}
	if len(m.Normal) > 0 {
		l = 0
		for _, e := range m.Normal {
			l += sovMsgSh(uint64(e))
		}
		n += 1 + sovMsgSh(uint64(l)) + l
	}
	return n
}

func (m *Afn04_P0_F4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CboxNumber != 0 {
		n += 1 + sovMsgSh(uint64(m.CboxNumber))
	}
	if m.TmlPhyid != 0 {
		n += 1 + sovMsgSh(uint64(m.TmlPhyid))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.UseSlu != 0 {
		n += 1 + sovMsgSh(uint64(m.UseSlu))
	}
	if m.SluFreq != 0 {
		n += 1 + sovMsgSh(uint64(m.SluFreq))
	}
	return n
}

func (m *Afn04_P0_F9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DtStart)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovMsgSh(uint64(m.Days))
	}
	if len(m.TimeSlot) > 0 {
		for _, e := range m.TimeSlot {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F9_Time_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeOn != 0 {
		n += 1 + sovMsgSh(uint64(m.TimeOn))
	}
	if m.TimeOff != 0 {
		n += 1 + sovMsgSh(uint64(m.TimeOff))
	}
	return n
}

func (m *Afn04_P0_F12) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopNo) > 0 {
		l = 0
		for _, e := range m.LoopNo {
			l += sovMsgSh(uint64(e))
		}
		n += 1 + sovMsgSh(uint64(l)) + l
	}
	if len(m.EngNo) > 0 {
		l = 0
		for _, e := range m.EngNo {
			l += sovMsgSh(uint64(e))
		}
		n += 1 + sovMsgSh(uint64(l)) + l
	}
	if m.EngLevel != 0 {
		n += 1 + sovMsgSh(uint64(m.EngLevel))
	}
	return n
}

func (m *Afn04_P0_F25) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopStart != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopStart))
	}
	if m.LoopNum != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNum))
	}
	if len(m.LoopInfo) > 0 {
		for _, e := range m.LoopInfo {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F25_Loop_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMsgSh(uint64(m.Type))
	}
	if m.InOut != 0 {
		n += 1 + sovMsgSh(uint64(m.InOut))
	}
	if m.Index != 0 {
		n += 1 + sovMsgSh(uint64(m.Index))
	}
	if m.Phase != 0 {
		n += 1 + sovMsgSh(uint64(m.Phase))
	}
	if m.LoopNo != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNo))
	}
	return n
}

func (m *Afn04_P0_F26) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopStart != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopStart))
	}
	if m.LoopNum != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNum))
	}
	if len(m.LoopData) > 0 {
		for _, e := range m.LoopData {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn04_P0_F26_Loop_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMsgSh(uint64(m.Type))
	}
	if m.InOut != 0 {
		n += 1 + sovMsgSh(uint64(m.InOut))
	}
	if m.LoopNo != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNo))
	}
	if m.Phase != 0 {
		n += 1 + sovMsgSh(uint64(m.Phase))
	}
	if m.Using != 0 {
		n += 1 + sovMsgSh(uint64(m.Using))
	}
	if m.UplimitOn != 0 {
		n += 9
	}
	if m.LowlimitOn != 0 {
		n += 9
	}
	if m.UplimitOff != 0 {
		n += 9
	}
	if m.LowlimitOff != 0 {
		n += 9
	}
	if m.Data != 0 {
		n += 9
	}
	return n
}

func (m *Afn05_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CtlType != 0 {
		n += 1 + sovMsgSh(uint64(m.CtlType))
	}
	if m.EngLevel != 0 {
		n += 1 + sovMsgSh(uint64(m.EngLevel))
	}
	return n
}

func (m *Afn05_P0_F31) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMsgSh(uint64(m.Time))
	}
	return n
}

func (m *Afn09_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyCode)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.CompanyDevCode)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevSoftVer)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevSoftDate)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevCapacity)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevComVer)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevHardVer)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.ChipModule)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	l = len(m.DevHardDate)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.ContainRelay != 0 {
		n += 1 + sovMsgSh(uint64(m.ContainRelay))
	}
	if m.DevModule != 0 {
		n += 1 + sovMsgSh(uint64(m.DevModule))
	}
	l = len(m.DevManufactureDate)
	if l > 0 {
		n += 1 + l + sovMsgSh(uint64(l))
	}
	return n
}

func (m *Afn0C_P0_F11) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopStart != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopStart))
	}
	if m.LoopNum != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNum))
	}
	if len(m.LoopData) > 0 {
		for _, e := range m.LoopData {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn0C_P0_F11_Loop_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopNo != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNo))
	}
	if m.Type != 0 {
		n += 1 + sovMsgSh(uint64(m.Type))
	}
	if m.Data != 0 {
		n += 9
	}
	return n
}

func (m *Afn0C_P0_F12) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopStart != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopStart))
	}
	if m.LoopNum != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNum))
	}
	if len(m.LoopStatus) > 0 {
		for _, e := range m.LoopStatus {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn0C_P0_F12_Loop_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopNo != 0 {
		n += 1 + sovMsgSh(uint64(m.LoopNo))
	}
	if m.Status != 0 {
		n += 1 + sovMsgSh(uint64(m.Status))
	}
	return n
}

func (m *Afn0E_P0_F1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pm != 0 {
		n += 1 + sovMsgSh(uint64(m.Pm))
	}
	if m.Pn != 0 {
		n += 1 + sovMsgSh(uint64(m.Pn))
	}
	if len(m.EventsData) > 0 {
		for _, e := range m.EventsData {
			l = e.Size()
			n += 1 + l + sovMsgSh(uint64(l))
		}
	}
	return n
}

func (m *Afn0E_P0_F1_Events_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErcId != 0 {
		n += 1 + sovMsgSh(uint64(m.ErcId))
	}
	if m.DtReport != 0 {
		n += 1 + sovMsgSh(uint64(m.DtReport))
	}
	if m.Erc01 != nil {
		l = m.Erc01.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Erc06 != nil {
		l = m.Erc06.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Erc07 != nil {
		l = m.Erc07.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Erc11 != nil {
		l = m.Erc11.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Erc12 != nil {
		l = m.Erc12.Size()
		n += 1 + l + sovMsgSh(uint64(l))
	}
	if m.Erc14 != nil {
		l = m.Erc14.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	if m.Erc15 != nil {
		l = m.Erc15.Size()
		n += 2 + l + sovMsgSh(uint64(l))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc01_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMsgSh(uint64(m.Type))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc06_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMsgSh(uint64(m.Type))
	}
	if m.Why != 0 {
		n += 1 + sovMsgSh(uint64(m.Why))
	}
	return n
}

func (m *Afn0E_P0_F1_Erc14_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.D1 != 0 {
		n += 1 + sovMsgSh(uint64(m.D1))
	}
	if m.D2 != 0 {
		n += 1 + sovMsgSh(uint64(m.D2))
	}
	if m.D3 != 0 {
		n += 1 + sovMsgSh(uint64(m.D3))
	}
	return n
}

func sovMsgSh(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSh(x uint64) (n int) {
	return sovMsgSh(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RS_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RS_Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RS_Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bps", wireType)
			}
			m.Bps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			m.Stop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rc", wireType)
			}
			m.Rc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
			m.Odd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Odd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			m.Fn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UintID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UintID = append(m.UintID, &UnitIdentification{})
			if err := m.UintID[len(m.UintID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec1", wireType)
			}
			m.Ec1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2", wireType)
			}
			m.Ec2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSHv1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSHv1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSHv1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataID == nil {
				m.DataID = &DataIdentification{}
			}
			if err := m.DataID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F3 == nil {
				m.Afn04P0F3 = &Afn04_P0_F3{}
			}
			if err := m.Afn04P0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F4 == nil {
				m.Afn04P0F4 = &Afn04_P0_F4{}
			}
			if err := m.Afn04P0F4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F9 == nil {
				m.Afn04P0F9 = &Afn04_P0_F9{}
			}
			if err := m.Afn04P0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F12", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F12 == nil {
				m.Afn04P0F12 = &Afn04_P0_F12{}
			}
			if err := m.Afn04P0F12.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F25", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F25 == nil {
				m.Afn04P0F25 = &Afn04_P0_F25{}
			}
			if err := m.Afn04P0F25.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn04P0F26", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn04P0F26 == nil {
				m.Afn04P0F26 = &Afn04_P0_F26{}
			}
			if err := m.Afn04P0F26.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn05P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn05P0F1 == nil {
				m.Afn05P0F1 = &Afn05_P0_F1{}
			}
			if err := m.Afn05P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn05P0F31", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn05P0F31 == nil {
				m.Afn05P0F31 = &Afn05_P0_F31{}
			}
			if err := m.Afn05P0F31.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 301:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn09P0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn09P0F1 == nil {
				m.Afn09P0F1 = &Afn09_P0_F1{}
			}
			if err := m.Afn09P0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F3 == nil {
				m.Afn0AP0F3 = &Afn04_P0_F3{}
			}
			if err := m.Afn0AP0F3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 402:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F4 == nil {
				m.Afn0AP0F4 = &Afn04_P0_F4{}
			}
			if err := m.Afn0AP0F4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 403:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F9 == nil {
				m.Afn0AP0F9 = &Afn04_P0_F9{}
			}
			if err := m.Afn0AP0F9.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 404:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F12", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F12 == nil {
				m.Afn0AP0F12 = &Afn04_P0_F12{}
			}
			if err := m.Afn0AP0F12.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 405:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F25", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F25 == nil {
				m.Afn0AP0F25 = &Afn04_P0_F25{}
			}
			if err := m.Afn0AP0F25.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 406:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0AP0F26", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0AP0F26 == nil {
				m.Afn0AP0F26 = &Afn04_P0_F26{}
			}
			if err := m.Afn0AP0F26.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 501:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F2 == nil {
				m.Afn0CP0F2 = &Afn05_P0_F31{}
			}
			if err := m.Afn0CP0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 502:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F11", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F11 == nil {
				m.Afn0CP0F11 = &Afn0C_P0_F11{}
			}
			if err := m.Afn0CP0F11.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 503:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0CP0F12", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0CP0F12 == nil {
				m.Afn0CP0F12 = &Afn0C_P0_F12{}
			}
			if err := m.Afn0CP0F12.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 601:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0EP0F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0EP0F1 == nil {
				m.Afn0EP0F1 = &Afn0E_P0_F1{}
			}
			if err := m.Afn0EP0F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 602:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn0EP0F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Afn0EP0F2 == nil {
				m.Afn0EP0F2 = &Afn0E_P0_F1{}
			}
			if err := m.Afn0EP0F2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Report = append(m.Report, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgSh
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgSh
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Report) == 0 {
					m.Report = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgSh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Report = append(m.Report, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Import = append(m.Import, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgSh
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgSh
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Import) == 0 {
					m.Import = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgSh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Import = append(m.Import, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Import", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Normal = append(m.Normal, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgSh
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgSh
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Normal) == 0 {
					m.Normal = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgSh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Normal = append(m.Normal, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CboxNumber", wireType)
			}
			m.CboxNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CboxNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmlPhyid", wireType)
			}
			m.TmlPhyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TmlPhyid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSlu", wireType)
			}
			m.UseSlu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseSlu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluFreq", wireType)
			}
			m.SluFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSlot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSlot = append(m.TimeSlot, &Afn04_P0_F9_Time_Slot{})
			if err := m.TimeSlot[len(m.TimeSlot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F9_Time_Slot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time_Slot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time_Slot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOn", wireType)
			}
			m.TimeOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOff", wireType)
			}
			m.TimeOff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F12) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F12: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F12: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopNo = append(m.LoopNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgSh
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgSh
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopNo) == 0 {
					m.LoopNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgSh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopNo = append(m.LoopNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EngNo = append(m.EngNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgSh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgSh
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgSh
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EngNo) == 0 {
					m.EngNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgSh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EngNo = append(m.EngNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EngNo", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngLevel", wireType)
			}
			m.EngLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F25) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F25: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F25: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStart", wireType)
			}
			m.LoopStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNum", wireType)
			}
			m.LoopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopInfo = append(m.LoopInfo, &Afn04_P0_F25_Loop_Info{})
			if err := m.LoopInfo[len(m.LoopInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F25_Loop_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOut", wireType)
			}
			m.InOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InOut |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F26) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn04_P0_F26: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn04_P0_F26: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStart", wireType)
			}
			m.LoopStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNum", wireType)
			}
			m.LoopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopData = append(m.LoopData, &Afn04_P0_F26_Loop_Data{})
			if err := m.LoopData[len(m.LoopData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn04_P0_F26_Loop_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOut", wireType)
			}
			m.InOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InOut |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Using", wireType)
			}
			m.Using = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Using |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplimitOn", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UplimitOn = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowlimitOn", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowlimitOn = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplimitOff", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UplimitOff = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowlimitOff", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowlimitOff = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Data = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtlType", wireType)
			}
			m.CtlType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CtlType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngLevel", wireType)
			}
			m.EngLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn05_P0_F31) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn05_P0_F31: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn05_P0_F31: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn09_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn09_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn09_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDevCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyDevCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevSoftVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevSoftVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevSoftDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevSoftDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevCapacity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevCapacity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevComVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevComVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevHardVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevHardVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChipModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChipModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevHardDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevHardDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainRelay", wireType)
			}
			m.ContainRelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainRelay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevModule", wireType)
			}
			m.DevModule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevModule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevManufactureDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevManufactureDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F11) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F11: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F11: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStart", wireType)
			}
			m.LoopStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNum", wireType)
			}
			m.LoopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopData = append(m.LoopData, &Afn0C_P0_F11_Loop_Data{})
			if err := m.LoopData[len(m.LoopData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F11_Loop_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Data = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F12) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0c_P0_F12: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0c_P0_F12: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStart", wireType)
			}
			m.LoopStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNum", wireType)
			}
			m.LoopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopStatus = append(m.LoopStatus, &Afn0C_P0_F12_Loop_Status{})
			if err := m.LoopStatus[len(m.LoopStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0C_P0_F12_Loop_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loop_Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loop_Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
			m.LoopNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Afn0e_P0_F1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Afn0e_P0_F1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pm", wireType)
			}
			m.Pm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventsData = append(m.EventsData, &Afn0E_P0_F1_Events_Data{})
			if err := m.EventsData[len(m.EventsData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Events_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErcId", wireType)
			}
			m.ErcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtReport", wireType)
			}
			m.DtReport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtReport |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc01", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc01 == nil {
				m.Erc01 = &Afn0E_P0_F1_Erc01_Data{}
			}
			if err := m.Erc01.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc06", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc06 == nil {
				m.Erc06 = &Afn0E_P0_F1_Erc06_Data{}
			}
			if err := m.Erc06.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc07", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc07 == nil {
				m.Erc07 = &Afn0E_P0_F1_Erc06_Data{}
			}
			if err := m.Erc07.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc11", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc11 == nil {
				m.Erc11 = &Afn0E_P0_F1_Erc01_Data{}
			}
			if err := m.Erc11.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc12", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc12 == nil {
				m.Erc12 = &Afn0E_P0_F1_Erc01_Data{}
			}
			if err := m.Erc12.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc14", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc14 == nil {
				m.Erc14 = &Afn0E_P0_F1_Erc14_Data{}
			}
			if err := m.Erc14.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc15", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSh
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Erc15 == nil {
				m.Erc15 = &Afn0E_P0_F1_Erc14_Data{}
			}
			if err := m.Erc15.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc01_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc01_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc01_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc06_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc06_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc06_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Why", wireType)
			}
			m.Why = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Why |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Afn0E_P0_F1_Erc14_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Erc14_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Erc14_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D1", wireType)
			}
			m.D1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D2", wireType)
			}
			m.D2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D3", wireType)
			}
			m.D3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSh(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSh
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSh
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSh
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSh
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSh        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSh          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSh = fmt.Errorf("proto: unexpected end of group")
)
