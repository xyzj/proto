syntax = "proto3";
package wlst.pb2;

option optimize_for = SPEED;

// 合肥开放协议
// 合肥协议中因地址为8字节，可能大于int32上限，所以采用args.saddr字段填充，10进制转字符串即可，可多个。

message Ahhf_rtu_6804 {
  message Switch_out {
    // 开关量输出路数
    int32 switch_out_total = 1;
    // 每个开关量输出的回路数
    repeated int32 switch_out_loop = 2 [packed = true];
  }
  message Switch_in {
    // 电压互感比,默认5
    int32 voltage_transformer = 1;
    // 电流回路数
    int32 loop_total = 2;
    // 电流回路互感比,按真实值提交，通信下发时/5
    repeated int32 current_transformer = 3 [packed = true];
    // 电流回路相位,0-a,1-b,2-c
    repeated int32 current_phase = 4 [packed = true];
  }
  message Switch_in_limit {
    // 回路数量
    int32 loop_total = 5;
    // 电压上下限,按真实值提交，通信下发*100
    repeated double voltage_uplimit = 1 [packed = true];
    repeated double voltage_lowlimit = 2 [packed = true];
    // 电流上下限
    repeated double current_uplimit = 3 [packed = true];
    repeated double current_lowlimit = 4 [packed = true];
  }
  // 序号
  int32 cmd_idx = 1;
  // 数据标记,1-开关量输出参数，2-模拟量采集参数，3-模拟量上下限参数
  repeated int32 data_mark = 2 [packed = true];
  // 信息点，暂不用
  repeated int32 data_point = 3 [packed = true];
  Switch_out switch_out = 4;
  Switch_in switch_in = 5;
  Switch_in_limit switch_in_limit = 6;
  // 应答,0-失败，1-成功，填充顺序和data_mark相同
  repeated int32 status = 9 [packed = true];
}
//江阴节能协议
// Wxjy_esu_d500
message Wxjy_esu_5500 {
  //当前时间 hhmmss
  string time_now = 1;
  //时间1-3 hhmm
  repeated int32 x_time = 2 [packed = true];
  //电压
  repeated int32 x_voltage = 3 [packed = true];
}

message Wxjy_esu_d700 {
  // A相输入电压
  int32 phase_a_in = 1;
  // B相输入电压
  int32 phase_b_in = 2;
  // C相输入电压
  int32 phase_c_in = 3;
  // A相输出电压
  int32 phase_a_out = 4;
  // B相输出电压
  int32 phase_b_out = 5;
  // C相输出电压
  int32 phase_c_out = 6;
}

message Wxjy_esu_d800 {
  //报警状态
  string status = 1;
}

// 勃洛克单灯
message Blk_slu_6891 {
  // 高地址（集中器地址）
  int32 slu_id = 1;
  // 低地址（控制器地址）
  int32 sluitem_id = 2;
  // 控制器数量（1～100）/时钟时间戳/是否启动扫描
  int64 sluitem_config = 3;
  // 每个控制器回路数量
  repeated int32 sluitem_loop = 4 [packed = true];
  // 设备应答状态，0-失败，1-成功
  int32 status = 5;
}

message Blk_slu_6892 {
  // 高地址（集中器地址）
  int32 slu_id = 1;
  message Sluitem_data {
    // 依次各灯头电压
    repeated double voltage = 1 [packed = true];
    // 依次各灯头电流
    repeated double current = 2 [packed = true];
    // 依次各灯头功率
    repeated double power = 3 [packed = true];

    // 依次各灯头错误代码，0-关灯正常,1-关灯有电流，8-开灯正常，9-开灯无电流，10-开灯功率因数低，255-设备通讯故障
    repeated int32 error = 5 [packed = true];
    // 依次各灯头节点
    repeated int32 node = 6 [packed = true];
    // 控制器地址
    int32 sluitem_id = 7;
    // 控制器回路数量
    int32 sluitem_loop = 8;
  }
  repeated Sluitem_data sluitem_data = 2;
}
message Blk_slu_6895 {
  // 高地址（集中器地址）
  int32 slu_id = 1;
  // addr_type==3时表示组地址，addr_type==4时表示单个控制器地址（单个控制器地址为255时下发0x1,0x1）
  int32 sluitem_id = 2;
  // 地址类型，0-全部，1-单号，2-双号，3-组，4-单一
  int32 addr_type = 3;
  // 指令类型,0-清除，1-定时，3-即时
  int32 operation_type = 4;
  // 控制方式,按灯头数量填充，0-关灯，1-开灯，2-不操作，10～100-调光
  repeated int32 operation_value = 5 [packed = true];
  // 定时序号,范围1-5
  int32 timer_id = 6;
  // 周设置，[周1,2,3,4,5,6,7],0-不操作，1-操作
  repeated int32 week_set = 7;
  // 时间hh×60+mm
  int32 time_set = 8;
  // 命令序号，范围0-255
  int32 cmd_idx = 9;
  // 执行状态，0-失败，1-成功
  int32 status = 10;
}

// 远帆除湿
// 读取数据
message Yf_dry_0300 {
  int32 addr = 1;       // 设备地址
  int32 ctl_status = 2; // 控制状态,0-自动,1-强制开,2-强制关,3-除霜
  int32 dew_point = 3;  // 露点温度
  int32 humidity = 4;   // 湿度百分比
  int32 temperature = 5;          // 温度
  int32 humidity_uplimit = 6;     // 湿度上限10-90,默认55
  int32 humidity_lowlimit = 7;    // 湿度下限10-90,默认40
  int32 temperature_uplimit = 8;  // 温度上限0-70,默认60
  int32 temperature_lowlimit = 9; // 温度下限0-70,默认5
}
// 设置参数
message Yf_dry_1005 {
  int32 addr = 1;                 // 设备地址
  int32 humidity_uplimit = 6;     // 湿度上限10-90,默认55
  int32 humidity_lowlimit = 7;    // 湿度下限10-90,默认40
  int32 temperature_uplimit = 8;  // 温度上限0-70,默认60
  int32 temperature_lowlimit = 9; // 温度下限0-70,默认5
}
// 运行控制
message Yf_dry_1001 {
  int32 addr = 1;       // 设备地址
  int32 ctl_status = 2; // 控制状态,0-自动,1-强制开,2-强制关,3-除霜
}