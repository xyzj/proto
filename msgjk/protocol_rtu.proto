syntax = "proto3";
package wlst.pb2;

option optimize_for = SPEED;

message Wlst_rtu_ans {
  // 序号
  int32 cmd_idx = 1;
  // 数据标记
  repeated int32 data_mark = 2 [ packed = true ];
  // 信息点，暂不用
  repeated int32 data_point = 3 [ packed = true ];
  // 应答,0-失败，1-成功，填充顺序和data_mark相同
  repeated int32 status = 4 [ packed = true ];
  // 状态码，详细参考文档
  int32 status_code = 5;
}
// 漏电板参数设置
// 0x24,0x25,0xa4,0xa5
message Wlst_rtu_7024 {
  message EluArgv {
    // 回路标示0-不启用,1-只检测漏电流，2-检测漏电流并报警，3-检测漏电流不报警但分闸，4-检测漏电流报警并分闸
    int32 elu_mark = 1;
    int32 transformers = 2; // 互感比，默认1000
    int32 switchout_no = 3; // 开关量输出序号0-不对应，1-8对应k1-k8
    int32 alarm_level = 4;  // 报警级数，0-5,默认0
    // 依次N级报警电流(mA),固定5个，不用的级数填0
    repeated int32 alarm_limit = 5 [ packed = true ];
    int32 breaker_limit = 6; // 分闸值（mA）
    int32 baseline = 7;      // 基线（屏蔽值）（mA）
  }
  repeated EluArgv elu_argv = 1; // 固定8，依次1-8
  int32 status = 2; // 设置应答,0-成功，1-失败，0x0d-设备不支持漏电
  // 序号
  int32 cmd_idx = 3;
  int32 alarm_delay = 8;     // 报警延时（ms）
  int32 breaker_delay = 9;   // 分匝延时
  int32 retry_no = 10;       // 重合匝次数，0-5，默认0
  int32 retry_distance = 11; // 重合闸间隔（s），1-255，默认20
}
// 漏电板选测
message Wlst_rtu_7026 {
  message EluData {
    int32 switchout_manually = 5; // 开关量输出是否手动状态，0-自动，1-手动
    int32 switchout_status = 6; // 开关量输出当前状态，0-闭合，1-断开
    // 回路标示0-不启用,1-只检测漏电流，2-检测漏电流并报警，3-检测漏电流不报警但分闸，4-检测漏电流报警并分闸
    int32 elu_mark = 7;
    // 报警状态0:未报警；1：一级报警；2：二级报警；3：三级报警；4：四级报警；5：五级报警；0xAA：分闸报警
    int32 alarm_status = 8;
    int32 current_now = 9;    // 当前值（mA）
    int32 current_alarm = 10; // 报警值（mA）
    int32 baseline = 11;      // 基线（屏蔽值）（mA）
  }
  int32 hardware_type = 1; // 设备类型0-不支持漏电，1-支持漏电
  int32 elu_status = 2;    // 0-未启用漏电，1-启用漏电
  int32 eeprom = 3; // 0-正常，1-错误（需要重新下发参数）（不用展示）
  int32 hardware_reset = 4; // 是否发生复位，0-未发生，1-发生
  // 依次1-8路漏电值，没有漏电板或全部不启用时不填充
  repeated EluData elu_data = 5;
  // 序号
  int32 cmd_idx = 6;
}
// 漏电复位
message Wlst_rtu_7027 {
  repeated int32 need_reset = 1 [ packed = true ]; // 固定1-8路是否需要复位
  int32 status = 2;                           // 0-成功，1-失败
  // 序号
  int32 cmd_idx = 3;
}
// 电子锁
message Wlst_rtu_7076 {
  // 功能，1-设置锁地址，2-设置开锁保持时间，3-恢复出厂设置，11-查询锁状态，12-开关锁
  int32 cmd_type = 1;
  // 锁地址，0-广播地址
  int64 addr = 2;
  // 地址设置/应答
  Lock01 lock01 = 3;
  // 开锁时间设置/应答
  Lock02 lock02 = 4;
  // 复位应答
  Lock03 lock03 = 5;
  // 选测应答
  Lock11 lock11 = 6;
  // 开关控制/应答
  Lock12 lock12 = 7;
  message Lock01 {
    // 新地址
    int64 new_addr = 1;
    // 0-成功，1-失败
    int32 status = 2;
  }
  message Lock02 {
    // 开锁时间，秒，5-600
    int32 open_distance = 1;
    // 0-成功，1-失败
    int32 status = 2;
  }
  message Lock03 {
    // 0-成功，1-失败
    int32 status = 2;
  }
  message Lock11 {
    // 开关状态，0-关，1-开
    int32 lock_status = 2;
    // 开锁维持时间（秒）
    int32 open_distance = 3;
    // 故障状态 0-无，1-开锁异常，2-关锁异常
    int32 lock_error = 4;
    // 固件版本
    string hw_ver = 5;
  }
  message Lock12 {
    // 0-关，1-开
    int32 control = 1;
    // 0-成功，1-失败
    int32 status = 2;
  }
  // 序号
  int32 cmd_idx = 8;
}
// 除湿
message Wlst_rtu_7077 {
  // 功能，1-设置锁地址，2-设置开锁保持时间，3-恢复出厂设置，11-查询锁状态，12-开关锁
  int32 cmd_type = 1;
  // 锁地址，0-广播地址
  int64 addr = 2;
  // 地址设置/应答
  Dry01 dry01 = 3;
  message Dry01 {
    // 新地址
    int64 new_addr = 1;
    // 0-成功，1-失败
    int32 status = 2;
  }
  // 参数设置/应答
  Dry02 dry02 = 4;
  message Dry02 {
    int32 humidity_uplimit = 6;     // 湿度上限10-90,默认55
    int32 humidity_lowlimit = 7;    // 湿度下限10-90,默认40
    int32 temperature_uplimit = 8;  // 温度上限0-70,默认60
    int32 temperature_lowlimit = 9; // 温度下限0-70,默认5
                                    // 0-成功，1-失败
    int32 status = 2;
  }
  // 选测应答
  Dry11 dry11 = 5;
  message Dry11 {
    int32 ctl_status = 2;  // 控制状态,0-自动,1-强制开,2-强制关
    int32 humidity = 4;    // 湿度百分比
    int32 temperature = 5; // 温度
  }
  // 控制/应答
  Dry13 dry13 = 6;
  message Dry13 {
    int32 ctl_status = 1; // 控制状态,0-自动,1-强制开,2-强制关
    // 0-成功，1-失败
    int32 status = 2;
  }
  // 序号
  int32 cmd_idx = 7;
}
// 3006主动上报
message Wlst_rtu_7094 {
  // 序号
  int32 cmd_idx = 1;
  // 报警类型，400-火零不平衡,401-24路设备开关灯操作后应答,500-漏电报警,4096-电子锁报警,4097-除湿报警
  int32 alarm_type = 2;
  // 火零不平衡报警内容
  Alarm_LN alarm_ln = 3;
  message Alarm_LN {
    // 回路序号，1-12
    int32 loop_no = 1;
    // 报警类型，1-报警，2-报警并分匝
    int32 alarm_status = 2;
    // 报警电流
    double alarm_current = 3;
  }
  // 24路开关灯后操作结果，依次为1-24路输出状态，1-通，0-断
  repeated int32 switch_out_st_packed = 4 [ packed = true ];
  // 漏电板报警
  Alarm_Elu alarm_elu = 5;
  message Alarm_Elu {
    // 回路
    int32 loop_no = 1;
    // 漏电值(mA)
    int32 alarm_value = 2;
    // 新增的报警，0-无警、1-一级警报、2-二级警报、3-三级警报、4-四级警报、5-五级警报、0xAA-分闸警报
    repeated int32 alarm_new = 3 [ packed = true ];
    // 消除的报警，0-无警、1-一级警报、2-二级警报、3-三级警报、4-四级警报、5-五级警报、0xAA-分闸警报
    repeated int32 alarm_clear = 4 [ packed = true ];
    // 发生时间
    int64 dt_alarm = 5;
  }
  // 门锁报警
  Alarm_HJLock alarm_hjlock = 6;
  message Alarm_HJLock {
    // 锁地址
    int64 addr = 1;
    // 开关状态，0-关，1-开
    int32 lock_status = 2;
    // 开锁维持时间（秒）
    int32 open_distance = 3;
    // 故障状态 0-无，1-开锁异常，2-关锁异常
    int32 lock_error = 4;
    // 固件版本
    string hw_ver = 5;
    // 时间
    int64 dt_alarm = 6;
  }
  // 除湿器报警
  Alarm_YFDry alarm_yfdry = 7;
  message Alarm_YFDry {
    // 地址
    int64 addr = 1;
    // 工作状态0-启动，1-关闭
    int32 ctl_status = 2;
    // 湿度
    int32 humidity = 3;
    // 温度
    int32 temperature = 4;
  }
}
// 设置/读取终端参数 （火零不平衡参数,1-24路周控制时间表）
message Wlst_rtu_7021 {
  // 序号
  int32 cmd_idx = 1;
  // 参数类别，1-火零不平衡参数,2-1~24路周控制时间表
  int32 data_type = 2;
  // 火零不平衡参数
  repeated Args_LN argsln = 3;
  // 设置应答状态码
  int32 status_code = 4;

  // 回路代码 0-1~8回路,1-9~16回路,2-17~24回路
  int32 loop_type = 5;
  // 周日到周六 时间表参数(定长7)
  repeated Args_WC argswc = 6;

  message Args_LN {
    // 回路启用标识,1-12回路序号,填充回路号,超范围无视,不启用的回路不用填充
    int32 loop_no = 1;
    // 基础值(0-200)
    int32 base_value = 2;
    // 报警阀值(0-200)
    int32 alarm_value = 3;
    // 分闸阀值(0-200)
    int32 break_value = 4;
  }
  message Args_WC {
    // L1开灯时间(时*60+分钟,不操作填1500)
    int32 l1_on = 1;
    // L1关灯时间
    int32 l1_off = 2;
    // L2开灯时间
    int32 l2_on = 3;
    // L2关灯时间
    int32 l2_off = 4;
    // L3开灯时间
    int32 l3_on = 5;
    // L3关灯时间
    int32 l3_off = 6;
    // L4开灯时间
    int32 l4_on = 7;
    // L4关灯时间
    int32 l4_off = 8;
    // L5开灯时间
    int32 l5_on = 9;
    // L5关灯时间
    int32 l5_off = 10;
    // L6开灯时间
    int32 l6_on = 11;
    // L6关灯时间
    int32 l6_off = 12;
    // L7开灯时间
    int32 l7_on = 13;
    // L7关灯时间
    int32 l7_off = 14;
    // L8开灯时间
    int32 l8_on = 15;
    // L8关灯时间
    int32 l8_off = 16;
  }
}
// 遥控
message Wlst_rtu_7023 {
  // 序号
  int32 cmd_idx = 1;
  // 参数类别，1-遥控
  int32 data_type = 2;
  // 控制参数
  repeated Args_Control argscontrol = 3;
  // 应答状态码 0-成功
  int32 status_code = 4;
  message Args_Control {
    // 回路启用标识,1-24回路序号,填充回路号,超范围无视,不启用的回路不用填充
    int32 loop_no = 1;
    // 开关标识 0-关,1-开
    int32 operation = 2;
  }
}
// 硬件相关参数招测
message Wlst_rtu_705b {
  // 序号
  int32 cmd_idx = 1;
  // 数据类型，1-硬件版本信息
  int32 cmd_type = 2;
  // 硬件版本
  string hardware_ver = 3;
  // 生产批次,年周 如：1820
  string production_batch = 4;
  // 生产日期,年月日
  string production_date = 5;
  // 安装日期，年月日
  string installation_date = 6;
}
// 电能计量
message Wlst_rtu_70a0 {
  // 序号
  int32 cmd_idx = 1;
  // 数据类型，1-电能计量，2-辅助数据+gps定位数据,3-24路输出选测数据
  int32 cmd_type = 2;
  // 频率，cmd_type==1时填
  float frequency = 3;
  // 依次三相位电能数据
  repeated Electric_energy ee = 4;
  message Electric_energy {
    // 电压，cmd_type==1，3时填
    float voltage = 1;
    // 电流，cmd_type==1，3时填
    float current = 2;
    // 功率因素，cmd_type==1时填
    float power_factor = 3;
    // 有功功率，cmd_type==1，3时填
    float active_power = 4;
    // 无功功率，cmd_type==1时填
    float reactive_power = 5;
    // 有功电能，cmd_type==1时填
    float active_energy = 6;
    // 无功电能，cmd_type==1时填
    float reactive_energy = 7;
  }
  // 温度，-25-100，cmd_type==2,3时填
  int32 temperature = 5;
  // 湿度，0-99%，cmd_type==2,3时填
  int32 humidity = 6;
  // 主电源电压，cmd_type==2,3时填
  double main_voltage = 7;
  // 蓄电池电量，cmd_type==2时填
  int32 battery_power = 8;
  // 经度，cmd_type==2时填
  double longitude = 9;
  // 纬度，cmd_type==2时填
  double latitude = 10;
  // cmd_type==2时填
  Gps_args gpsargs = 11;
  message Gps_args {
    // 定位方式:1—GPS定位,2—北斗定位,3—混合定位
    int32 gps_type = 1;
    // 纬度类型：0-北纬,1-南纬
    int32 lat_type = 2;
    // 经度类型：0-东经，1-西经
    int32 lon_type = 3;
    // 定位状态：0-未定位,1-已定位
    int32 location_status = 4;
  }
  // 开关量输入状态 0-断,1-通，cmd_type==3时填
  repeated int32 switch_in_st_packed = 12 [ packed = true ];
  // 开关量输出状态 0-断,1-通，cmd_type==3时填
  repeated int32 switch_out_st_packed = 13 [ packed = true ];
  // 终端运行状态，cmd_type==3时填
  // [供电位0-有电,1-无电;开机申请位,0-无,1-开机;停运位,0-正常,1-停运;报警位,0-无警,1-告警;电压超限,0-正常,1-超限;电流超限,0-正常,1-超限;无电流报警,0-正常,1-报警;参数错误,0-正常,1-错误]
  repeated int32 tml_st_packed = 14 [ packed = true ];
  // 终端复位次数[当前,昨天,前天,大前天]，cmd_type==3时填
  repeated int32 tml_reset = 15 [ packed = true ];
  // 回路数量，cmd_type==3时填
  int32 loop_count = 16;
}

// sd卡数据招测
message Wlst_rtu_7053 {
  // 序号
  int32 cmd_idx = 1;
  // 记录类型 1-每天一条的最大电压电流数据,2-2s一条的普通选测数据
  int32 record_type = 2;
  // 查询开始时间
  int64 dt_start = 3;
  // 查询数据条数
  int32 record_count = 4;
  // 查询时间间隔(单位秒)
  int64 record_distance = 5;
}
// sd卡数据招测应答
message Wlst_rtu_70d3 {
  // 序号
  int32 cmd_idx = 1;
  // 总包数
  int32 record_total = 2;
  // 当前序号
  int32 record_idx = 3;
  // 当前数据包错误标志，0：正常,1-6：sd功能错误,7：无sd卡,8:记录时间错误,9：查询开始时间错误,10：查询截止时间错误,11：时间间隔错误,12：记录类型错误,13：记录数据错误
  int32 record_status = 4;
  // 记录类型 1-2s一条的普通选测数据,2-每天一条的最大电压电流数据
  int32 record_type = 5;
  // 查询开始时间
  int64 dt_start = 6;
  // 查询数据条数
  int32 record_count = 7;
  // 查询时间间隔(单位秒)
  int64 record_distance = 8;
  // 数据类型1
  repeated Wlst_rtu_70d0 data_70d0 = 9;
  // 数据类型2
  repeated Wlst_rtu_70d0_max data_70d0_max = 10;
}
message Wlst_rtu_70d0_max {
  // 记录时间
  int64 dt_record = 1;
  // 记录类型
  int32 record_type = 2;
  // 回路数量
  int32 loop_count = 3;
  repeated Max_data max_data = 4;
  message Max_data {
    // 依次回路最大电流
    double current_max = 1;
    // 回路电流发生时间
    int64 dt_record = 2;
  }
}
//事件招测
message Wlst_rtu_7800 {
  // 事件类型(上下行)
  int32 event_type = 1;
  // 分类标识(上下行)
  int32 event_class = 2;
  // 记录条数(上下行)
  int32 data_num = 3;
  // 开始时间(下行)
  int64 dt_start = 4;
  // 结束时间(下行)
  int64 dt_end = 5;
  // 总包数(上行)
  int32 all_num = 6;
  // 当前包(上行)
  int32 cur_num = 7;
  // 原始数据(上行)
  string raw_data = 8;
}
//新版选测
message Wlst_rtu_7050 {
  int32 cmd_idx = 1;
  int32 data_mark = 2;
}
message Wlst_rtu_70d0 {
  message Data_mark {
    // 即时选测
    int32 get_run_data = 1;
    // 开关量输出变化原因
    int32 get_switchout_reason = 2;
  }
  // 采样板电压
  message Sampling_voltage {
    double vol_a = 1;
    double vol_b = 2;
    double vol_c = 3;
  }
  message Analog_data {
    double voltage = 1;
    double current = 2;
    double power = 3;
    // 电压越限0-正常，3-满量程，当idx=-1时有效
    int32 voltage_status = 4;
    // 电压越限0-正常，3-满量程，当idx=-1时有效
    int32 current_status = 5;
  }
  // 序号
  // (老版选测也将升级为该结构,若idx==-1表示为老版数据,idx>=0表示新版，idx==-2表示sd卡数据)
  int32 cmd_idx = 1;
  // 数据标示
  Data_mark data_mark = 2;
  // 开关量输入状态,0-断,1-通
  repeated int32 switch_in_st_packed = 3 [ packed = true ];
  // 开关量输出状态 0-断,1-通
  repeated int32 switch_out_st_packed = 4 [ packed = true ];
  // 终端运行状态
  // [供电位0-有电,1-无电;开机申请位,0-无,1-开机;停运位,0-正常,1-停运;报警位,0-无警,1-告警;电压超限,0-正常,1-超限;电流超限,0-正常,1-超限;无电流报警,0-正常,1-报警;参数错误,0-正常,1-错误]
  repeated int32 tml_st_packed = 5 [ packed = true ];
  // 温度
  int32 temperature = 6;
  // gprs掉线次数
  int32 gprs_reset = 7;
  // gprs信号强度
  int32 gprs_signal = 8;
  // 终端复位次数[当前,昨天,前天,大前天]
  repeated int32 tml_reset = 9 [ packed = true ];
  // 终端参数状态,0-正常,1-错误[状态和地址;工作参数;模拟量显示参数;开关量输入路数和跳变报警;开关量输出路数;开关量输入矢量;开关量输出矢量;模拟量上下限;
  //                            时空光控选择标志;1-3继电器开关灯时间;4-6继电器开关灯时间;7-8继电器开关灯时间;组地址;经纬度计算时间;经纬度和偏移;收费时间;
  //                            1-4端节假日;5-8端节假日;最后时限开关灯时间;模拟量相位;模拟量输入矢量;模拟量校准/线路检测参数;线路状态;终端参数错误]
  repeated int32 tml_args_status = 10 [ packed = true ];
  // 供电电压
  double power_supply = 11;
  // 采样板电压(数组长度即表示有多少采样板)
  repeated Sampling_voltage sampling_voltage = 12;
  // 回路数据(数组长度即表示有多少回路)
  repeated Analog_data analog_data = 13;
  // int型赋值
  int64 switch_in_st = 14;
  int32 switch_out_st = 15;
  int32 tml_st = 16;
  // 满量程
  int32 full_range = 17;
  // 记录时间
  int64 dt_record = 18;
  // 最后一次开关量输出状态变化原因，8个回路8个元素，0-时控，1-光控，2-主台，3-面板，4-最后时限，5-年设置
  repeated int32 switch_out_reason = 19 [ packed = true ];
}

// 召测终端参数(旧版召测协议也将升级为该结构)
message Wlst_rtu_705a {
  // 序号
  int32 cmd_idx = 1;
  // 指令类型，1-招测基础参数，2-招测互感比值
  int32 cmd_type = 2;
}
message Wlst_rtu_70da {
  int32 cmd_idx = 1;
  //心跳周期
  int32 keep_alive = 2;
  //主报周期
  int32 alarm_cycle = 3;
  //报警延时
  int32 alarm_delay = 4;
  //开关量输出路数
  int32 switch_out_sum = 5;
  //开关量输入路数
  int32 switch_in_sum = 6;
  //模拟量输入路数
  int32 analog_sum = 7;
  //开关量输出开关时间 hhmm-hhmm
  repeated string x_switching_time = 8;
  //市付费启用时分，hhmm
  string city_pay_time = 9;
  //自付费启用时分，hhmm
  string self_pay_time = 10;
  //各个开关量输出路数
  repeated int32 x_switch_out_count = 11 [ packed = true ];
  //开关量输入1-16跳变
  repeated int32 switch_in_hopping = 12 [ packed = true ];
  //电压量程
  int32 voltage_range = 13;
  //模拟量回路x电流量程
  repeated int32 x_current_range = 14 [ packed = true ];
  //开关量输出x矢量
  repeated int32 x_switch_out_vector = 15 [ packed = true ];
  //开关量输入x矢量
  repeated int32 x_switch_in_vector = 16 [ packed = true ];
  //模拟量x失量
  repeated int32 x_analog_vector = 17 [ packed = true ];
  //电压上限
  int32 upper_voltage_limit = 18;
  //电压下限
  int32 lower_voltage_limit = 19;
  //模拟量回路x电流上限
  repeated int32 x_upper_current_limit = 20 [ packed = true ];
  //模拟量回路x电流下限
  repeated int32 x_lower_current_limit = 21 [ packed = true ];
  //优先组地址
  int32 group_id = 22;
  // 指令类型，1-招测基础参数，2-招测互感比值
  int32 cmd_type = 23;
  // ABC三项电能板互感比
  repeated int32 transformers = 24 [ packed = true ];
}

//远程修改主板通讯参数
message Wlst_rtu_700a { repeated int32 com_argv = 1; }

//模块ftp升级
message Wlst_rtu_7010 {
  // 复位类型，1-复位终端，2-恢复出厂参数，3-复位通信模块，4-火零不平衡复位
  int32 data_mark = 1;
  //序号
  int32 cmd_idx = 2;
  // 应答
  int32 status = 3;
}

//模块ftp升级
message Wlst_rtu_7003 {
  //序号
  int32 cmd_idx = 1;
  // ftp升级命令数据
  repeated int32 ftp_data = 2;
}

// 3006终端升级准备
message Wlst_rtu_7006 {
  //序号
  int32 cmd_idx = 1;
  //总数
  int32 all_count = 2;
  // cache文件名
  string cache_name = 3;
}

// 3006终端升级数据包发送状态查询
message Wlst_rtu_7007 {
  //序号
  int32 cmd_idx = 1;
}

// 3006终端数据包状态查询应答
// Wlst_rtu_7083
message Wlst_rtu_7087 {
  //序号
  int32 cmd_idx = 1;
  //状态 0-数据包正常，>0数据包异常
  int32 status = 2;
  //失败的数据包编号
  repeated int32 failed_packages = 3;
  //设备传回的失败标识字节数
  int32 bytes_count = 4;
}

// 终端升级上报
message Wlst_rtu_7081 {
  // 序号
  int32 cmd_idx = 1;
  // 状态
  int32 status = 2;
  // 旧版本
  string old_ver = 3;
  // 新版本
  string new_ver = 4;
  // 位置关系
  int32 data_location = 5;
}

// 3006终端升级发送数据包
message Wlst_rtu_7008 {
  //序号
  int32 cmd_idx = 1;
  //数据
  repeated string upd_data = 2;
  // cache文件名
  string cache_name = 3;
  // 0-写缓存，1-清缓存
  int32 clean = 4;
  repeated int32 int_upd_data = 5 [ packed = true ];
}

// wlst_rtu_70e1
message Wlst_rtu_7060 {
  message YearCtrl {
    // 回路编号
    int32 loop_no = 1;
    // 回路时段数
    int32 time_count = 2;
    // 每段开关灯时间，[第一段开,第一段关,第二段开,第二段关...], 格式:hh*60+mm
    repeated int32 opt_time = 3 [ packed = true ];
  }
  //序号
  int32 cmd_idx = 1;
  // 起始时间,提取月,日
  int64 dt_start = 2;
  // 天数
  int32 days = 3;

  repeated YearCtrl year_ctrl = 4;
}

message Wlst_rtu_7061 {
  //序号
  int32 cmd_idx = 1;
  // 起始时间,提取月,日
  int64 dt_start = 2;
  // 天数
  int32 days = 3;
  // 回路标示
  repeated int32 loop_no = 4 [ packed = true ];
}

message Wlst_rtu_70e0 {
  //序号
  int32 cmd_idx = 1;
  //状态
  int32 status = 2;
}

message Wlst_rtu_7b00 {
  // sim卡号码
  string sim = 1;
  //信号强度
  int32 signal = 2;
}

message Wlst_rtu_1900 {
  //终端地址
  int32 addr = 1;
  //终端ip
  int64 tml_ip = 2;
  // str 格式ip
  string tml_ip_str = 3;
}

message Wlst_rtu_4000 {
  //工作标识
  int32 work_mark = 1;
  //心跳周期
  int32 keep_alive = 2;
  //主报周期
  int32 alarm_cycle = 3;
  //报警延时
  int32 alarm_delay = 4;
  //回路x数量
  repeated int32 x_loop_count = 5 [ packed = true ];
}

message Wlst_rtu_4101 {
  //模拟量输入路数总数
  int32 analog_sum = 1;
  //电压量程
  int32 voltage_range = 2;
  //回路x电流量程
  repeated int32 x_current_range = 3 [ packed = true ];
}

message Wlst_rtu_4104 {
  //开关量输入路数总数
  int32 switchin_sum = 1;
  //开关量输入x矢量
  repeated int32 x_switch_vector = 2 [ packed = true ];
  //开关量输入x跳变
  repeated int32 x_switch_hopping = 3 [ packed = true ];
}

message Wlst_rtu_4110 {
  //开关量输出路数总数
  int32 switch_in_sum = 1;
}

// 设置电能采集版电流互感器比值
message Wlst_rtu_4111 {
  // A,B,C三项互感比，下行不需要/5,如100：5的填充100即可
  repeated int32 transformers = 1 [ packed = true ];
  // 设置状态，0-失败，1-成功
  int32 status = 2;
}

message Wlst_rtu_4200 {
  //模拟量x失量
  repeated int32 x_analog_vector = 1 [ packed = true ];
  //开关量输入x矢量
  repeated int32 x_switch_in_vector = 2 [ packed = true ];
  //开关量输出x矢量
  repeated int32 x_switch_out_vector = 3 [ packed = true ];
  //模拟量输入路数总数
  int32 analog_sum = 4;
  //开关量输入路数总数
  int32 switch_in_sum = 5;
  //开关量输出数量
  int32 switch_out_sum = 6;
}

message Wlst_rtu_4401 {
  //模拟量输入路数总数
  int32 analog_sum = 1;
  //电压上限
  int32 upper_voltage_limit = 2;
  //电压下限
  int32 lower_voltage_limit = 3;
  //模拟量回路x电流上限
  repeated int32 x_upper_current_limit = 4 [ packed = true ];
  //模拟量回路x电流下限
  repeated int32 x_lower_current_limit = 5 [ packed = true ];
  //电压量程
  int32 voltage_range = 6;
  //模拟量回路x电流量程
  repeated int32 x_current_range = 7 [ packed = true ];
}

message Wlst_rtu_da00 {
  //心跳周期
  int32 keep_alive = 1;
  //主报周期
  int32 alarm_cycle = 2;
  //报警延时
  int32 alarm_delay = 3;
  //终端地址
  int32 addr = 4;
  //开关量输出路数
  int32 switch_out_sum = 5;
  //开关量输入路数
  int32 switch_in_sum = 6;
  //模拟量输入路数
  int32 analog_sum = 7;
  //开关量输出开关时间 hhmm-hhmm
  repeated string x_switching_time = 8;
  //市付费启用时分，hhmm
  string city_pay_time = 9;
  //自付费启用时分，hhmm
  string self_pay_time = 10;
  //各个开关量输出路数
  repeated int32 x_switch_out_count = 11 [ packed = true ];
  //开关量输入1-16跳变
  int32 switch_in_hopping = 12;
  //电压量程
  int32 voltage_range = 13;
  //模拟量回路x电流量程
  repeated int32 x_current_range = 14 [ packed = true ];
  //开关量输出x矢量
  repeated int32 x_switch_out_vector = 15 [ packed = true ];
  //开关量输入x矢量
  repeated int32 x_switch_in_vector = 16 [ packed = true ];
  //模拟量x失量
  repeated int32 x_analog_vector = 17 [ packed = true ];
  //电压上限
  int32 upper_voltage_limit = 18;
  //电压下限
  int32 lower_voltage_limit = 19;
  //模拟量回路x电流上限
  repeated int32 x_upper_current_limit = 20 [ packed = true ];
  //模拟量回路x电流下限
  repeated int32 x_lower_current_limit = 21 [ packed = true ];
  //优先组地址
  int32 group_id = 22;
}

message Wlst_rtu_df00 {
  //开关量输出开关时间 hhmm-hhmm
  repeated string x_switching_time = 8;
  //各个开关量输出路数
  repeated int32 x_switch_out_count = 11 [ packed = true ];
  //开关量输出x矢量
  repeated int32 x_switch_out_vector = 15 [ packed = true ];
}

message Wlst_rtu_6100 {
  //模拟量x电压矢量
  repeated int32 x_voltage_phase = 1 [ packed = true ];
}

// Wlst_rtu_af00
message Wlst_rtu_a000 {
  //模拟量回路x电压  需要*电压量程
  repeated double x_analog_voltage = 1 [ packed = true ];
  //模拟量回路x电流  需要*电流量程
  repeated double x_analog_current = 2 [ packed = true ];
  //模拟量回路x功率  需要 *电压量程*电流量程
  repeated double x_analog_power = 3 [ packed = true ];
  //开关量输入x状态
  int64 switch_in_st = 4;
  //开关量输出状态
  int32 switch_out_st = 5;
  //终端状态
  int32 tml_st = 6;
  //模拟量回路x电流越限状态
  repeated int32 x_current_status = 7 [ packed = true ];
  //模拟量回路x电压越限状态
  repeated int32 x_voltage_status = 8 [ packed = true ];
  int32 full_range = 9;   // 数据满量程
  int32 temperature = 10; // 温度值
}

// Wlst_rtu_2210
message Wlst_rtu_a200 {
  //开关量输出
  int32 k_no = 1;
  //操作
  int32 operation = 2;
}

message Wlst_rtu_4b00 {
  // kx操作，0-关，1-开，2-不变
  repeated int32 operation = 1 [ packed = true ];
}

// Wlst_rtu_1200
message Wlst_rtu_9300 {
  // yyyy-mm-dd hh:mm:ss w 格式
  string tml_date = 1;
}

// Wlst_rtu_3100_5800_6800_d900_e900
message Wlst_rtu_b200 {
  //周日~周六k1开关时间 hhmm-hhmm
  repeated string x_k1_opt_time = 1;
  //周日~周六k3开关时间 hhmm-hhmm
  repeated string x_k2_opt_time = 2;
  //周日~周六k3开关时间 hhmm-hhmm
  repeated string x_k3_opt_time = 3;
  //周日~周六市付费启用时分，hhmm
  repeated string x_city_pay_time = 4;
  //周日~周六自付费启用时分，hhmm
  repeated string x_self_pay_time = 5;
  //周日~周六k4开关时间 hhmm-hhmm
  repeated string x_k4_opt_time = 6;
  //周日~周六k5开关时间 hhmm-hhmm
  repeated string x_k5_opt_time = 7;
  //周日~周六k6开关时间 hhmm-hhmm
  repeated string x_k6_opt_time = 8;
  //周日~周六k7开关时间 hhmm-hhmm
  repeated string x_k7_opt_time = 9;
  //周日~周六k8开关时间 hhmm-hhmm
  repeated string x_k8_opt_time = 10;
}

// Wlst_rtu_4600_6500_c700
message Wlst_rtu_e600 {
  //时间段1-4(或5-8)起始日期 mmdd-mmdd
  repeated string x_holidays = 1;
  // K1时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k1_time = 2;
  // K2时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k2_time = 3;
  // K3时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k3_time = 4;
  // K4时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k4_time = 5;
  // K5时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k5_time = 6;
  // K6时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k6_time = 7;
  // K7时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k7_time = 10;
  // K8时间段1-4(或5-8)开关时间 hhmm-hhmm
  repeated string x_k8_time = 11;
  //时间段1-4(或5-8)市付
  repeated string x_city_pay_time = 8;
  //时间段1-4(或5-8)自付
  repeated string x_self_pay_time = 9;
}

// Wlst_rtu_4c00_cc00
message Wlst_rtu_9800 {
  // 4c00和cc00时表示：设置档位，1-1档，2-2档，3-3档，4-旁路，5-返回状态。9800时表示：终端开机申请状态1-参数正常，0-参数错误，2-时钟错误
  int32 status = 1;
}

// Wlst_rtu_ab00
message Wlst_rtu_dc00 {
  // ab00-》序列号,dc00-》版本字符串
  string ver = 1;
}
