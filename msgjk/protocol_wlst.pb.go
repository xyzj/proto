// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol_wlst.proto

package wlst_pb2

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 数据单元标识
type UnitIdentification struct {
	// 信息点DA
	Pn int32 `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	// 信息类DT
	Fn int32 `protobuf:"varint,2,opt,name=fn,proto3" json:"fn,omitempty"`
}

func (m *UnitIdentification) Reset()         { *m = UnitIdentification{} }
func (m *UnitIdentification) String() string { return proto.CompactTextString(m) }
func (*UnitIdentification) ProtoMessage()    {}
func (*UnitIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_f614763c9ca1b9b8, []int{0}
}
func (m *UnitIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnitIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitIdentification.Merge(m, src)
}
func (m *UnitIdentification) XXX_Size() int {
	return m.Size()
}
func (m *UnitIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_UnitIdentification proto.InternalMessageInfo

func (m *UnitIdentification) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UnitIdentification) GetFn() int32 {
	if m != nil {
		return m.Fn
	}
	return 0
}

// 头信息
type DataIdentification struct {
	// 数据单元标识，具体定义见详细结构
	UintID []*UnitIdentification `protobuf:"bytes,1,rep,name=uintID,proto3" json:"uintID,omitempty"`
	// area code
	// 区域码，4位字符串，如果下行不提供，则忽略区域码，仅匹配设备地址，提供区域码时，需同时匹配区域码和设备地址
	AreaCode string `protobuf:"bytes,2,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`
	// addr 设备地址，0～65534,65535为广播地址
	Addr int64 `protobuf:"varint,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// 指令有效的分钟数，0-不启用（默认），>0指令在指定的分钟内才有效，超时丢弃（下行有，暂不用）
	Tp int32 `protobuf:"varint,4,opt,name=tp,proto3" json:"tp,omitempty"`
	// 认证码(未支持)
	Pw string `protobuf:"bytes,5,opt,name=pw,proto3" json:"pw,omitempty"`
	// 高优先级事件数量（上行才有）
	Ec1 int32 `protobuf:"varint,6,opt,name=ec1,proto3" json:"ec1,omitempty"`
	// 普通优先级事件数量（上行才有）
	Ec2 int32 `protobuf:"varint,7,opt,name=ec2,proto3" json:"ec2,omitempty"`
	// 顺序码0-15
	Seq int32 `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
	// afn 功能码
	Afn int32 `protobuf:"varint,9,opt,name=afn,proto3" json:"afn,omitempty"`
	// fun 功能码
	Fun int32 `protobuf:"varint,10,opt,name=fun,proto3" json:"fun,omitempty"`
	// dir 数据方向,0-下行，1-上行
	Dir int32 `protobuf:"varint,11,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (m *DataIdentification) Reset()         { *m = DataIdentification{} }
func (m *DataIdentification) String() string { return proto.CompactTextString(m) }
func (*DataIdentification) ProtoMessage()    {}
func (*DataIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_f614763c9ca1b9b8, []int{1}
}
func (m *DataIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataIdentification.Merge(m, src)
}
func (m *DataIdentification) XXX_Size() int {
	return m.Size()
}
func (m *DataIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_DataIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_DataIdentification proto.InternalMessageInfo

func (m *DataIdentification) GetUintID() []*UnitIdentification {
	if m != nil {
		return m.UintID
	}
	return nil
}

func (m *DataIdentification) GetAreaCode() string {
	if m != nil {
		return m.AreaCode
	}
	return ""
}

func (m *DataIdentification) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *DataIdentification) GetTp() int32 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *DataIdentification) GetPw() string {
	if m != nil {
		return m.Pw
	}
	return ""
}

func (m *DataIdentification) GetEc1() int32 {
	if m != nil {
		return m.Ec1
	}
	return 0
}

func (m *DataIdentification) GetEc2() int32 {
	if m != nil {
		return m.Ec2
	}
	return 0
}

func (m *DataIdentification) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DataIdentification) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

func (m *DataIdentification) GetFun() int32 {
	if m != nil {
		return m.Fun
	}
	return 0
}

func (m *DataIdentification) GetDir() int32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

// 状态应答
type WlstGbUp_0000 struct {
	// pn: 0
	// fn: 1-全部确认，2-全部否认,3-部分确认/否认（要填充数据段，保留）
	DataID *DataIdentification `protobuf:"bytes,1,opt,name=DataID,json=dataID,proto3" json:"DataID,omitempty"`
	// 被确认的功能码 依据上行填
	Afn int32 `protobuf:"varint,3,opt,name=afn,proto3" json:"afn,omitempty"`
}

func (m *WlstGbUp_0000) Reset()         { *m = WlstGbUp_0000{} }
func (m *WlstGbUp_0000) String() string { return proto.CompactTextString(m) }
func (*WlstGbUp_0000) ProtoMessage()    {}
func (*WlstGbUp_0000) Descriptor() ([]byte, []int) {
	return fileDescriptor_f614763c9ca1b9b8, []int{2}
}
func (m *WlstGbUp_0000) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGbUp_0000) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGbUp_0000.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGbUp_0000) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGbUp_0000.Merge(m, src)
}
func (m *WlstGbUp_0000) XXX_Size() int {
	return m.Size()
}
func (m *WlstGbUp_0000) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGbUp_0000.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGbUp_0000 proto.InternalMessageInfo

func (m *WlstGbUp_0000) GetDataID() *DataIdentification {
	if m != nil {
		return m.DataID
	}
	return nil
}

func (m *WlstGbUp_0000) GetAfn() int32 {
	if m != nil {
		return m.Afn
	}
	return 0
}

// 复位下行
type WlstGbDown_0101 struct {
	// pn: 0
	// fn: 1-硬件初始化（重启），2-数据区初始化，3-恢复出厂值，4-参数全体数据区
	DataID *DataIdentification `protobuf:"bytes,1,opt,name=DataID,json=dataID,proto3" json:"DataID,omitempty"`
}

func (m *WlstGbDown_0101) Reset()         { *m = WlstGbDown_0101{} }
func (m *WlstGbDown_0101) String() string { return proto.CompactTextString(m) }
func (*WlstGbDown_0101) ProtoMessage()    {}
func (*WlstGbDown_0101) Descriptor() ([]byte, []int) {
	return fileDescriptor_f614763c9ca1b9b8, []int{3}
}
func (m *WlstGbDown_0101) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGbDown_0101) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGbDown_0101.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGbDown_0101) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGbDown_0101.Merge(m, src)
}
func (m *WlstGbDown_0101) XXX_Size() int {
	return m.Size()
}
func (m *WlstGbDown_0101) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGbDown_0101.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGbDown_0101 proto.InternalMessageInfo

func (m *WlstGbDown_0101) GetDataID() *DataIdentification {
	if m != nil {
		return m.DataID
	}
	return nil
}

// 登录上行
type WlstGbUp_0902 struct {
	// pn: 0
	// fn: 1-登录，2-退出，3-心跳
	DataID *DataIdentification `protobuf:"bytes,1,opt,name=DataID,json=dataID,proto3" json:"DataID,omitempty"`
}

func (m *WlstGbUp_0902) Reset()         { *m = WlstGbUp_0902{} }
func (m *WlstGbUp_0902) String() string { return proto.CompactTextString(m) }
func (*WlstGbUp_0902) ProtoMessage()    {}
func (*WlstGbUp_0902) Descriptor() ([]byte, []int) {
	return fileDescriptor_f614763c9ca1b9b8, []int{4}
}
func (m *WlstGbUp_0902) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGbUp_0902) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGbUp_0902.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGbUp_0902) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGbUp_0902.Merge(m, src)
}
func (m *WlstGbUp_0902) XXX_Size() int {
	return m.Size()
}
func (m *WlstGbUp_0902) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGbUp_0902.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGbUp_0902 proto.InternalMessageInfo

func (m *WlstGbUp_0902) GetDataID() *DataIdentification {
	if m != nil {
		return m.DataID
	}
	return nil
}

func init() {
	proto.RegisterType((*UnitIdentification)(nil), "wlst.pb2.UnitIdentification")
	proto.RegisterType((*DataIdentification)(nil), "wlst.pb2.DataIdentification")
	proto.RegisterType((*WlstGbUp_0000)(nil), "wlst.pb2.Wlst_gb_up_0000")
	proto.RegisterType((*WlstGbDown_0101)(nil), "wlst.pb2.Wlst_gb_down_0101")
	proto.RegisterType((*WlstGbUp_0902)(nil), "wlst.pb2.Wlst_gb_up_0902")
}

func init() { proto.RegisterFile("protocol_wlst.proto", fileDescriptor_f614763c9ca1b9b8) }

var fileDescriptor_f614763c9ca1b9b8 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x97, 0x76, 0xab, 0x5b, 0x06, 0xfe, 0x89, 0x97, 0xa0, 0x52, 0x46, 0x4f, 0x3b, 0x8d,
	0xae, 0xee, 0xe2, 0x55, 0x07, 0xba, 0x6b, 0x41, 0xc4, 0x53, 0xc9, 0x9a, 0x46, 0x02, 0x23, 0xc9,
	0xda, 0x94, 0x7e, 0x04, 0xaf, 0x7e, 0x2c, 0x8f, 0x3b, 0x7a, 0x94, 0xed, 0x8b, 0x48, 0x12, 0x2b,
	0xcc, 0xdd, 0x76, 0x7b, 0xdf, 0x1f, 0x6f, 0x9e, 0xe7, 0xe1, 0x21, 0xf0, 0x52, 0x95, 0x52, 0xcb,
	0x5c, 0xae, 0xb2, 0x66, 0x55, 0xe9, 0x89, 0xdd, 0x50, 0xdf, 0xcd, 0xcb, 0x24, 0x9a, 0x41, 0xf4,
	0x2c, 0xb8, 0x5e, 0xd0, 0x42, 0x68, 0xce, 0x78, 0x4e, 0x34, 0x97, 0x02, 0x9d, 0x42, 0x4f, 0x09,
	0x0c, 0x46, 0x60, 0xdc, 0x4b, 0x3d, 0x65, 0x77, 0x26, 0xb0, 0xe7, 0x76, 0x26, 0xa2, 0x77, 0x0f,
	0xa2, 0x39, 0xd1, 0xe4, 0xdf, 0xb3, 0x19, 0x0c, 0x6a, 0x2e, 0xf4, 0x62, 0x8e, 0xc1, 0xc8, 0x1f,
	0x0f, 0x93, 0x9b, 0x49, 0xeb, 0x33, 0x39, 0x34, 0x49, 0x7f, 0x6f, 0xd1, 0x35, 0x1c, 0x90, 0xb2,
	0x20, 0x59, 0x2e, 0x69, 0x61, 0x3d, 0x06, 0x69, 0xdf, 0x80, 0x07, 0x49, 0x0b, 0x84, 0x60, 0x97,
	0x50, 0x5a, 0x62, 0x7f, 0x04, 0xc6, 0x7e, 0x6a, 0x67, 0x93, 0x46, 0x2b, 0xdc, 0x75, 0x69, 0xb4,
	0xb2, 0x69, 0x1b, 0xdc, 0xb3, 0x2f, 0x3d, 0xd5, 0xa0, 0x73, 0xe8, 0x17, 0xf9, 0x14, 0x07, 0xf6,
	0xc0, 0x8c, 0x8e, 0x24, 0xf8, 0xa4, 0x25, 0x89, 0x21, 0x55, 0xb1, 0xc6, 0x7d, 0x47, 0xaa, 0x62,
	0x6d, 0x08, 0x61, 0x02, 0x0f, 0x1c, 0x21, 0x4c, 0x18, 0xc2, 0x6a, 0x81, 0xa1, 0x23, 0xac, 0xb6,
	0x84, 0xf2, 0x12, 0x0f, 0x1d, 0xa1, 0xbc, 0x8c, 0x5e, 0xe1, 0xd9, 0xcb, 0xaa, 0xd2, 0xd9, 0xdb,
	0x32, 0xab, 0x55, 0x16, 0xc7, 0x71, 0x6c, 0x5a, 0xb0, 0xdd, 0xcc, 0x6d, 0x81, 0x7b, 0x2d, 0x1c,
	0x76, 0x96, 0x06, 0xd4, 0xde, 0xb6, 0xf6, 0xfe, 0x9f, 0x7d, 0xb4, 0x80, 0x17, 0xad, 0x34, 0x95,
	0x8d, 0xc8, 0xe2, 0x69, 0x3c, 0x3d, 0x4e, 0x3c, 0x7a, 0xdc, 0x4f, 0x79, 0x17, 0x27, 0xc7, 0x09,
	0xdd, 0x5f, 0x7d, 0x6e, 0x43, 0xb0, 0xd9, 0x86, 0xe0, 0x7b, 0x1b, 0x82, 0x8f, 0x5d, 0xd8, 0xd9,
	0xec, 0xc2, 0xce, 0xd7, 0x2e, 0xec, 0x3c, 0x81, 0x65, 0x60, 0xff, 0xd6, 0xed, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x78, 0xb3, 0xd7, 0x72, 0x02, 0x00, 0x00,
}

func (m *UnitIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnitIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fn != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Fn))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dir != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Dir))
		i--
		dAtA[i] = 0x58
	}
	if m.Fun != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Fun))
		i--
		dAtA[i] = 0x50
	}
	if m.Afn != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x48
	}
	if m.Seq != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x40
	}
	if m.Ec2 != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Ec2))
		i--
		dAtA[i] = 0x38
	}
	if m.Ec1 != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Ec1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pw) > 0 {
		i -= len(m.Pw)
		copy(dAtA[i:], m.Pw)
		i = encodeVarintProtocolWlst(dAtA, i, uint64(len(m.Pw)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Tp != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Tp))
		i--
		dAtA[i] = 0x20
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AreaCode) > 0 {
		i -= len(m.AreaCode)
		copy(dAtA[i:], m.AreaCode)
		i = encodeVarintProtocolWlst(dAtA, i, uint64(len(m.AreaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UintID) > 0 {
		for iNdEx := len(m.UintID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UintID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolWlst(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WlstGbUp_0000) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGbUp_0000) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGbUp_0000) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Afn != 0 {
		i = encodeVarintProtocolWlst(dAtA, i, uint64(m.Afn))
		i--
		dAtA[i] = 0x18
	}
	if m.DataID != nil {
		{
			size, err := m.DataID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstGbDown_0101) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGbDown_0101) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGbDown_0101) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataID != nil {
		{
			size, err := m.DataID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstGbUp_0902) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGbUp_0902) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGbUp_0902) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataID != nil {
		{
			size, err := m.DataID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolWlst(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocolWlst(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocolWlst(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnitIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Pn))
	}
	if m.Fn != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Fn))
	}
	return n
}

func (m *DataIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UintID) > 0 {
		for _, e := range m.UintID {
			l = e.Size()
			n += 1 + l + sovProtocolWlst(uint64(l))
		}
	}
	l = len(m.AreaCode)
	if l > 0 {
		n += 1 + l + sovProtocolWlst(uint64(l))
	}
	if m.Addr != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Addr))
	}
	if m.Tp != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Tp))
	}
	l = len(m.Pw)
	if l > 0 {
		n += 1 + l + sovProtocolWlst(uint64(l))
	}
	if m.Ec1 != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Ec1))
	}
	if m.Ec2 != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Ec2))
	}
	if m.Seq != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Seq))
	}
	if m.Afn != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Afn))
	}
	if m.Fun != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Fun))
	}
	if m.Dir != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Dir))
	}
	return n
}

func (m *WlstGbUp_0000) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataID != nil {
		l = m.DataID.Size()
		n += 1 + l + sovProtocolWlst(uint64(l))
	}
	if m.Afn != 0 {
		n += 1 + sovProtocolWlst(uint64(m.Afn))
	}
	return n
}

func (m *WlstGbDown_0101) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataID != nil {
		l = m.DataID.Size()
		n += 1 + l + sovProtocolWlst(uint64(l))
	}
	return n
}

func (m *WlstGbUp_0902) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataID != nil {
		l = m.DataID.Size()
		n += 1 + l + sovProtocolWlst(uint64(l))
	}
	return n
}

func sovProtocolWlst(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocolWlst(x uint64) (n int) {
	return sovProtocolWlst(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnitIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			m.Fn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UintID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UintID = append(m.UintID, &UnitIdentification{})
			if err := m.UintID[len(m.UintID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec1", wireType)
			}
			m.Ec1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2", wireType)
			}
			m.Ec2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ec2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fun", wireType)
			}
			m.Fun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fun |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGbUp_0000) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gb_up_0000: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gb_up_0000: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataID == nil {
				m.DataID = &DataIdentification{}
			}
			if err := m.DataID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afn", wireType)
			}
			m.Afn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGbDown_0101) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gb_down_0101: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gb_down_0101: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataID == nil {
				m.DataID = &DataIdentification{}
			}
			if err := m.DataID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGbUp_0902) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gb_up_0902: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gb_up_0902: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataID == nil {
				m.DataID = &DataIdentification{}
			}
			if err := m.DataID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolWlst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolWlst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocolWlst(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocolWlst
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolWlst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocolWlst
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocolWlst
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocolWlst
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocolWlst        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocolWlst          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocolWlst = fmt.Errorf("proto: unexpected end of group")
)
