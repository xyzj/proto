// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol_als.proto

package wlst_pb2

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 漏电协议
// 设置地址
type WlstElu_6255 struct {
	NewAddr int32 `protobuf:"varint,1,opt,name=new_addr,json=newAddr,proto3" json:"new_addr,omitempty"`
	Status  int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstElu_6255) Reset()      { *m = WlstElu_6255{} }
func (*WlstElu_6255) ProtoMessage() {}
func (*WlstElu_6255) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{0}
}
func (m *WlstElu_6255) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_6255) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_6255.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_6255) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_6255.Merge(m, src)
}
func (m *WlstElu_6255) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_6255) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_6255.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_6255 proto.InternalMessageInfo

func (m *WlstElu_6255) GetNewAddr() int32 {
	if m != nil {
		return m.NewAddr
	}
	return 0
}

func (m *WlstElu_6255) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

//设置运行参数
type WlstElu_6256 struct {
	WorkArgv []*WlstElu_6256_WorkArgv `protobuf:"bytes,1,rep,name=work_argv,json=workArgv,proto3" json:"work_argv,omitempty"`
	Status   int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstElu_6256) Reset()      { *m = WlstElu_6256{} }
func (*WlstElu_6256) ProtoMessage() {}
func (*WlstElu_6256) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{1}
}
func (m *WlstElu_6256) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_6256) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_6256.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_6256) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_6256.Merge(m, src)
}
func (m *WlstElu_6256) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_6256) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_6256.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_6256 proto.InternalMessageInfo

func (m *WlstElu_6256) GetWorkArgv() []*WlstElu_6256_WorkArgv {
	if m != nil {
		return m.WorkArgv
	}
	return nil
}

func (m *WlstElu_6256) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WlstElu_6256_WorkArgv struct {
	LoopMark      int32 `protobuf:"varint,1,opt,name=loop_mark,json=loopMark,proto3" json:"loop_mark,omitempty"`
	WorkMode      int32 `protobuf:"varint,2,opt,name=work_mode,json=workMode,proto3" json:"work_mode,omitempty"`
	AlarmValueSet int32 `protobuf:"varint,3,opt,name=alarm_value_set,json=alarmValueSet,proto3" json:"alarm_value_set,omitempty"`
	OptDelay      int32 `protobuf:"varint,4,opt,name=opt_delay,json=optDelay,proto3" json:"opt_delay,omitempty"`
}

func (m *WlstElu_6256_WorkArgv) Reset()      { *m = WlstElu_6256_WorkArgv{} }
func (*WlstElu_6256_WorkArgv) ProtoMessage() {}
func (*WlstElu_6256_WorkArgv) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{1, 0}
}
func (m *WlstElu_6256_WorkArgv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_6256_WorkArgv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_6256_WorkArgv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_6256_WorkArgv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_6256_WorkArgv.Merge(m, src)
}
func (m *WlstElu_6256_WorkArgv) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_6256_WorkArgv) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_6256_WorkArgv.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_6256_WorkArgv proto.InternalMessageInfo

func (m *WlstElu_6256_WorkArgv) GetLoopMark() int32 {
	if m != nil {
		return m.LoopMark
	}
	return 0
}

func (m *WlstElu_6256_WorkArgv) GetWorkMode() int32 {
	if m != nil {
		return m.WorkMode
	}
	return 0
}

func (m *WlstElu_6256_WorkArgv) GetAlarmValueSet() int32 {
	if m != nil {
		return m.AlarmValueSet
	}
	return 0
}

func (m *WlstElu_6256_WorkArgv) GetOptDelay() int32 {
	if m != nil {
		return m.OptDelay
	}
	return 0
}

// 手动操作
type WlstElu_6257 struct {
	OptDo  []int32 `protobuf:"varint,1,rep,packed,name=opt_do,json=optDo,proto3" json:"opt_do,omitempty"`
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstElu_6257) Reset()      { *m = WlstElu_6257{} }
func (*WlstElu_6257) ProtoMessage() {}
func (*WlstElu_6257) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{2}
}
func (m *WlstElu_6257) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_6257) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_6257.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_6257) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_6257.Merge(m, src)
}
func (m *WlstElu_6257) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_6257) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_6257.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_6257 proto.InternalMessageInfo

func (m *WlstElu_6257) GetOptDo() []int32 {
	if m != nil {
		return m.OptDo
	}
	return nil
}

func (m *WlstElu_6257) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 主动报警,选测
type WlstElu_62D8 struct {
	AlarmData []*WlstElu_62D8_AlarmData `protobuf:"bytes,1,rep,name=alarm_data,json=alarmData,proto3" json:"alarm_data,omitempty"`
}

func (m *WlstElu_62D8) Reset()      { *m = WlstElu_62D8{} }
func (*WlstElu_62D8) ProtoMessage() {}
func (*WlstElu_62D8) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{3}
}
func (m *WlstElu_62D8) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_62D8) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_62D8.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_62D8) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_62D8.Merge(m, src)
}
func (m *WlstElu_62D8) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_62D8) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_62D8.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_62D8 proto.InternalMessageInfo

func (m *WlstElu_62D8) GetAlarmData() []*WlstElu_62D8_AlarmData {
	if m != nil {
		return m.AlarmData
	}
	return nil
}

type WlstElu_62D8_AlarmData struct {
	SwitchStatus  []int32 `protobuf:"varint,1,rep,packed,name=switch_status,json=switchStatus,proto3" json:"switch_status,omitempty"`
	AlarmValueSet int32   `protobuf:"varint,2,opt,name=alarm_value_set,json=alarmValueSet,proto3" json:"alarm_value_set,omitempty"`
	OptDelay      int32   `protobuf:"varint,3,opt,name=opt_delay,json=optDelay,proto3" json:"opt_delay,omitempty"`
	NowValue      int32   `protobuf:"varint,4,opt,name=now_value,json=nowValue,proto3" json:"now_value,omitempty"`
	ElValue       int32   `protobuf:"varint,5,opt,name=el_value,json=elValue,proto3" json:"el_value,omitempty"`
}

func (m *WlstElu_62D8_AlarmData) Reset()      { *m = WlstElu_62D8_AlarmData{} }
func (*WlstElu_62D8_AlarmData) ProtoMessage() {}
func (*WlstElu_62D8_AlarmData) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{3, 0}
}
func (m *WlstElu_62D8_AlarmData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_62D8_AlarmData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_62D8_AlarmData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_62D8_AlarmData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_62D8_AlarmData.Merge(m, src)
}
func (m *WlstElu_62D8_AlarmData) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_62D8_AlarmData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_62D8_AlarmData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_62D8_AlarmData proto.InternalMessageInfo

func (m *WlstElu_62D8_AlarmData) GetSwitchStatus() []int32 {
	if m != nil {
		return m.SwitchStatus
	}
	return nil
}

func (m *WlstElu_62D8_AlarmData) GetAlarmValueSet() int32 {
	if m != nil {
		return m.AlarmValueSet
	}
	return 0
}

func (m *WlstElu_62D8_AlarmData) GetOptDelay() int32 {
	if m != nil {
		return m.OptDelay
	}
	return 0
}

func (m *WlstElu_62D8_AlarmData) GetNowValue() int32 {
	if m != nil {
		return m.NowValue
	}
	return 0
}

func (m *WlstElu_62D8_AlarmData) GetElValue() int32 {
	if m != nil {
		return m.ElValue
	}
	return 0
}

// 事件查询
type WlstElu_625A struct {
	EventsCount   int32   `protobuf:"varint,1,opt,name=events_count,json=eventsCount,proto3" json:"events_count,omitempty"`
	LoopNo        []int32 `protobuf:"varint,2,rep,packed,name=loop_no,json=loopNo,proto3" json:"loop_no,omitempty"`
	AlarmValueSet int32   `protobuf:"varint,3,opt,name=alarm_value_set,json=alarmValueSet,proto3" json:"alarm_value_set,omitempty"`
	NowValue      int32   `protobuf:"varint,4,opt,name=now_value,json=nowValue,proto3" json:"now_value,omitempty"`
	DtAlarm       int64   `protobuf:"varint,5,opt,name=dt_alarm,json=dtAlarm,proto3" json:"dt_alarm,omitempty"`
}

func (m *WlstElu_625A) Reset()      { *m = WlstElu_625A{} }
func (*WlstElu_625A) ProtoMessage() {}
func (*WlstElu_625A) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{4}
}
func (m *WlstElu_625A) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_625A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_625A.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_625A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_625A.Merge(m, src)
}
func (m *WlstElu_625A) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_625A) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_625A.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_625A proto.InternalMessageInfo

func (m *WlstElu_625A) GetEventsCount() int32 {
	if m != nil {
		return m.EventsCount
	}
	return 0
}

func (m *WlstElu_625A) GetLoopNo() []int32 {
	if m != nil {
		return m.LoopNo
	}
	return nil
}

func (m *WlstElu_625A) GetAlarmValueSet() int32 {
	if m != nil {
		return m.AlarmValueSet
	}
	return 0
}

func (m *WlstElu_625A) GetNowValue() int32 {
	if m != nil {
		return m.NowValue
	}
	return 0
}

func (m *WlstElu_625A) GetDtAlarm() int64 {
	if m != nil {
		return m.DtAlarm
	}
	return 0
}

// 设置检测门限
type WlstElu_625B struct {
	WatchValueEl int32 `protobuf:"varint,1,opt,name=watch_value_el,json=watchValueEl,proto3" json:"watch_value_el,omitempty"`
	WatchValueTp int32 `protobuf:"varint,2,opt,name=watch_value_tp,json=watchValueTp,proto3" json:"watch_value_tp,omitempty"`
	Status       int32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstElu_625B) Reset()      { *m = WlstElu_625B{} }
func (*WlstElu_625B) ProtoMessage() {}
func (*WlstElu_625B) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{5}
}
func (m *WlstElu_625B) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_625B) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_625B.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_625B) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_625B.Merge(m, src)
}
func (m *WlstElu_625B) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_625B) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_625B.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_625B proto.InternalMessageInfo

func (m *WlstElu_625B) GetWatchValueEl() int32 {
	if m != nil {
		return m.WatchValueEl
	}
	return 0
}

func (m *WlstElu_625B) GetWatchValueTp() int32 {
	if m != nil {
		return m.WatchValueTp
	}
	return 0
}

func (m *WlstElu_625B) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 设置时钟
type WlstElu_625C struct {
	DtTimer int64 `protobuf:"varint,1,opt,name=dt_timer,json=dtTimer,proto3" json:"dt_timer,omitempty"`
	Status  int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstElu_625C) Reset()      { *m = WlstElu_625C{} }
func (*WlstElu_625C) ProtoMessage() {}
func (*WlstElu_625C) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{6}
}
func (m *WlstElu_625C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstElu_625C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstElu_625C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstElu_625C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstElu_625C.Merge(m, src)
}
func (m *WlstElu_625C) XXX_Size() int {
	return m.Size()
}
func (m *WlstElu_625C) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstElu_625C.DiscardUnknown(m)
}

var xxx_messageInfo_WlstElu_625C proto.InternalMessageInfo

func (m *WlstElu_625C) GetDtTimer() int64 {
	if m != nil {
		return m.DtTimer
	}
	return 0
}

func (m *WlstElu_625C) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

//光照度协议
type WlstAlsA700 struct {
	//光照度地址
	Addr int32 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	//1-设置成功，0-设置失败，b700_a500_b800
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	//0-每5s主动上报，1-选测上报,b600_3600_c600,2-按自定义间隔主动上报（多光控），3-按自定义间隔主动上报（485）,3700_b700_c700
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	//时间间隔（s），3800_c800
	Time int32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	//版本号，ca00
	Ver string `protobuf:"bytes,5,opt,name=ver,proto3" json:"ver,omitempty"`
	//光照度值，a600_a700_a800
	Lux float64 `protobuf:"fixed64,6,opt,name=lux,proto3" json:"lux,omitempty"`
	//光照度状态
	Error int32 `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *WlstAlsA700) Reset()      { *m = WlstAlsA700{} }
func (*WlstAlsA700) ProtoMessage() {}
func (*WlstAlsA700) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{7}
}
func (m *WlstAlsA700) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstAlsA700) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstAlsA700.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstAlsA700) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstAlsA700.Merge(m, src)
}
func (m *WlstAlsA700) XXX_Size() int {
	return m.Size()
}
func (m *WlstAlsA700) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstAlsA700.DiscardUnknown(m)
}

var xxx_messageInfo_WlstAlsA700 proto.InternalMessageInfo

func (m *WlstAlsA700) GetAddr() int32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *WlstAlsA700) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstAlsA700) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *WlstAlsA700) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *WlstAlsA700) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *WlstAlsA700) GetLux() float64 {
	if m != nil {
		return m.Lux
	}
	return 0
}

func (m *WlstAlsA700) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

//gps较时
type WlstGps_0000 struct {
	//经度
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	//纬度
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	//gps时间
	Gpsdate string `protobuf:"bytes,3,opt,name=gpsdate,proto3" json:"gpsdate,omitempty"`
}

func (m *WlstGps_0000) Reset()      { *m = WlstGps_0000{} }
func (*WlstGps_0000) ProtoMessage() {}
func (*WlstGps_0000) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{8}
}
func (m *WlstGps_0000) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGps_0000) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGps_0000.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGps_0000) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGps_0000.Merge(m, src)
}
func (m *WlstGps_0000) XXX_Size() int {
	return m.Size()
}
func (m *WlstGps_0000) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGps_0000.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGps_0000 proto.InternalMessageInfo

func (m *WlstGps_0000) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstGps_0000) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstGps_0000) GetGpsdate() string {
	if m != nil {
		return m.Gpsdate
	}
	return ""
}

//新版gps模式设置
type WlstGps_5901 struct {
	//经度
	WorkMode int32 `protobuf:"varint,1,opt,name=work_mode,json=workMode,proto3" json:"work_mode,omitempty"`
	//纬度
	TimeInterval int32 `protobuf:"varint,2,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	//gps时间
	AlarmDistance int32 `protobuf:"varint,3,opt,name=alarm_distance,json=alarmDistance,proto3" json:"alarm_distance,omitempty"`
	//设置结果
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	//index
	Nindex int32 `protobuf:"varint,5,opt,name=nindex,proto3" json:"nindex,omitempty"`
}

func (m *WlstGps_5901) Reset()      { *m = WlstGps_5901{} }
func (*WlstGps_5901) ProtoMessage() {}
func (*WlstGps_5901) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{9}
}
func (m *WlstGps_5901) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGps_5901) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGps_5901.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGps_5901) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGps_5901.Merge(m, src)
}
func (m *WlstGps_5901) XXX_Size() int {
	return m.Size()
}
func (m *WlstGps_5901) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGps_5901.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGps_5901 proto.InternalMessageInfo

func (m *WlstGps_5901) GetWorkMode() int32 {
	if m != nil {
		return m.WorkMode
	}
	return 0
}

func (m *WlstGps_5901) GetTimeInterval() int32 {
	if m != nil {
		return m.TimeInterval
	}
	return 0
}

func (m *WlstGps_5901) GetAlarmDistance() int32 {
	if m != nil {
		return m.AlarmDistance
	}
	return 0
}

func (m *WlstGps_5901) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstGps_5901) GetNindex() int32 {
	if m != nil {
		return m.Nindex
	}
	return 0
}

//新版gps选测
type WlstGps_5902 struct {
	//经度
	NewAddr int32 `protobuf:"varint,1,opt,name=new_addr,json=newAddr,proto3" json:"new_addr,omitempty"`
	//index
	Nindex int32 `protobuf:"varint,2,opt,name=nindex,proto3" json:"nindex,omitempty"`
}

func (m *WlstGps_5902) Reset()      { *m = WlstGps_5902{} }
func (*WlstGps_5902) ProtoMessage() {}
func (*WlstGps_5902) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{10}
}
func (m *WlstGps_5902) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGps_5902) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGps_5902.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGps_5902) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGps_5902.Merge(m, src)
}
func (m *WlstGps_5902) XXX_Size() int {
	return m.Size()
}
func (m *WlstGps_5902) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGps_5902.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGps_5902 proto.InternalMessageInfo

func (m *WlstGps_5902) GetNewAddr() int32 {
	if m != nil {
		return m.NewAddr
	}
	return 0
}

func (m *WlstGps_5902) GetNindex() int32 {
	if m != nil {
		return m.Nindex
	}
	return 0
}

//新版gps选测
type WlstGps_5903 struct {
	//经度
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
	//index
	Nindex int32 `protobuf:"varint,2,opt,name=nindex,proto3" json:"nindex,omitempty"`
}

func (m *WlstGps_5903) Reset()      { *m = WlstGps_5903{} }
func (*WlstGps_5903) ProtoMessage() {}
func (*WlstGps_5903) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{11}
}
func (m *WlstGps_5903) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGps_5903) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGps_5903.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGps_5903) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGps_5903.Merge(m, src)
}
func (m *WlstGps_5903) XXX_Size() int {
	return m.Size()
}
func (m *WlstGps_5903) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGps_5903.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGps_5903 proto.InternalMessageInfo

func (m *WlstGps_5903) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *WlstGps_5903) GetNindex() int32 {
	if m != nil {
		return m.Nindex
	}
	return 0
}

//新版gps选测
type WlstGps_5904 struct {
	//经度
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	//纬度
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	//gps时间
	Gpsdate int64 `protobuf:"varint,3,opt,name=gpsdate,proto3" json:"gpsdate,omitempty"`
	//index
	Nindex int32 `protobuf:"varint,4,opt,name=nindex,proto3" json:"nindex,omitempty"`
	//报警半径(m)
	Radius int32 `protobuf:"varint,5,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (m *WlstGps_5904) Reset()      { *m = WlstGps_5904{} }
func (*WlstGps_5904) ProtoMessage() {}
func (*WlstGps_5904) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{12}
}
func (m *WlstGps_5904) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstGps_5904) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstGps_5904.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstGps_5904) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstGps_5904.Merge(m, src)
}
func (m *WlstGps_5904) XXX_Size() int {
	return m.Size()
}
func (m *WlstGps_5904) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstGps_5904.DiscardUnknown(m)
}

var xxx_messageInfo_WlstGps_5904 proto.InternalMessageInfo

func (m *WlstGps_5904) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstGps_5904) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstGps_5904) GetGpsdate() int64 {
	if m != nil {
		return m.Gpsdate
	}
	return 0
}

func (m *WlstGps_5904) GetNindex() int32 {
	if m != nil {
		return m.Nindex
	}
	return 0
}

func (m *WlstGps_5904) GetRadius() int32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type WlstMru_9100 struct {
	//2007协议电表地址1
	Addr []int32 `protobuf:"varint,1,rep,packed,name=addr,proto3" json:"addr,omitempty"`
	//抄表类型(1A相，2B相，3C相，4正向有功总电能，5组合有功总电能)
	MeterReadingType int32 `protobuf:"varint,2,opt,name=meter_reading_type,json=meterReadingType,proto3" json:"meter_reading_type,omitempty"`
	//抄表时间段（0当前，1上月，2上上月。。。）
	MeterReadingDate int32 `protobuf:"varint,3,opt,name=meter_reading_date,json=meterReadingDate,proto3" json:"meter_reading_date,omitempty"`
	//电表波特率
	BaudRate int32 `protobuf:"varint,4,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`
	//数据
	MeterValue float64 `protobuf:"fixed64,5,opt,name=meter_value,json=meterValue,proto3" json:"meter_value,omitempty"`
	//协议版本，1-1997协议，2-2007协议
	Ver int32 `protobuf:"varint,6,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *WlstMru_9100) Reset()      { *m = WlstMru_9100{} }
func (*WlstMru_9100) ProtoMessage() {}
func (*WlstMru_9100) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b54be489a6899a, []int{13}
}
func (m *WlstMru_9100) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstMru_9100) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstMru_9100.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstMru_9100) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstMru_9100.Merge(m, src)
}
func (m *WlstMru_9100) XXX_Size() int {
	return m.Size()
}
func (m *WlstMru_9100) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstMru_9100.DiscardUnknown(m)
}

var xxx_messageInfo_WlstMru_9100 proto.InternalMessageInfo

func (m *WlstMru_9100) GetAddr() []int32 {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *WlstMru_9100) GetMeterReadingType() int32 {
	if m != nil {
		return m.MeterReadingType
	}
	return 0
}

func (m *WlstMru_9100) GetMeterReadingDate() int32 {
	if m != nil {
		return m.MeterReadingDate
	}
	return 0
}

func (m *WlstMru_9100) GetBaudRate() int32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *WlstMru_9100) GetMeterValue() float64 {
	if m != nil {
		return m.MeterValue
	}
	return 0
}

func (m *WlstMru_9100) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func init() {
	proto.RegisterType((*WlstElu_6255)(nil), "wlst.pb2.Wlst_elu_6255")
	proto.RegisterType((*WlstElu_6256)(nil), "wlst.pb2.Wlst_elu_6256")
	proto.RegisterType((*WlstElu_6256_WorkArgv)(nil), "wlst.pb2.Wlst_elu_6256.WorkArgv")
	proto.RegisterType((*WlstElu_6257)(nil), "wlst.pb2.Wlst_elu_6257")
	proto.RegisterType((*WlstElu_62D8)(nil), "wlst.pb2.Wlst_elu_62d8")
	proto.RegisterType((*WlstElu_62D8_AlarmData)(nil), "wlst.pb2.Wlst_elu_62d8.AlarmData")
	proto.RegisterType((*WlstElu_625A)(nil), "wlst.pb2.Wlst_elu_625a")
	proto.RegisterType((*WlstElu_625B)(nil), "wlst.pb2.Wlst_elu_625b")
	proto.RegisterType((*WlstElu_625C)(nil), "wlst.pb2.Wlst_elu_625c")
	proto.RegisterType((*WlstAlsA700)(nil), "wlst.pb2.Wlst_als_a700")
	proto.RegisterType((*WlstGps_0000)(nil), "wlst.pb2.Wlst_gps_0000")
	proto.RegisterType((*WlstGps_5901)(nil), "wlst.pb2.Wlst_gps_5901")
	proto.RegisterType((*WlstGps_5902)(nil), "wlst.pb2.Wlst_gps_5902")
	proto.RegisterType((*WlstGps_5903)(nil), "wlst.pb2.Wlst_gps_5903")
	proto.RegisterType((*WlstGps_5904)(nil), "wlst.pb2.Wlst_gps_5904")
	proto.RegisterType((*WlstMru_9100)(nil), "wlst.pb2.Wlst_mru_9100")
}

func init() { proto.RegisterFile("protocol_als.proto", fileDescriptor_16b54be489a6899a) }

var fileDescriptor_16b54be489a6899a = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xbd, 0x8f, 0x1b, 0x45,
	0x14, 0xf7, 0x78, 0xfd, 0x39, 0x77, 0x0e, 0xa7, 0x11, 0x0a, 0x9b, 0x0b, 0x5a, 0x1c, 0xf3, 0x75,
	0x05, 0xb2, 0x1c, 0x87, 0xbb, 0xe4, 0x0a, 0x24, 0xee, 0x30, 0x12, 0x14, 0xa1, 0xd8, 0x9c, 0x48,
	0x39, 0x1a, 0x7b, 0x46, 0x66, 0xe5, 0xf1, 0xce, 0x6a, 0x76, 0xd6, 0x9b, 0xeb, 0x68, 0x28, 0xe8,
	0x90, 0xa8, 0xe9, 0x23, 0x51, 0xf1, 0x5f, 0xd0, 0x71, 0x65, 0x4a, 0xce, 0xd7, 0x50, 0x46, 0xfc,
	0x05, 0x68, 0x3e, 0xd6, 0xf6, 0x9a, 0x98, 0x08, 0x29, 0xdd, 0x7b, 0xbf, 0xf7, 0xe6, 0xcd, 0x6f,
	0x7f, 0xef, 0xcd, 0x5b, 0x88, 0x12, 0x29, 0x94, 0x98, 0x08, 0x8e, 0x09, 0x4f, 0xfb, 0xc6, 0x41,
	0xad, 0x9c, 0xa7, 0xaa, 0x9f, 0x8c, 0x87, 0xbd, 0x73, 0xd8, 0x79, 0xca, 0x53, 0x85, 0x19, 0xcf,
	0xf0, 0xc9, 0xf0, 0xf8, 0x18, 0xdd, 0x81, 0xad, 0x98, 0xe5, 0x98, 0x50, 0x2a, 0x7d, 0xd0, 0x05,
	0x47, 0xf5, 0xb0, 0x19, 0xb3, 0xfc, 0x8c, 0x52, 0x89, 0x6e, 0xc3, 0x46, 0xaa, 0x88, 0xca, 0x52,
	0xbf, 0x6a, 0x02, 0xce, 0xeb, 0xfd, 0x0d, 0xca, 0x45, 0x4e, 0xd0, 0x67, 0xb0, 0x9d, 0x0b, 0x39,
	0xc3, 0x44, 0x4e, 0x17, 0x3e, 0xe8, 0x7a, 0x47, 0x7b, 0xc3, 0x6e, 0xbf, 0xb8, 0xb3, 0x5f, 0xca,
	0xed, 0x3f, 0x15, 0x72, 0x76, 0x26, 0xa7, 0x8b, 0xb0, 0x95, 0x3b, 0x6b, 0xd7, 0x45, 0x87, 0x3f,
	0x02, 0xd8, 0x2a, 0xd2, 0xd1, 0x5d, 0xd8, 0xe6, 0x42, 0x24, 0x78, 0x4e, 0xe4, 0xcc, 0x31, 0x6d,
	0x69, 0xe0, 0x31, 0x91, 0x33, 0x1d, 0x34, 0x04, 0xe6, 0x82, 0x32, 0x57, 0xc4, 0x94, 0x7f, 0x2c,
	0x28, 0x43, 0x1f, 0xc1, 0xb7, 0x08, 0x27, 0x72, 0x8e, 0x17, 0x84, 0x67, 0x0c, 0xa7, 0x4c, 0xf9,
	0x9e, 0x49, 0xe9, 0x18, 0xf8, 0x5b, 0x8d, 0x3e, 0x61, 0x4a, 0x17, 0x11, 0x89, 0xc2, 0x94, 0x71,
	0x72, 0xe9, 0xd7, 0x6c, 0x11, 0x91, 0xa8, 0x91, 0xf6, 0xb7, 0x85, 0x7b, 0x88, 0xee, 0xc0, 0x86,
	0xc9, 0x16, 0xe6, 0x83, 0xeb, 0xe7, 0xd5, 0x03, 0x10, 0xd6, 0x75, 0xba, 0xd8, 0x29, 0xdc, 0x0f,
	0xd5, 0x52, 0x11, 0xfa, 0x08, 0x7d, 0x0e, 0xa1, 0xa5, 0x46, 0x89, 0x22, 0x4e, 0xb9, 0x7b, 0xaf,
	0x54, 0x8e, 0x3e, 0xea, 0x9f, 0xe9, 0xcc, 0x11, 0x51, 0x24, 0x6c, 0x93, 0xc2, 0x3c, 0xfc, 0x0d,
	0xc0, 0xf6, 0x2a, 0x80, 0x3e, 0x86, 0x9d, 0x34, 0x8f, 0xd4, 0xe4, 0x3b, 0xec, 0x08, 0xac, 0xb9,
	0xed, 0xdb, 0xc0, 0x13, 0x83, 0xbf, 0x4a, 0x93, 0xea, 0x6b, 0x35, 0xf1, 0xca, 0x9a, 0xe8, 0x60,
	0x2c, 0x72, 0x5b, 0xa2, 0x10, 0x2c, 0x16, 0xb9, 0x39, 0xac, 0x07, 0x8b, 0x71, 0x17, 0xab, 0xdb,
	0xc1, 0x62, 0xdc, 0x84, 0x7a, 0xbf, 0x6e, 0x0d, 0x10, 0x41, 0xf7, 0xe0, 0x3e, 0x5b, 0xb0, 0x58,
	0xa5, 0x78, 0x22, 0xb2, 0x58, 0xb9, 0xfe, 0xee, 0x59, 0xec, 0x0b, 0x0d, 0xa1, 0x77, 0x60, 0xd3,
	0xf4, 0x3f, 0x16, 0x7e, 0x55, 0x7f, 0x54, 0xd8, 0xd0, 0xee, 0x37, 0xe2, 0xff, 0xb4, 0xf7, 0x3f,
	0xd9, 0x52, 0x85, 0xcd, 0x01, 0xc3, 0xd6, 0x0b, 0x9b, 0x54, 0x19, 0x5d, 0x7b, 0x69, 0x99, 0xec,
	0x18, 0x7d, 0x00, 0x6f, 0xe5, 0x44, 0x6b, 0x6c, 0x2f, 0x64, 0xdc, 0xd1, 0xdd, 0x37, 0xa8, 0xa9,
	0xf7, 0x25, 0xdf, 0xce, 0x52, 0x89, 0x13, 0x78, 0x23, 0xeb, 0x22, 0xd9, 0x18, 0x15, 0xaf, 0x34,
	0x2a, 0x5b, 0xe3, 0x36, 0x71, 0x04, 0x55, 0x34, 0x67, 0xf6, 0x9d, 0x1a, 0x82, 0x17, 0xda, 0xdd,
	0x39, 0x6e, 0xbf, 0x14, 0x32, 0x13, 0x9e, 0x62, 0xf2, 0x70, 0x30, 0x40, 0x08, 0xd6, 0x36, 0x1e,
	0xba, 0xb1, 0x77, 0x9d, 0xd6, 0xb9, 0xe6, 0x35, 0x59, 0x5e, 0xc6, 0xd6, 0x98, 0x66, 0xe0, 0xd4,
	0x33, 0x36, 0x3a, 0x80, 0xde, 0x82, 0x49, 0x23, 0x5a, 0x3b, 0xd4, 0xa6, 0x46, 0x78, 0xf6, 0xcc,
	0x6f, 0x74, 0xc1, 0x11, 0x08, 0xb5, 0x89, 0xde, 0x86, 0x75, 0x26, 0xa5, 0x90, 0x7e, 0xd3, 0x1c,
	0xb4, 0x4e, 0x6f, 0xe2, 0xe8, 0x4d, 0x93, 0x14, 0x0f, 0x06, 0x83, 0x01, 0x7a, 0x57, 0x3f, 0xf1,
	0x78, 0x1a, 0xa9, 0x8c, 0x32, 0xc3, 0x11, 0x84, 0x6b, 0x00, 0x1d, 0xc2, 0x16, 0x27, 0xca, 0x06,
	0xab, 0x26, 0xb8, 0xf2, 0x91, 0x0f, 0x9b, 0xd3, 0x24, 0xa5, 0x44, 0x59, 0xbe, 0xed, 0xb0, 0x70,
	0x7b, 0xcf, 0xc1, 0xc6, 0x2d, 0xc7, 0xa7, 0x83, 0xfb, 0xe5, 0x5d, 0x01, 0xb6, 0x76, 0xc5, 0xfb,
	0xb0, 0xa3, 0xbf, 0x0a, 0x47, 0xb1, 0x62, 0x72, 0x41, 0x78, 0xd1, 0x34, 0x0d, 0x7e, 0xed, 0x30,
	0xf4, 0x21, 0xbc, 0xe5, 0x5e, 0x6d, 0x94, 0x2a, 0x12, 0x4f, 0x58, 0x69, 0xe0, 0x46, 0x0e, 0xdc,
	0x50, 0xb6, 0x56, 0x52, 0xf6, 0x36, 0x6c, 0xc4, 0x51, 0x4c, 0xd9, 0x33, 0xf7, 0x2e, 0x9c, 0xb7,
	0xea, 0xb9, 0x63, 0x3a, 0x7c, 0xcd, 0x6e, 0x76, 0x35, 0xaa, 0xa5, 0x1a, 0xa7, 0xe5, 0x1a, 0x0f,
	0x8a, 0xf6, 0x80, 0x75, 0x7b, 0x76, 0x1d, 0xfd, 0x79, 0x4b, 0xa9, 0x4f, 0xdf, 0x5c, 0x3f, 0xbc,
	0x55, 0x3f, 0x36, 0x6e, 0xaf, 0x6d, 0xde, 0xae, 0x71, 0x49, 0x68, 0x94, 0xa5, 0x85, 0x28, 0xd6,
	0xeb, 0xfd, 0x51, 0xb0, 0x9a, 0xcb, 0x0c, 0x9f, 0xde, 0x2f, 0x0d, 0xb1, 0xb7, 0x1a, 0xe2, 0x4f,
	0x20, 0x9a, 0x33, 0xc5, 0x24, 0x96, 0x8c, 0xd0, 0x28, 0x9e, 0x62, 0x75, 0x99, 0x14, 0x3f, 0x82,
	0x03, 0x13, 0x09, 0x6d, 0xe0, 0xe2, 0x32, 0x61, 0xff, 0xce, 0x5e, 0x11, 0xdd, 0xca, 0x1e, 0x69,
	0xc6, 0x77, 0x61, 0x7b, 0x4c, 0x32, 0x8a, 0xa5, 0x4e, 0x72, 0x7b, 0x43, 0x03, 0xa1, 0x0e, 0xbe,
	0x07, 0xf7, 0x6c, 0xa9, 0xf5, 0xa2, 0x03, 0x21, 0x34, 0x90, 0x5d, 0x2c, 0x4e, 0xff, 0x86, 0x39,
	0xa7, 0xcd, 0xf3, 0x93, 0xab, 0xeb, 0xa0, 0xf2, 0xe2, 0x3a, 0xa8, 0xbc, 0xbc, 0x0e, 0xc0, 0xf7,
	0xcb, 0x00, 0x3c, 0x5f, 0x06, 0xe0, 0xf7, 0x65, 0x00, 0xae, 0x96, 0x01, 0xf8, 0x73, 0x19, 0x80,
	0xbf, 0x96, 0x41, 0xe5, 0xe5, 0x32, 0x00, 0x3f, 0xdd, 0x04, 0x95, 0xab, 0x9b, 0xa0, 0xf2, 0xe2,
	0x26, 0xa8, 0x7c, 0x05, 0xc6, 0x0d, 0xf3, 0x2f, 0x7f, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0xdd, 0x12, 0x73, 0xe1, 0x07, 0x00, 0x00,
}

func (this *WlstElu_6255) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_6255)
	if !ok {
		that2, ok := that.(WlstElu_6255)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewAddr != that1.NewAddr {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WlstElu_6256) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_6256)
	if !ok {
		that2, ok := that.(WlstElu_6256)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WorkArgv) != len(that1.WorkArgv) {
		return false
	}
	for i := range this.WorkArgv {
		if !this.WorkArgv[i].Equal(that1.WorkArgv[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WlstElu_6256_WorkArgv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_6256_WorkArgv)
	if !ok {
		that2, ok := that.(WlstElu_6256_WorkArgv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoopMark != that1.LoopMark {
		return false
	}
	if this.WorkMode != that1.WorkMode {
		return false
	}
	if this.AlarmValueSet != that1.AlarmValueSet {
		return false
	}
	if this.OptDelay != that1.OptDelay {
		return false
	}
	return true
}
func (this *WlstElu_6257) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_6257)
	if !ok {
		that2, ok := that.(WlstElu_6257)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OptDo) != len(that1.OptDo) {
		return false
	}
	for i := range this.OptDo {
		if this.OptDo[i] != that1.OptDo[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WlstElu_62D8) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_62D8)
	if !ok {
		that2, ok := that.(WlstElu_62D8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AlarmData) != len(that1.AlarmData) {
		return false
	}
	for i := range this.AlarmData {
		if !this.AlarmData[i].Equal(that1.AlarmData[i]) {
			return false
		}
	}
	return true
}
func (this *WlstElu_62D8_AlarmData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_62D8_AlarmData)
	if !ok {
		that2, ok := that.(WlstElu_62D8_AlarmData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwitchStatus) != len(that1.SwitchStatus) {
		return false
	}
	for i := range this.SwitchStatus {
		if this.SwitchStatus[i] != that1.SwitchStatus[i] {
			return false
		}
	}
	if this.AlarmValueSet != that1.AlarmValueSet {
		return false
	}
	if this.OptDelay != that1.OptDelay {
		return false
	}
	if this.NowValue != that1.NowValue {
		return false
	}
	if this.ElValue != that1.ElValue {
		return false
	}
	return true
}
func (this *WlstElu_625A) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_625A)
	if !ok {
		that2, ok := that.(WlstElu_625A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventsCount != that1.EventsCount {
		return false
	}
	if len(this.LoopNo) != len(that1.LoopNo) {
		return false
	}
	for i := range this.LoopNo {
		if this.LoopNo[i] != that1.LoopNo[i] {
			return false
		}
	}
	if this.AlarmValueSet != that1.AlarmValueSet {
		return false
	}
	if this.NowValue != that1.NowValue {
		return false
	}
	if this.DtAlarm != that1.DtAlarm {
		return false
	}
	return true
}
func (this *WlstElu_625B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_625B)
	if !ok {
		that2, ok := that.(WlstElu_625B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WatchValueEl != that1.WatchValueEl {
		return false
	}
	if this.WatchValueTp != that1.WatchValueTp {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WlstElu_625C) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstElu_625C)
	if !ok {
		that2, ok := that.(WlstElu_625C)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DtTimer != that1.DtTimer {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WlstAlsA700) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstAlsA700)
	if !ok {
		that2, ok := that.(WlstAlsA700)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Ver != that1.Ver {
		return false
	}
	if this.Lux != that1.Lux {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *WlstGps_0000) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstGps_0000)
	if !ok {
		that2, ok := that.(WlstGps_0000)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Gpsdate != that1.Gpsdate {
		return false
	}
	return true
}
func (this *WlstGps_5901) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstGps_5901)
	if !ok {
		that2, ok := that.(WlstGps_5901)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkMode != that1.WorkMode {
		return false
	}
	if this.TimeInterval != that1.TimeInterval {
		return false
	}
	if this.AlarmDistance != that1.AlarmDistance {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Nindex != that1.Nindex {
		return false
	}
	return true
}
func (this *WlstGps_5902) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstGps_5902)
	if !ok {
		that2, ok := that.(WlstGps_5902)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewAddr != that1.NewAddr {
		return false
	}
	if this.Nindex != that1.Nindex {
		return false
	}
	return true
}
func (this *WlstGps_5903) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstGps_5903)
	if !ok {
		that2, ok := that.(WlstGps_5903)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ver != that1.Ver {
		return false
	}
	if this.Nindex != that1.Nindex {
		return false
	}
	return true
}
func (this *WlstGps_5904) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstGps_5904)
	if !ok {
		that2, ok := that.(WlstGps_5904)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Gpsdate != that1.Gpsdate {
		return false
	}
	if this.Nindex != that1.Nindex {
		return false
	}
	if this.Radius != that1.Radius {
		return false
	}
	return true
}
func (this *WlstMru_9100) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WlstMru_9100)
	if !ok {
		that2, ok := that.(WlstMru_9100)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addr) != len(that1.Addr) {
		return false
	}
	for i := range this.Addr {
		if this.Addr[i] != that1.Addr[i] {
			return false
		}
	}
	if this.MeterReadingType != that1.MeterReadingType {
		return false
	}
	if this.MeterReadingDate != that1.MeterReadingDate {
		return false
	}
	if this.BaudRate != that1.BaudRate {
		return false
	}
	if this.MeterValue != that1.MeterValue {
		return false
	}
	if this.Ver != that1.Ver {
		return false
	}
	return true
}
func (this *WlstElu_6255) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstElu_6255{")
	s = append(s, "NewAddr: "+fmt.Sprintf("%#v", this.NewAddr)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_6256) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstElu_6256{")
	if this.WorkArgv != nil {
		s = append(s, "WorkArgv: "+fmt.Sprintf("%#v", this.WorkArgv)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_6256_WorkArgv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&wlst_pb2.WlstElu_6256_WorkArgv{")
	s = append(s, "LoopMark: "+fmt.Sprintf("%#v", this.LoopMark)+",\n")
	s = append(s, "WorkMode: "+fmt.Sprintf("%#v", this.WorkMode)+",\n")
	s = append(s, "AlarmValueSet: "+fmt.Sprintf("%#v", this.AlarmValueSet)+",\n")
	s = append(s, "OptDelay: "+fmt.Sprintf("%#v", this.OptDelay)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_6257) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstElu_6257{")
	s = append(s, "OptDo: "+fmt.Sprintf("%#v", this.OptDo)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_62D8) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&wlst_pb2.WlstElu_62D8{")
	if this.AlarmData != nil {
		s = append(s, "AlarmData: "+fmt.Sprintf("%#v", this.AlarmData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_62D8_AlarmData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&wlst_pb2.WlstElu_62D8_AlarmData{")
	s = append(s, "SwitchStatus: "+fmt.Sprintf("%#v", this.SwitchStatus)+",\n")
	s = append(s, "AlarmValueSet: "+fmt.Sprintf("%#v", this.AlarmValueSet)+",\n")
	s = append(s, "OptDelay: "+fmt.Sprintf("%#v", this.OptDelay)+",\n")
	s = append(s, "NowValue: "+fmt.Sprintf("%#v", this.NowValue)+",\n")
	s = append(s, "ElValue: "+fmt.Sprintf("%#v", this.ElValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_625A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&wlst_pb2.WlstElu_625A{")
	s = append(s, "EventsCount: "+fmt.Sprintf("%#v", this.EventsCount)+",\n")
	s = append(s, "LoopNo: "+fmt.Sprintf("%#v", this.LoopNo)+",\n")
	s = append(s, "AlarmValueSet: "+fmt.Sprintf("%#v", this.AlarmValueSet)+",\n")
	s = append(s, "NowValue: "+fmt.Sprintf("%#v", this.NowValue)+",\n")
	s = append(s, "DtAlarm: "+fmt.Sprintf("%#v", this.DtAlarm)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_625B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&wlst_pb2.WlstElu_625B{")
	s = append(s, "WatchValueEl: "+fmt.Sprintf("%#v", this.WatchValueEl)+",\n")
	s = append(s, "WatchValueTp: "+fmt.Sprintf("%#v", this.WatchValueTp)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstElu_625C) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstElu_625C{")
	s = append(s, "DtTimer: "+fmt.Sprintf("%#v", this.DtTimer)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstAlsA700) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&wlst_pb2.WlstAlsA700{")
	s = append(s, "Addr: "+fmt.Sprintf("%#v", this.Addr)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Ver: "+fmt.Sprintf("%#v", this.Ver)+",\n")
	s = append(s, "Lux: "+fmt.Sprintf("%#v", this.Lux)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstGps_0000) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&wlst_pb2.WlstGps_0000{")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Gpsdate: "+fmt.Sprintf("%#v", this.Gpsdate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstGps_5901) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&wlst_pb2.WlstGps_5901{")
	s = append(s, "WorkMode: "+fmt.Sprintf("%#v", this.WorkMode)+",\n")
	s = append(s, "TimeInterval: "+fmt.Sprintf("%#v", this.TimeInterval)+",\n")
	s = append(s, "AlarmDistance: "+fmt.Sprintf("%#v", this.AlarmDistance)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Nindex: "+fmt.Sprintf("%#v", this.Nindex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstGps_5902) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstGps_5902{")
	s = append(s, "NewAddr: "+fmt.Sprintf("%#v", this.NewAddr)+",\n")
	s = append(s, "Nindex: "+fmt.Sprintf("%#v", this.Nindex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstGps_5903) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wlst_pb2.WlstGps_5903{")
	s = append(s, "Ver: "+fmt.Sprintf("%#v", this.Ver)+",\n")
	s = append(s, "Nindex: "+fmt.Sprintf("%#v", this.Nindex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstGps_5904) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&wlst_pb2.WlstGps_5904{")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Gpsdate: "+fmt.Sprintf("%#v", this.Gpsdate)+",\n")
	s = append(s, "Nindex: "+fmt.Sprintf("%#v", this.Nindex)+",\n")
	s = append(s, "Radius: "+fmt.Sprintf("%#v", this.Radius)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WlstMru_9100) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&wlst_pb2.WlstMru_9100{")
	s = append(s, "Addr: "+fmt.Sprintf("%#v", this.Addr)+",\n")
	s = append(s, "MeterReadingType: "+fmt.Sprintf("%#v", this.MeterReadingType)+",\n")
	s = append(s, "MeterReadingDate: "+fmt.Sprintf("%#v", this.MeterReadingDate)+",\n")
	s = append(s, "BaudRate: "+fmt.Sprintf("%#v", this.BaudRate)+",\n")
	s = append(s, "MeterValue: "+fmt.Sprintf("%#v", this.MeterValue)+",\n")
	s = append(s, "Ver: "+fmt.Sprintf("%#v", this.Ver)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtocolAls(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WlstElu_6255) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_6255) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_6255) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.NewAddr != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.NewAddr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_6256) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_6256) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_6256) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WorkArgv) > 0 {
		for iNdEx := len(m.WorkArgv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkArgv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolAls(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_6256_WorkArgv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_6256_WorkArgv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_6256_WorkArgv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptDelay != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.OptDelay))
		i--
		dAtA[i] = 0x20
	}
	if m.AlarmValueSet != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.AlarmValueSet))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkMode != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.WorkMode))
		i--
		dAtA[i] = 0x10
	}
	if m.LoopMark != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.LoopMark))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_6257) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_6257) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_6257) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OptDo) > 0 {
		dAtA2 := make([]byte, len(m.OptDo)*10)
		var j1 int
		for _, num1 := range m.OptDo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProtocolAls(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_62D8) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_62D8) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_62D8) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlarmData) > 0 {
		for iNdEx := len(m.AlarmData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlarmData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolAls(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_62D8_AlarmData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_62D8_AlarmData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_62D8_AlarmData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ElValue != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.ElValue))
		i--
		dAtA[i] = 0x28
	}
	if m.NowValue != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.NowValue))
		i--
		dAtA[i] = 0x20
	}
	if m.OptDelay != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.OptDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.AlarmValueSet != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.AlarmValueSet))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SwitchStatus) > 0 {
		dAtA4 := make([]byte, len(m.SwitchStatus)*10)
		var j3 int
		for _, num1 := range m.SwitchStatus {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintProtocolAls(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_625A) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_625A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_625A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DtAlarm != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.DtAlarm))
		i--
		dAtA[i] = 0x28
	}
	if m.NowValue != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.NowValue))
		i--
		dAtA[i] = 0x20
	}
	if m.AlarmValueSet != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.AlarmValueSet))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LoopNo) > 0 {
		dAtA6 := make([]byte, len(m.LoopNo)*10)
		var j5 int
		for _, num1 := range m.LoopNo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintProtocolAls(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.EventsCount != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.EventsCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_625B) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_625B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_625B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.WatchValueTp != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.WatchValueTp))
		i--
		dAtA[i] = 0x10
	}
	if m.WatchValueEl != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.WatchValueEl))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstElu_625C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstElu_625C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstElu_625C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.DtTimer != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.DtTimer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstAlsA700) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstAlsA700) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstAlsA700) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x38
	}
	if m.Lux != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lux))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintProtocolAls(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Time != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	if m.Mode != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstGps_0000) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGps_0000) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGps_0000) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gpsdate) > 0 {
		i -= len(m.Gpsdate)
		copy(dAtA[i:], m.Gpsdate)
		i = encodeVarintProtocolAls(dAtA, i, uint64(len(m.Gpsdate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x11
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstGps_5901) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGps_5901) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGps_5901) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nindex != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Nindex))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.AlarmDistance != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.AlarmDistance))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeInterval != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.TimeInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.WorkMode != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.WorkMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstGps_5902) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGps_5902) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGps_5902) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nindex != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Nindex))
		i--
		dAtA[i] = 0x10
	}
	if m.NewAddr != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.NewAddr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstGps_5903) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGps_5903) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGps_5903) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nindex != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Nindex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintProtocolAls(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstGps_5904) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstGps_5904) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstGps_5904) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Radius != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Radius))
		i--
		dAtA[i] = 0x28
	}
	if m.Nindex != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Nindex))
		i--
		dAtA[i] = 0x20
	}
	if m.Gpsdate != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Gpsdate))
		i--
		dAtA[i] = 0x18
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x11
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstMru_9100) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstMru_9100) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstMru_9100) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ver != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.Ver))
		i--
		dAtA[i] = 0x30
	}
	if m.MeterValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeterValue))))
		i--
		dAtA[i] = 0x29
	}
	if m.BaudRate != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.BaudRate))
		i--
		dAtA[i] = 0x20
	}
	if m.MeterReadingDate != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.MeterReadingDate))
		i--
		dAtA[i] = 0x18
	}
	if m.MeterReadingType != 0 {
		i = encodeVarintProtocolAls(dAtA, i, uint64(m.MeterReadingType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		dAtA8 := make([]byte, len(m.Addr)*10)
		var j7 int
		for _, num1 := range m.Addr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintProtocolAls(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocolAls(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocolAls(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WlstElu_6255) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAddr != 0 {
		n += 1 + sovProtocolAls(uint64(m.NewAddr))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	return n
}

func (m *WlstElu_6256) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkArgv) > 0 {
		for _, e := range m.WorkArgv {
			l = e.Size()
			n += 1 + l + sovProtocolAls(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	return n
}

func (m *WlstElu_6256_WorkArgv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopMark != 0 {
		n += 1 + sovProtocolAls(uint64(m.LoopMark))
	}
	if m.WorkMode != 0 {
		n += 1 + sovProtocolAls(uint64(m.WorkMode))
	}
	if m.AlarmValueSet != 0 {
		n += 1 + sovProtocolAls(uint64(m.AlarmValueSet))
	}
	if m.OptDelay != 0 {
		n += 1 + sovProtocolAls(uint64(m.OptDelay))
	}
	return n
}

func (m *WlstElu_6257) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptDo) > 0 {
		l = 0
		for _, e := range m.OptDo {
			l += sovProtocolAls(uint64(e))
		}
		n += 1 + sovProtocolAls(uint64(l)) + l
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	return n
}

func (m *WlstElu_62D8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlarmData) > 0 {
		for _, e := range m.AlarmData {
			l = e.Size()
			n += 1 + l + sovProtocolAls(uint64(l))
		}
	}
	return n
}

func (m *WlstElu_62D8_AlarmData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwitchStatus) > 0 {
		l = 0
		for _, e := range m.SwitchStatus {
			l += sovProtocolAls(uint64(e))
		}
		n += 1 + sovProtocolAls(uint64(l)) + l
	}
	if m.AlarmValueSet != 0 {
		n += 1 + sovProtocolAls(uint64(m.AlarmValueSet))
	}
	if m.OptDelay != 0 {
		n += 1 + sovProtocolAls(uint64(m.OptDelay))
	}
	if m.NowValue != 0 {
		n += 1 + sovProtocolAls(uint64(m.NowValue))
	}
	if m.ElValue != 0 {
		n += 1 + sovProtocolAls(uint64(m.ElValue))
	}
	return n
}

func (m *WlstElu_625A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventsCount != 0 {
		n += 1 + sovProtocolAls(uint64(m.EventsCount))
	}
	if len(m.LoopNo) > 0 {
		l = 0
		for _, e := range m.LoopNo {
			l += sovProtocolAls(uint64(e))
		}
		n += 1 + sovProtocolAls(uint64(l)) + l
	}
	if m.AlarmValueSet != 0 {
		n += 1 + sovProtocolAls(uint64(m.AlarmValueSet))
	}
	if m.NowValue != 0 {
		n += 1 + sovProtocolAls(uint64(m.NowValue))
	}
	if m.DtAlarm != 0 {
		n += 1 + sovProtocolAls(uint64(m.DtAlarm))
	}
	return n
}

func (m *WlstElu_625B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WatchValueEl != 0 {
		n += 1 + sovProtocolAls(uint64(m.WatchValueEl))
	}
	if m.WatchValueTp != 0 {
		n += 1 + sovProtocolAls(uint64(m.WatchValueTp))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	return n
}

func (m *WlstElu_625C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtTimer != 0 {
		n += 1 + sovProtocolAls(uint64(m.DtTimer))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	return n
}

func (m *WlstAlsA700) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovProtocolAls(uint64(m.Addr))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	if m.Mode != 0 {
		n += 1 + sovProtocolAls(uint64(m.Mode))
	}
	if m.Time != 0 {
		n += 1 + sovProtocolAls(uint64(m.Time))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovProtocolAls(uint64(l))
	}
	if m.Lux != 0 {
		n += 9
	}
	if m.Error != 0 {
		n += 1 + sovProtocolAls(uint64(m.Error))
	}
	return n
}

func (m *WlstGps_0000) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	l = len(m.Gpsdate)
	if l > 0 {
		n += 1 + l + sovProtocolAls(uint64(l))
	}
	return n
}

func (m *WlstGps_5901) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkMode != 0 {
		n += 1 + sovProtocolAls(uint64(m.WorkMode))
	}
	if m.TimeInterval != 0 {
		n += 1 + sovProtocolAls(uint64(m.TimeInterval))
	}
	if m.AlarmDistance != 0 {
		n += 1 + sovProtocolAls(uint64(m.AlarmDistance))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolAls(uint64(m.Status))
	}
	if m.Nindex != 0 {
		n += 1 + sovProtocolAls(uint64(m.Nindex))
	}
	return n
}

func (m *WlstGps_5902) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAddr != 0 {
		n += 1 + sovProtocolAls(uint64(m.NewAddr))
	}
	if m.Nindex != 0 {
		n += 1 + sovProtocolAls(uint64(m.Nindex))
	}
	return n
}

func (m *WlstGps_5903) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovProtocolAls(uint64(l))
	}
	if m.Nindex != 0 {
		n += 1 + sovProtocolAls(uint64(m.Nindex))
	}
	return n
}

func (m *WlstGps_5904) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Gpsdate != 0 {
		n += 1 + sovProtocolAls(uint64(m.Gpsdate))
	}
	if m.Nindex != 0 {
		n += 1 + sovProtocolAls(uint64(m.Nindex))
	}
	if m.Radius != 0 {
		n += 1 + sovProtocolAls(uint64(m.Radius))
	}
	return n
}

func (m *WlstMru_9100) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addr) > 0 {
		l = 0
		for _, e := range m.Addr {
			l += sovProtocolAls(uint64(e))
		}
		n += 1 + sovProtocolAls(uint64(l)) + l
	}
	if m.MeterReadingType != 0 {
		n += 1 + sovProtocolAls(uint64(m.MeterReadingType))
	}
	if m.MeterReadingDate != 0 {
		n += 1 + sovProtocolAls(uint64(m.MeterReadingDate))
	}
	if m.BaudRate != 0 {
		n += 1 + sovProtocolAls(uint64(m.BaudRate))
	}
	if m.MeterValue != 0 {
		n += 9
	}
	if m.Ver != 0 {
		n += 1 + sovProtocolAls(uint64(m.Ver))
	}
	return n
}

func sovProtocolAls(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocolAls(x uint64) (n int) {
	return sovProtocolAls(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WlstElu_6255) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_6255{`,
		`NewAddr:` + fmt.Sprintf("%v", this.NewAddr) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_6256) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkArgv := "[]*WlstElu_6256_WorkArgv{"
	for _, f := range this.WorkArgv {
		repeatedStringForWorkArgv += strings.Replace(fmt.Sprintf("%v", f), "WlstElu_6256_WorkArgv", "WlstElu_6256_WorkArgv", 1) + ","
	}
	repeatedStringForWorkArgv += "}"
	s := strings.Join([]string{`&WlstElu_6256{`,
		`WorkArgv:` + repeatedStringForWorkArgv + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_6256_WorkArgv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_6256_WorkArgv{`,
		`LoopMark:` + fmt.Sprintf("%v", this.LoopMark) + `,`,
		`WorkMode:` + fmt.Sprintf("%v", this.WorkMode) + `,`,
		`AlarmValueSet:` + fmt.Sprintf("%v", this.AlarmValueSet) + `,`,
		`OptDelay:` + fmt.Sprintf("%v", this.OptDelay) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_6257) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_6257{`,
		`OptDo:` + fmt.Sprintf("%v", this.OptDo) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_62D8) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlarmData := "[]*WlstElu_62D8_AlarmData{"
	for _, f := range this.AlarmData {
		repeatedStringForAlarmData += strings.Replace(fmt.Sprintf("%v", f), "WlstElu_62D8_AlarmData", "WlstElu_62D8_AlarmData", 1) + ","
	}
	repeatedStringForAlarmData += "}"
	s := strings.Join([]string{`&WlstElu_62D8{`,
		`AlarmData:` + repeatedStringForAlarmData + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_62D8_AlarmData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_62D8_AlarmData{`,
		`SwitchStatus:` + fmt.Sprintf("%v", this.SwitchStatus) + `,`,
		`AlarmValueSet:` + fmt.Sprintf("%v", this.AlarmValueSet) + `,`,
		`OptDelay:` + fmt.Sprintf("%v", this.OptDelay) + `,`,
		`NowValue:` + fmt.Sprintf("%v", this.NowValue) + `,`,
		`ElValue:` + fmt.Sprintf("%v", this.ElValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_625A) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_625A{`,
		`EventsCount:` + fmt.Sprintf("%v", this.EventsCount) + `,`,
		`LoopNo:` + fmt.Sprintf("%v", this.LoopNo) + `,`,
		`AlarmValueSet:` + fmt.Sprintf("%v", this.AlarmValueSet) + `,`,
		`NowValue:` + fmt.Sprintf("%v", this.NowValue) + `,`,
		`DtAlarm:` + fmt.Sprintf("%v", this.DtAlarm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_625B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_625B{`,
		`WatchValueEl:` + fmt.Sprintf("%v", this.WatchValueEl) + `,`,
		`WatchValueTp:` + fmt.Sprintf("%v", this.WatchValueTp) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstElu_625C) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstElu_625C{`,
		`DtTimer:` + fmt.Sprintf("%v", this.DtTimer) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstAlsA700) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstAlsA700{`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Ver:` + fmt.Sprintf("%v", this.Ver) + `,`,
		`Lux:` + fmt.Sprintf("%v", this.Lux) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstGps_0000) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstGps_0000{`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Gpsdate:` + fmt.Sprintf("%v", this.Gpsdate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstGps_5901) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstGps_5901{`,
		`WorkMode:` + fmt.Sprintf("%v", this.WorkMode) + `,`,
		`TimeInterval:` + fmt.Sprintf("%v", this.TimeInterval) + `,`,
		`AlarmDistance:` + fmt.Sprintf("%v", this.AlarmDistance) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Nindex:` + fmt.Sprintf("%v", this.Nindex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstGps_5902) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstGps_5902{`,
		`NewAddr:` + fmt.Sprintf("%v", this.NewAddr) + `,`,
		`Nindex:` + fmt.Sprintf("%v", this.Nindex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstGps_5903) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstGps_5903{`,
		`Ver:` + fmt.Sprintf("%v", this.Ver) + `,`,
		`Nindex:` + fmt.Sprintf("%v", this.Nindex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstGps_5904) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstGps_5904{`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Gpsdate:` + fmt.Sprintf("%v", this.Gpsdate) + `,`,
		`Nindex:` + fmt.Sprintf("%v", this.Nindex) + `,`,
		`Radius:` + fmt.Sprintf("%v", this.Radius) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WlstMru_9100) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WlstMru_9100{`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`MeterReadingType:` + fmt.Sprintf("%v", this.MeterReadingType) + `,`,
		`MeterReadingDate:` + fmt.Sprintf("%v", this.MeterReadingDate) + `,`,
		`BaudRate:` + fmt.Sprintf("%v", this.BaudRate) + `,`,
		`MeterValue:` + fmt.Sprintf("%v", this.MeterValue) + `,`,
		`Ver:` + fmt.Sprintf("%v", this.Ver) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtocolAls(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WlstElu_6255) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_6255: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_6255: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddr", wireType)
			}
			m.NewAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAddr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_6256) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_6256: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_6256: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkArgv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolAls
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkArgv = append(m.WorkArgv, &WlstElu_6256_WorkArgv{})
			if err := m.WorkArgv[len(m.WorkArgv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_6256_WorkArgv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkArgv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkArgv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopMark", wireType)
			}
			m.LoopMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkMode", wireType)
			}
			m.WorkMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmValueSet", wireType)
			}
			m.AlarmValueSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmValueSet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptDelay", wireType)
			}
			m.OptDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptDelay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_6257) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_6257: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_6257: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OptDo = append(m.OptDo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolAls
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolAls
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OptDo) == 0 {
					m.OptDo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolAls
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OptDo = append(m.OptDo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OptDo", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_62D8) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_62d8: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_62d8: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolAls
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlarmData = append(m.AlarmData, &WlstElu_62D8_AlarmData{})
			if err := m.AlarmData[len(m.AlarmData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_62D8_AlarmData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchStatus = append(m.SwitchStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolAls
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolAls
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SwitchStatus) == 0 {
					m.SwitchStatus = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolAls
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchStatus = append(m.SwitchStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchStatus", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmValueSet", wireType)
			}
			m.AlarmValueSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmValueSet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptDelay", wireType)
			}
			m.OptDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptDelay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowValue", wireType)
			}
			m.NowValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElValue", wireType)
			}
			m.ElValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_625A) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_625a: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_625a: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsCount", wireType)
			}
			m.EventsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopNo = append(m.LoopNo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolAls
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolAls
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopNo) == 0 {
					m.LoopNo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolAls
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopNo = append(m.LoopNo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopNo", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmValueSet", wireType)
			}
			m.AlarmValueSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmValueSet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowValue", wireType)
			}
			m.NowValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtAlarm", wireType)
			}
			m.DtAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtAlarm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_625B) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_625b: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_625b: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchValueEl", wireType)
			}
			m.WatchValueEl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchValueEl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchValueTp", wireType)
			}
			m.WatchValueTp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchValueTp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstElu_625C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_elu_625c: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_elu_625c: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtTimer", wireType)
			}
			m.DtTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtTimer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstAlsA700) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_als_a700: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_als_a700: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolAls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lux", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lux = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGps_0000) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gps_0000: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gps_0000: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpsdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolAls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpsdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGps_5901) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gps_5901: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gps_5901: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkMode", wireType)
			}
			m.WorkMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInterval", wireType)
			}
			m.TimeInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmDistance", wireType)
			}
			m.AlarmDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmDistance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nindex", wireType)
			}
			m.Nindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGps_5902) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gps_5902: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gps_5902: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddr", wireType)
			}
			m.NewAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAddr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nindex", wireType)
			}
			m.Nindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGps_5903) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gps_5903: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gps_5903: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolAls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nindex", wireType)
			}
			m.Nindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstGps_5904) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_gps_5904: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_gps_5904: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpsdate", wireType)
			}
			m.Gpsdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gpsdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nindex", wireType)
			}
			m.Nindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstMru_9100) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_mru_9100: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_mru_9100: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addr = append(m.Addr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolAls
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolAls
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addr) == 0 {
					m.Addr = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolAls
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addr = append(m.Addr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterReadingType", wireType)
			}
			m.MeterReadingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterReadingType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterReadingDate", wireType)
			}
			m.MeterReadingDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterReadingDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaudRate", wireType)
			}
			m.BaudRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaudRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeterValue = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolAls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolAls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocolAls(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocolAls
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolAls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocolAls
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtocolAls
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocolAls
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocolAls(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtocolAls
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocolAls = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocolAls   = fmt.Errorf("proto: integer overflow")
)
