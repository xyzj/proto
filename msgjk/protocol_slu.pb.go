// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol_slu.proto

package wlst_pb2

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Wlst_slu_fd00_a800_a400_b000_9c00_b000_f600_fc00_eb00
type WlstSluF400 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 操作结果
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// 等待队列 status == 0x62时有效
	Remark int32 `protobuf:"varint,3,opt,name=remark,proto3" json:"remark,omitempty"`
	// 操作地址
	SluitemAddr int32 `protobuf:"varint,4,opt,name=sluitem_addr,json=sluitemAddr,proto3" json:"sluitem_addr,omitempty"`
}

func (m *WlstSluF400) Reset()         { *m = WlstSluF400{} }
func (m *WlstSluF400) String() string { return proto.CompactTextString(m) }
func (*WlstSluF400) ProtoMessage()    {}
func (*WlstSluF400) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{0}
}
func (m *WlstSluF400) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF400) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF400.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF400) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF400.Merge(m, src)
}
func (m *WlstSluF400) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF400) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF400.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF400 proto.InternalMessageInfo

func (m *WlstSluF400) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF400) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstSluF400) GetRemark() int32 {
	if m != nil {
		return m.Remark
	}
	return 0
}

func (m *WlstSluF400) GetSluitemAddr() int32 {
	if m != nil {
		return m.SluitemAddr
	}
	return 0
}

// Wlst_slu_b900 nb控制器数据主报
type WlstSlu_3900 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 型号
	ModelInfo *WlstSlu_3900_ModelInfo `protobuf:"bytes,2,opt,name=model_info,json=modelInfo,proto3" json:"model_info,omitempty"`
	// 回路数据
	LightData []*WlstSlu_3900_LightData `protobuf:"bytes,3,rep,name=light_data,json=lightData,proto3" json:"light_data,omitempty"`
	// 漏电流
	LeakageCurrent float64 `protobuf:"fixed64,4,opt,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
	// 控制器状态
	SluitemStatus *WlstSlu_3900_SluitemStatus `protobuf:"bytes,5,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 时钟故障
	TimeFault *WlstSlu_3900_TimeFault `protobuf:"bytes,6,opt,name=time_fault,json=timeFault,proto3" json:"time_fault,omitempty"`
	// 自复位次数
	ResetCount int32 `protobuf:"varint,7,opt,name=reset_count,json=resetCount,proto3" json:"reset_count,omitempty"`
	// 时间
	DateTime int64 `protobuf:"varint,8,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// 控制器运行参数
	SluitemPara *WlstSlu_3900_SluitemPara `protobuf:"bytes,9,opt,name=sluitem_para,json=sluitemPara,proto3" json:"sluitem_para,omitempty"`
	// 参考信号接收功率
	Rsrp int64 `protobuf:"varint,10,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	// 接收信号强度等级
	Rssi int64 `protobuf:"varint,11,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// 信噪比
	Snr int64 `protobuf:"varint,12,opt,name=snr,proto3" json:"snr,omitempty"`
	// 物理小区标识
	Pci int64 `protobuf:"varint,13,opt,name=pci,proto3" json:"pci,omitempty"`
	// 参考信号接收质量
	Rsrq int64 `protobuf:"varint,14,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
	// 终端发射功率
	Txpower int64 `protobuf:"varint,15,opt,name=txpower,proto3" json:"txpower,omitempty"`
	// 频点号
	Earfcn int64 `protobuf:"varint,16,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	// 信号覆盖等级
	Ecl int32 `protobuf:"varint,17,opt,name=ecl,proto3" json:"ecl,omitempty"`
	// 信号强度值
	Csq int32 `protobuf:"varint,18,opt,name=csq,proto3" json:"csq,omitempty"`
	// 主动上报原因，0-非主动上报，1-上电，2-开关灯状态变化，3-故障发生/消除，4-定时主动上报
	Reson int32 `protobuf:"varint,19,opt,name=reson,proto3" json:"reson,omitempty"`
	// 重连次数
	Retry int32 `protobuf:"varint,20,opt,name=retry,proto3" json:"retry,omitempty"`
	// 日出时间
	Sunrise int32 `protobuf:"varint,21,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	// 日落时间
	Sunset int32 `protobuf:"varint,22,opt,name=sunset,proto3" json:"sunset,omitempty"`
}

func (m *WlstSlu_3900) Reset()         { *m = WlstSlu_3900{} }
func (m *WlstSlu_3900) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900) ProtoMessage()    {}
func (*WlstSlu_3900) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1}
}
func (m *WlstSlu_3900) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900.Merge(m, src)
}
func (m *WlstSlu_3900) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900 proto.InternalMessageInfo

func (m *WlstSlu_3900) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_3900) GetModelInfo() *WlstSlu_3900_ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

func (m *WlstSlu_3900) GetLightData() []*WlstSlu_3900_LightData {
	if m != nil {
		return m.LightData
	}
	return nil
}

func (m *WlstSlu_3900) GetLeakageCurrent() float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return 0
}

func (m *WlstSlu_3900) GetSluitemStatus() *WlstSlu_3900_SluitemStatus {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSlu_3900) GetTimeFault() *WlstSlu_3900_TimeFault {
	if m != nil {
		return m.TimeFault
	}
	return nil
}

func (m *WlstSlu_3900) GetResetCount() int32 {
	if m != nil {
		return m.ResetCount
	}
	return 0
}

func (m *WlstSlu_3900) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func (m *WlstSlu_3900) GetSluitemPara() *WlstSlu_3900_SluitemPara {
	if m != nil {
		return m.SluitemPara
	}
	return nil
}

func (m *WlstSlu_3900) GetRsrp() int64 {
	if m != nil {
		return m.Rsrp
	}
	return 0
}

func (m *WlstSlu_3900) GetRssi() int64 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *WlstSlu_3900) GetSnr() int64 {
	if m != nil {
		return m.Snr
	}
	return 0
}

func (m *WlstSlu_3900) GetPci() int64 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *WlstSlu_3900) GetRsrq() int64 {
	if m != nil {
		return m.Rsrq
	}
	return 0
}

func (m *WlstSlu_3900) GetTxpower() int64 {
	if m != nil {
		return m.Txpower
	}
	return 0
}

func (m *WlstSlu_3900) GetEarfcn() int64 {
	if m != nil {
		return m.Earfcn
	}
	return 0
}

func (m *WlstSlu_3900) GetEcl() int32 {
	if m != nil {
		return m.Ecl
	}
	return 0
}

func (m *WlstSlu_3900) GetCsq() int32 {
	if m != nil {
		return m.Csq
	}
	return 0
}

func (m *WlstSlu_3900) GetReson() int32 {
	if m != nil {
		return m.Reson
	}
	return 0
}

func (m *WlstSlu_3900) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *WlstSlu_3900) GetSunrise() int32 {
	if m != nil {
		return m.Sunrise
	}
	return 0
}

func (m *WlstSlu_3900) GetSunset() int32 {
	if m != nil {
		return m.Sunset
	}
	return 0
}

type WlstSlu_3900_ModelInfo struct {
	// 控制器回路数量
	SluitemLoop int32 `protobuf:"varint,1,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
	// 节能方式
	// 0-无控制，1-只有开关灯，2-一档节能，3-二档节能，4-RS485，5-PWM，6-0~10V
	PowerSaving int32 `protobuf:"varint,2,opt,name=power_saving,json=powerSaving,proto3" json:"power_saving,omitempty"`
	// 漏电流测量 0-无，1-有
	HasLeakage int32 `protobuf:"varint,3,opt,name=has_leakage,json=hasLeakage,proto3" json:"has_leakage,omitempty"`
	// 温度采集 0-无，1-有
	HasTemperature int32 `protobuf:"varint,4,opt,name=has_temperature,json=hasTemperature,proto3" json:"has_temperature,omitempty"`
	// 时钟 0-无，1-有
	HasTimer int32 `protobuf:"varint,5,opt,name=has_timer,json=hasTimer,proto3" json:"has_timer,omitempty"`
	// 型号 0-unknow
	Model int32 `protobuf:"varint,6,opt,name=model,proto3" json:"model,omitempty"`
	// 字符串型号
	SluitemType string `protobuf:"bytes,7,opt,name=sluitem_type,json=sluitemType,proto3" json:"sluitem_type,omitempty"`
	// 实际使用回路数（V0.2增加）
	UseLoop int32 `protobuf:"varint,8,opt,name=use_loop,json=useLoop,proto3" json:"use_loop,omitempty"`
}

func (m *WlstSlu_3900_ModelInfo) Reset()         { *m = WlstSlu_3900_ModelInfo{} }
func (m *WlstSlu_3900_ModelInfo) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_ModelInfo) ProtoMessage()    {}
func (*WlstSlu_3900_ModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 0}
}
func (m *WlstSlu_3900_ModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_ModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_ModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_ModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_ModelInfo.Merge(m, src)
}
func (m *WlstSlu_3900_ModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_ModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_ModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_ModelInfo proto.InternalMessageInfo

func (m *WlstSlu_3900_ModelInfo) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetPowerSaving() int32 {
	if m != nil {
		return m.PowerSaving
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetHasLeakage() int32 {
	if m != nil {
		return m.HasLeakage
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetHasTemperature() int32 {
	if m != nil {
		return m.HasTemperature
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetHasTimer() int32 {
	if m != nil {
		return m.HasTimer
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetModel() int32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *WlstSlu_3900_ModelInfo) GetSluitemType() string {
	if m != nil {
		return m.SluitemType
	}
	return ""
}

func (m *WlstSlu_3900_ModelInfo) GetUseLoop() int32 {
	if m != nil {
		return m.UseLoop
	}
	return 0
}

type WlstSlu_3900_LightData struct {
	// 电压
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率
	ReactivePower float64 `protobuf:"fixed64,4,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 视在功率
	ApparentPower float64 `protobuf:"fixed64,5,opt,name=apparent_power,json=apparentPower,proto3" json:"apparent_power,omitempty"`
	// 电量
	Electricity float64 `protobuf:"fixed64,6,opt,name=electricity,proto3" json:"electricity,omitempty"`
	// 运行时间
	ActiveTime float64 `protobuf:"fixed64,7,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	// 灯状态
	LightStatus *WlstSlu_3900_LightStatus `protobuf:"bytes,8,opt,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	// 节能档位
	PowerLevel int32 `protobuf:"varint,9,opt,name=power_level,json=powerLevel,proto3" json:"power_level,omitempty"`
	// 控制器上电开灯 true-开灯，false-关灯
	SluitemPowerTurnon int32 `protobuf:"varint,10,opt,name=sluitem_power_turnon,json=sluitemPowerTurnon,proto3" json:"sluitem_power_turnon,omitempty"`
	// 1-4回路额定功率
	RatedPower int32 `protobuf:"varint,11,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`
}

func (m *WlstSlu_3900_LightData) Reset()         { *m = WlstSlu_3900_LightData{} }
func (m *WlstSlu_3900_LightData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_LightData) ProtoMessage()    {}
func (*WlstSlu_3900_LightData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 1}
}
func (m *WlstSlu_3900_LightData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_LightData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_LightData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_LightData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_LightData.Merge(m, src)
}
func (m *WlstSlu_3900_LightData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_LightData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_LightData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_LightData proto.InternalMessageInfo

func (m *WlstSlu_3900_LightData) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetReactivePower() float64 {
	if m != nil {
		return m.ReactivePower
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetApparentPower() float64 {
	if m != nil {
		return m.ApparentPower
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetElectricity() float64 {
	if m != nil {
		return m.Electricity
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetActiveTime() float64 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetLightStatus() *WlstSlu_3900_LightStatus {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *WlstSlu_3900_LightData) GetPowerLevel() int32 {
	if m != nil {
		return m.PowerLevel
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetSluitemPowerTurnon() int32 {
	if m != nil {
		return m.SluitemPowerTurnon
	}
	return 0
}

func (m *WlstSlu_3900_LightData) GetRatedPower() int32 {
	if m != nil {
		return m.RatedPower
	}
	return 0
}

type WlstSlu_3900_LightStatus struct {
	// 灯具漏电 0-正常，1-漏电
	Leakage int32 `protobuf:"varint,1,opt,name=leakage,proto3" json:"leakage,omitempty"`
	// 故障 0-正常，1-光源故障，2-补偿电容故障，3-意外灭灯，4-意外亮灯，5-自熄灯
	Fault int32 `protobuf:"varint,2,opt,name=fault,proto3" json:"fault,omitempty"`
	// 工作状态 0-正常亮灯，1-保留，2-调光节能，3-关灯
	WorkingOn int32 `protobuf:"varint,3,opt,name=working_on,json=workingOn,proto3" json:"working_on,omitempty"`
}

func (m *WlstSlu_3900_LightStatus) Reset()         { *m = WlstSlu_3900_LightStatus{} }
func (m *WlstSlu_3900_LightStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_LightStatus) ProtoMessage()    {}
func (*WlstSlu_3900_LightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 2}
}
func (m *WlstSlu_3900_LightStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_LightStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_LightStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_LightStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_LightStatus.Merge(m, src)
}
func (m *WlstSlu_3900_LightStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_LightStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_LightStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_LightStatus proto.InternalMessageInfo

func (m *WlstSlu_3900_LightStatus) GetLeakage() int32 {
	if m != nil {
		return m.Leakage
	}
	return 0
}

func (m *WlstSlu_3900_LightStatus) GetFault() int32 {
	if m != nil {
		return m.Fault
	}
	return 0
}

func (m *WlstSlu_3900_LightStatus) GetWorkingOn() int32 {
	if m != nil {
		return m.WorkingOn
	}
	return 0
}

type WlstSlu_3900_SluitemStatus struct {
	// flash故障 0-正常 1-故障
	FlashFault int32 `protobuf:"varint,1,opt,name=flash_fault,json=flashFault,proto3" json:"flash_fault,omitempty"`
	// 主动报警禁止 0-正常 1-禁止
	EnableAlarm int32 `protobuf:"varint,2,opt,name=enable_alarm,json=enableAlarm,proto3" json:"enable_alarm,omitempty"`
}

func (m *WlstSlu_3900_SluitemStatus) Reset()         { *m = WlstSlu_3900_SluitemStatus{} }
func (m *WlstSlu_3900_SluitemStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_SluitemStatus) ProtoMessage()    {}
func (*WlstSlu_3900_SluitemStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 3}
}
func (m *WlstSlu_3900_SluitemStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_SluitemStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_SluitemStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_SluitemStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_SluitemStatus.Merge(m, src)
}
func (m *WlstSlu_3900_SluitemStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_SluitemStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_SluitemStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_SluitemStatus proto.InternalMessageInfo

func (m *WlstSlu_3900_SluitemStatus) GetFlashFault() int32 {
	if m != nil {
		return m.FlashFault
	}
	return 0
}

func (m *WlstSlu_3900_SluitemStatus) GetEnableAlarm() int32 {
	if m != nil {
		return m.EnableAlarm
	}
	return 0
}

type WlstSlu_3900_TimeFault struct {
	// 本地时钟故障 0-正常 1-故障
	ClockFault int32 `protobuf:"varint,1,opt,name=clock_fault,json=clockFault,proto3" json:"clock_fault,omitempty"`
	// 本地时钟超差故障 0-正常 1-故障
	ClockOutFault int32 `protobuf:"varint,2,opt,name=clock_out_fault,json=clockOutFault,proto3" json:"clock_out_fault,omitempty"`
	// 校时超差故障 0-正常 1-故障
	ClockOutAlarm int32 `protobuf:"varint,3,opt,name=clock_out_alarm,json=clockOutAlarm,proto3" json:"clock_out_alarm,omitempty"`
}

func (m *WlstSlu_3900_TimeFault) Reset()         { *m = WlstSlu_3900_TimeFault{} }
func (m *WlstSlu_3900_TimeFault) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_TimeFault) ProtoMessage()    {}
func (*WlstSlu_3900_TimeFault) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 4}
}
func (m *WlstSlu_3900_TimeFault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_TimeFault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_TimeFault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_TimeFault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_TimeFault.Merge(m, src)
}
func (m *WlstSlu_3900_TimeFault) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_TimeFault) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_TimeFault.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_TimeFault proto.InternalMessageInfo

func (m *WlstSlu_3900_TimeFault) GetClockFault() int32 {
	if m != nil {
		return m.ClockFault
	}
	return 0
}

func (m *WlstSlu_3900_TimeFault) GetClockOutFault() int32 {
	if m != nil {
		return m.ClockOutFault
	}
	return 0
}

func (m *WlstSlu_3900_TimeFault) GetClockOutAlarm() int32 {
	if m != nil {
		return m.ClockOutAlarm
	}
	return 0
}

type WlstSlu_3900_SluitemPara struct {
	// 经度
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 是否允许主报 1-允许 0-不允许
	HasEnableAlarm int32 `protobuf:"varint,3,opt,name=has_enable_alarm,json=hasEnableAlarm,proto3" json:"has_enable_alarm,omitempty"`
	// 是否投运 1-投运 0-停运
	IsRunning int32 `protobuf:"varint,4,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	// 主动报警间隔 单位分钟 0表示30分钟
	AlarmInterval int32 `protobuf:"varint,5,opt,name=alarm_interval,json=alarmInterval,proto3" json:"alarm_interval,omitempty"`
	// nb主报需要主站应答，0-不需要，1-需要
	UplinkReply int32 `protobuf:"varint,6,opt,name=uplink_reply,json=uplinkReply,proto3" json:"uplink_reply,omitempty"`
}

func (m *WlstSlu_3900_SluitemPara) Reset()         { *m = WlstSlu_3900_SluitemPara{} }
func (m *WlstSlu_3900_SluitemPara) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3900_SluitemPara) ProtoMessage()    {}
func (*WlstSlu_3900_SluitemPara) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{1, 5}
}
func (m *WlstSlu_3900_SluitemPara) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3900_SluitemPara) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3900_SluitemPara.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3900_SluitemPara) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3900_SluitemPara.Merge(m, src)
}
func (m *WlstSlu_3900_SluitemPara) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3900_SluitemPara) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3900_SluitemPara.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3900_SluitemPara proto.InternalMessageInfo

func (m *WlstSlu_3900_SluitemPara) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstSlu_3900_SluitemPara) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstSlu_3900_SluitemPara) GetHasEnableAlarm() int32 {
	if m != nil {
		return m.HasEnableAlarm
	}
	return 0
}

func (m *WlstSlu_3900_SluitemPara) GetIsRunning() int32 {
	if m != nil {
		return m.IsRunning
	}
	return 0
}

func (m *WlstSlu_3900_SluitemPara) GetAlarmInterval() int32 {
	if m != nil {
		return m.AlarmInterval
	}
	return 0
}

func (m *WlstSlu_3900_SluitemPara) GetUplinkReply() int32 {
	if m != nil {
		return m.UplinkReply
	}
	return 0
}

// 单灯事件查询
type WlstSlu_7800 struct {
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 事件类型,
	// 0-上电复位记录，1-开关灯操作记录，2-液晶操作记录，3-控制器告警记录，4-集中器告警记录，5-主站操作记录
	EventType int32 `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// 分类标记，默认0xff
	ClassType int32 `protobuf:"varint,3,opt,name=class_type,json=classType,proto3" json:"class_type,omitempty"`
	// 记录条数
	RecordCount int32 `protobuf:"varint,4,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	// 开始时间
	DtStart int64 `protobuf:"varint,5,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 结束时间
	DtEnd int64 `protobuf:"varint,6,opt,name=dt_end,json=dtEnd,proto3" json:"dt_end,omitempty"`
}

func (m *WlstSlu_7800) Reset()         { *m = WlstSlu_7800{} }
func (m *WlstSlu_7800) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7800) ProtoMessage()    {}
func (*WlstSlu_7800) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{2}
}
func (m *WlstSlu_7800) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7800) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7800.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7800) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7800.Merge(m, src)
}
func (m *WlstSlu_7800) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7800) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7800.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7800 proto.InternalMessageInfo

func (m *WlstSlu_7800) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_7800) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *WlstSlu_7800) GetClassType() int32 {
	if m != nil {
		return m.ClassType
	}
	return 0
}

func (m *WlstSlu_7800) GetRecordCount() int32 {
	if m != nil {
		return m.RecordCount
	}
	return 0
}

func (m *WlstSlu_7800) GetDtStart() int64 {
	if m != nil {
		return m.DtStart
	}
	return 0
}

func (m *WlstSlu_7800) GetDtEnd() int64 {
	if m != nil {
		return m.DtEnd
	}
	return 0
}

// 单灯事件查询应答
type WlstSluF800 struct {
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 事件类型,
	// 0-上电复位记录，1-开关灯操作记录，2-液晶操作记录，3-控制器告警记录，4-集中器告警记录，5-主站操作记录
	EventType int32 `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// 分类标记，默认0xff
	ClassType int32 `protobuf:"varint,3,opt,name=class_type,json=classType,proto3" json:"class_type,omitempty"`
	// 总包数
	DataTotal int32 `protobuf:"varint,4,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	// 当前包号
	DataIdx int32 `protobuf:"varint,5,opt,name=data_idx,json=dataIdx,proto3" json:"data_idx,omitempty"`
	// 该包记录数
	RecordCount int32                   `protobuf:"varint,6,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	View_0X20   []*WlstSluF800_View0X20 `protobuf:"bytes,7,rep,name=view_0x20,json=view0x20,proto3" json:"view_0x20,omitempty"`
	View_0X21   []*WlstSluF800_View0X21 `protobuf:"bytes,8,rep,name=view_0x21,json=view0x21,proto3" json:"view_0x21,omitempty"`
	View_0X22   []*WlstSluF800_View0X20 `protobuf:"bytes,9,rep,name=view_0x22,json=view0x22,proto3" json:"view_0x22,omitempty"`
	View_0X23   []*WlstSluF800_View0X23 `protobuf:"bytes,10,rep,name=view_0x23,json=view0x23,proto3" json:"view_0x23,omitempty"`
	View_0X24   []*WlstSluF800_View0X20 `protobuf:"bytes,11,rep,name=view_0x24,json=view0x24,proto3" json:"view_0x24,omitempty"`
	View_0X25   []*WlstSluF800_View0X20 `protobuf:"bytes,12,rep,name=view_0x25,json=view0x25,proto3" json:"view_0x25,omitempty"`
}

func (m *WlstSluF800) Reset()         { *m = WlstSluF800{} }
func (m *WlstSluF800) String() string { return proto.CompactTextString(m) }
func (*WlstSluF800) ProtoMessage()    {}
func (*WlstSluF800) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{3}
}
func (m *WlstSluF800) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF800) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF800.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF800) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF800.Merge(m, src)
}
func (m *WlstSluF800) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF800) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF800.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF800 proto.InternalMessageInfo

func (m *WlstSluF800) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF800) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *WlstSluF800) GetClassType() int32 {
	if m != nil {
		return m.ClassType
	}
	return 0
}

func (m *WlstSluF800) GetDataTotal() int32 {
	if m != nil {
		return m.DataTotal
	}
	return 0
}

func (m *WlstSluF800) GetDataIdx() int32 {
	if m != nil {
		return m.DataIdx
	}
	return 0
}

func (m *WlstSluF800) GetRecordCount() int32 {
	if m != nil {
		return m.RecordCount
	}
	return 0
}

func (m *WlstSluF800) GetView_0X20() []*WlstSluF800_View0X20 {
	if m != nil {
		return m.View_0X20
	}
	return nil
}

func (m *WlstSluF800) GetView_0X21() []*WlstSluF800_View0X21 {
	if m != nil {
		return m.View_0X21
	}
	return nil
}

func (m *WlstSluF800) GetView_0X22() []*WlstSluF800_View0X20 {
	if m != nil {
		return m.View_0X22
	}
	return nil
}

func (m *WlstSluF800) GetView_0X23() []*WlstSluF800_View0X23 {
	if m != nil {
		return m.View_0X23
	}
	return nil
}

func (m *WlstSluF800) GetView_0X24() []*WlstSluF800_View0X20 {
	if m != nil {
		return m.View_0X24
	}
	return nil
}

func (m *WlstSluF800) GetView_0X25() []*WlstSluF800_View0X20 {
	if m != nil {
		return m.View_0X25
	}
	return nil
}

type WlstSluF800_View0X20 struct {
	// 发生时间
	DtHappen int64 `protobuf:"varint,1,opt,name=dt_happen,json=dtHappen,proto3" json:"dt_happen,omitempty"`
	// 0x20->[复位类型]，0-上电复位，1-外部复位，2-看门狗复位，3-欠压复位
	// 0x22,0x25->[命令字节]
	// 0x24->[集中器地址出错，
	// 控制器参数出错，
	// 集中器其他参数出错，
	// 集中器运行参数出错，
	// 集中器告警参数出错，
	// 时钟出错，
	// 时钟硬件出错，
	// fram出错，
	// 电力载波模块出错，
	// zigbee模块出错，
	// 蓝牙模块出错]
	Status []int32 `protobuf:"varint,2,rep,packed,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstSluF800_View0X20) Reset()         { *m = WlstSluF800_View0X20{} }
func (m *WlstSluF800_View0X20) String() string { return proto.CompactTextString(m) }
func (*WlstSluF800_View0X20) ProtoMessage()    {}
func (*WlstSluF800_View0X20) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{3, 0}
}
func (m *WlstSluF800_View0X20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF800_View0X20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF800_View0X20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF800_View0X20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF800_View0X20.Merge(m, src)
}
func (m *WlstSluF800_View0X20) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF800_View0X20) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF800_View0X20.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF800_View0X20 proto.InternalMessageInfo

func (m *WlstSluF800_View0X20) GetDtHappen() int64 {
	if m != nil {
		return m.DtHappen
	}
	return 0
}

func (m *WlstSluF800_View0X20) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

type WlstSluF800_View0X21 struct {
	// 发生时间
	DtHappen int64 `protobuf:"varint,1,opt,name=dt_happen,json=dtHappen,proto3" json:"dt_happen,omitempty"`
	// 指令类型 0-清除，1-定时，2-经纬度，3-即时
	OperationType int32 `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// 操作顺序 0-广播，1-依次
	OperationOrder int32 `protobuf:"varint,3,opt,name=operation_order,json=operationOrder,proto3" json:"operation_order,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，3-单一，4-gprs
	AddrType int32 `protobuf:"varint,4,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// 地址
	Addr int32 `protobuf:"varint,5,opt,name=addr,proto3" json:"addr,omitempty"`
	// 操作源,0~7-远程控制，8～15-短程控制，16～23-本地键盘操作，24～31-节假日控制
	OperationSource int32 `protobuf:"varint,6,opt,name=operation_source,json=operationSource,proto3" json:"operation_source,omitempty"`
}

func (m *WlstSluF800_View0X21) Reset()         { *m = WlstSluF800_View0X21{} }
func (m *WlstSluF800_View0X21) String() string { return proto.CompactTextString(m) }
func (*WlstSluF800_View0X21) ProtoMessage()    {}
func (*WlstSluF800_View0X21) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{3, 1}
}
func (m *WlstSluF800_View0X21) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF800_View0X21) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF800_View0X21.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF800_View0X21) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF800_View0X21.Merge(m, src)
}
func (m *WlstSluF800_View0X21) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF800_View0X21) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF800_View0X21.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF800_View0X21 proto.InternalMessageInfo

func (m *WlstSluF800_View0X21) GetDtHappen() int64 {
	if m != nil {
		return m.DtHappen
	}
	return 0
}

func (m *WlstSluF800_View0X21) GetOperationType() int32 {
	if m != nil {
		return m.OperationType
	}
	return 0
}

func (m *WlstSluF800_View0X21) GetOperationOrder() int32 {
	if m != nil {
		return m.OperationOrder
	}
	return 0
}

func (m *WlstSluF800_View0X21) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSluF800_View0X21) GetAddr() int32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *WlstSluF800_View0X21) GetOperationSource() int32 {
	if m != nil {
		return m.OperationSource
	}
	return 0
}

type WlstSluF800_View0X23 struct {
	// 发生时间
	DtHappen int64 `protobuf:"varint,1,opt,name=dt_happen,json=dtHappen,proto3" json:"dt_happen,omitempty"`
	Addr     int32 `protobuf:"varint,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// 告警类型，1-告警，0-消警，[意外灭灯，漏电告警，意外亮灯，光源故障，自熄灯故障，系统告警，通信故障，补偿电容故障，电压越限，电流越限，通信成功率过低，欠载，过载]
	AlarmType []int32 `protobuf:"varint,3,rep,packed,name=alarm_type,json=alarmType,proto3" json:"alarm_type,omitempty"`
	// 控制器状态0-false，1-true[继电器校准参数错误，eeprom故障，停运，禁止主动报警，工作参数设置，已校准，电压越上限，电压越下限，通信故障]
	SluitemStatus []int32 `protobuf:"varint,4,rep,packed,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 控制器电压
	SluitemVoltage float64 `protobuf:"fixed64,5,opt,name=sluitem_voltage,json=sluitemVoltage,proto3" json:"sluitem_voltage,omitempty"`
	// 控制器电流,1-4路
	SluitemCurrent []float64 `protobuf:"fixed64,6,rep,packed,name=sluitem_current,json=sluitemCurrent,proto3" json:"sluitem_current,omitempty"`
	// 控制器有功，1-4路
	SluitemActivePower []float64 `protobuf:"fixed64,7,rep,packed,name=sluitem_active_power,json=sluitemActivePower,proto3" json:"sluitem_active_power,omitempty"`
	// 控制器无功，1-4路
	SluitemReactivePower []float64 `protobuf:"fixed64,8,rep,packed,name=sluitem_reactive_power,json=sluitemReactivePower,proto3" json:"sluitem_reactive_power,omitempty"`
	// 控制器最大电压
	SluitemMaxVoltage float64 `protobuf:"fixed64,9,opt,name=sluitem_max_voltage,json=sluitemMaxVoltage,proto3" json:"sluitem_max_voltage,omitempty"`
	// 控制器最大电流1-4路
	SluitemMaxCurrent []float64 `protobuf:"fixed64,10,rep,packed,name=sluitem_max_current,json=sluitemMaxCurrent,proto3" json:"sluitem_max_current,omitempty"`
	// 控制器累计电量，1-4路
	SluitemElectricity []float64 `protobuf:"fixed64,11,rep,packed,name=sluitem_electricity,json=sluitemElectricity,proto3" json:"sluitem_electricity,omitempty"`
	// 控制器物理信息
	// [信号强度(0-15)，
	// 路由级数(电力载波0-6，zigbee0-10)，
	// 所在相位(0-无法确定，1-a，2-b，3-c)，
	// 控制器回路数(0～3->1～4路)，
	// 节能方式(0-无控制，1-只有开关灯，2-一档节能，3-二档节能，4-rs485节能，5-pwm节能)，
	// 漏电流(0-无，1-有),
	// 温度采集(0-无，1-有),
	// 时钟(0-无，1-有),
	// 型号(0-无法确定，1-wj2090j，2-wj2090k，3-wj2080c,4-wj2080d,5-wj2090l,6-wj2090m,
	// 7-wj4090), 通信成功次数范围(0-16)， 通信总次数范围(0-16)]
	SluitemPhyinfo []int32 `protobuf:"varint,12,rep,packed,name=sluitem_phyinfo,json=sluitemPhyinfo,proto3" json:"sluitem_phyinfo,omitempty"`
}

func (m *WlstSluF800_View0X23) Reset()         { *m = WlstSluF800_View0X23{} }
func (m *WlstSluF800_View0X23) String() string { return proto.CompactTextString(m) }
func (*WlstSluF800_View0X23) ProtoMessage()    {}
func (*WlstSluF800_View0X23) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{3, 2}
}
func (m *WlstSluF800_View0X23) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF800_View0X23) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF800_View0X23.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF800_View0X23) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF800_View0X23.Merge(m, src)
}
func (m *WlstSluF800_View0X23) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF800_View0X23) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF800_View0X23.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF800_View0X23 proto.InternalMessageInfo

func (m *WlstSluF800_View0X23) GetDtHappen() int64 {
	if m != nil {
		return m.DtHappen
	}
	return 0
}

func (m *WlstSluF800_View0X23) GetAddr() int32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *WlstSluF800_View0X23) GetAlarmType() []int32 {
	if m != nil {
		return m.AlarmType
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemStatus() []int32 {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemVoltage() float64 {
	if m != nil {
		return m.SluitemVoltage
	}
	return 0
}

func (m *WlstSluF800_View0X23) GetSluitemCurrent() []float64 {
	if m != nil {
		return m.SluitemCurrent
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemActivePower() []float64 {
	if m != nil {
		return m.SluitemActivePower
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemReactivePower() []float64 {
	if m != nil {
		return m.SluitemReactivePower
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemMaxVoltage() float64 {
	if m != nil {
		return m.SluitemMaxVoltage
	}
	return 0
}

func (m *WlstSluF800_View0X23) GetSluitemMaxCurrent() []float64 {
	if m != nil {
		return m.SluitemMaxCurrent
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemElectricity() []float64 {
	if m != nil {
		return m.SluitemElectricity
	}
	return nil
}

func (m *WlstSluF800_View0X23) GetSluitemPhyinfo() []int32 {
	if m != nil {
		return m.SluitemPhyinfo
	}
	return nil
}

type WlstSluEc00 struct {
	// 命令序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 读取参数开始序号
	StartIdx int32 `protobuf:"varint,2,opt,name=start_idx,json=startIdx,proto3" json:"start_idx,omitempty"`
	// 读取条数
	ReadCount    int32           `protobuf:"varint,3,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	WlstSlu_6B00 []*WlstSlu_6B00 `protobuf:"bytes,4,rep,name=wlst_slu_6b00,json=wlstSlu6b00,proto3" json:"wlst_slu_6b00,omitempty"`
}

func (m *WlstSluEc00) Reset()         { *m = WlstSluEc00{} }
func (m *WlstSluEc00) String() string { return proto.CompactTextString(m) }
func (*WlstSluEc00) ProtoMessage()    {}
func (*WlstSluEc00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{4}
}
func (m *WlstSluEc00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluEc00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluEc00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluEc00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluEc00.Merge(m, src)
}
func (m *WlstSluEc00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluEc00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluEc00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluEc00 proto.InternalMessageInfo

func (m *WlstSluEc00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluEc00) GetStartIdx() int32 {
	if m != nil {
		return m.StartIdx
	}
	return 0
}

func (m *WlstSluEc00) GetReadCount() int32 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *WlstSluEc00) GetWlstSlu_6B00() []*WlstSlu_6B00 {
	if m != nil {
		return m.WlstSlu_6B00
	}
	return nil
}

type WlstSlu_6B00 struct {
	// 命令序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 设置参数序号,0-20,0-删除设备保存的所有节假日设置
	SetIdx int32 `protobuf:"varint,2,opt,name=set_idx,json=setIdx,proto3" json:"set_idx,omitempty"`
	// 开始时间, linux时间戳格式，精确到秒，服务取月，日，时
	DtStart int64 `protobuf:"varint,3,opt,name=dt_start,json=dtStart,proto3" json:"dt_start,omitempty"`
	// 结束时间, linux时间戳格式，精确到秒，服务取月，日，时
	DtEnd int64 `protobuf:"varint,4,opt,name=dt_end,json=dtEnd,proto3" json:"dt_end,omitempty"`
	// 指令类型 1-定时，2-经纬度
	OperationType int32 `protobuf:"varint,5,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// 操作顺序 0-广播，1-依次
	OperationOrder int32 `protobuf:"varint,6,opt,name=operation_order,json=operationOrder,proto3" json:"operation_order,omitempty"`
	// 定时 hh:mm->int32 或偏移量 依据 operation_type定
	TimerOrOffset int32 `protobuf:"varint,7,opt,name=timer_or_offset,json=timerOrOffset,proto3" json:"timer_or_offset,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，4-gprs
	AddrType int32 `protobuf:"varint,8,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// gprs/组/规则操作地址,addr_type=2时，仅第一个值有效
	Addrs []int32 `protobuf:"varint,9,rep,packed,name=addrs,proto3" json:"addrs,omitempty"`
	// 操作类型 3-经纬度关灯，4-混合控制，5-pwm调节
	CmdType int32 `protobuf:"varint,10,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// 混合回路操作
	// 0-不操作，1-开灯，2-1档节能，3-2档节能，4-关灯（经纬度关灯时，cmd_type<4视为不操作）
	CmdMix []int32 `protobuf:"varint,11,rep,packed,name=cmd_mix,json=cmdMix,proto3" json:"cmd_mix,omitempty"`
	// pwm功率调节
	CmdPwm *WlstSlu_6B00_CmdPwm `protobuf:"bytes,12,opt,name=cmd_pwm,json=cmdPwm,proto3" json:"cmd_pwm,omitempty"`
}

func (m *WlstSlu_6B00) Reset()         { *m = WlstSlu_6B00{} }
func (m *WlstSlu_6B00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6B00) ProtoMessage()    {}
func (*WlstSlu_6B00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{5}
}
func (m *WlstSlu_6B00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6B00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6B00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6B00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6B00.Merge(m, src)
}
func (m *WlstSlu_6B00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6B00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6B00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6B00 proto.InternalMessageInfo

func (m *WlstSlu_6B00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_6B00) GetSetIdx() int32 {
	if m != nil {
		return m.SetIdx
	}
	return 0
}

func (m *WlstSlu_6B00) GetDtStart() int64 {
	if m != nil {
		return m.DtStart
	}
	return 0
}

func (m *WlstSlu_6B00) GetDtEnd() int64 {
	if m != nil {
		return m.DtEnd
	}
	return 0
}

func (m *WlstSlu_6B00) GetOperationType() int32 {
	if m != nil {
		return m.OperationType
	}
	return 0
}

func (m *WlstSlu_6B00) GetOperationOrder() int32 {
	if m != nil {
		return m.OperationOrder
	}
	return 0
}

func (m *WlstSlu_6B00) GetTimerOrOffset() int32 {
	if m != nil {
		return m.TimerOrOffset
	}
	return 0
}

func (m *WlstSlu_6B00) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSlu_6B00) GetAddrs() []int32 {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *WlstSlu_6B00) GetCmdType() int32 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *WlstSlu_6B00) GetCmdMix() []int32 {
	if m != nil {
		return m.CmdMix
	}
	return nil
}

func (m *WlstSlu_6B00) GetCmdPwm() *WlstSlu_6B00_CmdPwm {
	if m != nil {
		return m.CmdPwm
	}
	return nil
}

type WlstSlu_6B00_CmdPwm struct {
	// 回路(仅需要操作的回路序号)
	LoopCanDo []int32 `protobuf:"varint,1,rep,packed,name=loop_can_do,json=loopCanDo,proto3" json:"loop_can_do,omitempty"`
	// 比例 0-100 -> 0%-100%
	Scale int32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	// 频率 /100为发送值
	Rate int32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *WlstSlu_6B00_CmdPwm) Reset()         { *m = WlstSlu_6B00_CmdPwm{} }
func (m *WlstSlu_6B00_CmdPwm) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6B00_CmdPwm) ProtoMessage()    {}
func (*WlstSlu_6B00_CmdPwm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{5, 0}
}
func (m *WlstSlu_6B00_CmdPwm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6B00_CmdPwm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6B00_CmdPwm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6B00_CmdPwm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6B00_CmdPwm.Merge(m, src)
}
func (m *WlstSlu_6B00_CmdPwm) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6B00_CmdPwm) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6B00_CmdPwm.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6B00_CmdPwm proto.InternalMessageInfo

func (m *WlstSlu_6B00_CmdPwm) GetLoopCanDo() []int32 {
	if m != nil {
		return m.LoopCanDo
	}
	return nil
}

func (m *WlstSlu_6B00_CmdPwm) GetScale() int32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *WlstSlu_6B00_CmdPwm) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type WlstSlu_6C00 struct {
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 读取参数开始序号
	StartIdx int32 `protobuf:"varint,2,opt,name=start_idx,json=startIdx,proto3" json:"start_idx,omitempty"`
	// 读取条数
	ReadCount int32 `protobuf:"varint,3,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
}

func (m *WlstSlu_6C00) Reset()         { *m = WlstSlu_6C00{} }
func (m *WlstSlu_6C00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6C00) ProtoMessage()    {}
func (*WlstSlu_6C00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{6}
}
func (m *WlstSlu_6C00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6C00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6C00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6C00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6C00.Merge(m, src)
}
func (m *WlstSlu_6C00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6C00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6C00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6C00 proto.InternalMessageInfo

func (m *WlstSlu_6C00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_6C00) GetStartIdx() int32 {
	if m != nil {
		return m.StartIdx
	}
	return 0
}

func (m *WlstSlu_6C00) GetReadCount() int32 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

type WlstSluD000 struct {
	// 集中器版本
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *WlstSluD000) Reset()         { *m = WlstSluD000{} }
func (m *WlstSluD000) String() string { return proto.CompactTextString(m) }
func (*WlstSluD000) ProtoMessage()    {}
func (*WlstSluD000) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{7}
}
func (m *WlstSluD000) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluD000) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluD000.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluD000) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluD000.Merge(m, src)
}
func (m *WlstSluD000) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluD000) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluD000.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluD000 proto.InternalMessageInfo

func (m *WlstSluD000) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type WlstSlu_2800 struct {
	// 2-投运，1-停运
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 2-告警，1-不告警
	Alarm int32 `protobuf:"varint,2,opt,name=alarm,proto3" json:"alarm,omitempty"`
}

func (m *WlstSlu_2800) Reset()         { *m = WlstSlu_2800{} }
func (m *WlstSlu_2800) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_2800) ProtoMessage()    {}
func (*WlstSlu_2800) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{8}
}
func (m *WlstSlu_2800) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_2800) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_2800.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_2800) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_2800.Merge(m, src)
}
func (m *WlstSlu_2800) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_2800) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_2800.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_2800 proto.InternalMessageInfo

func (m *WlstSlu_2800) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstSlu_2800) GetAlarm() int32 {
	if m != nil {
		return m.Alarm
	}
	return 0
}

// Wlst_slu_9900_1900
type WlstSlu_2400 struct {
	// 操作标识（19-99：1-复位整个网络，2-以路由形式加入当前网络，3-创建网络，4-以路由形式加入新网络）（24-a4：0-停止，1-启动，2-延时启动）
	DoFlag int32 `protobuf:"varint,1,opt,name=do_flag,json=doFlag,proto3" json:"do_flag,omitempty"`
	// 操作结果 0x3a-失败，0x5a-成功
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstSlu_2400) Reset()         { *m = WlstSlu_2400{} }
func (m *WlstSlu_2400) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_2400) ProtoMessage()    {}
func (*WlstSlu_2400) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{9}
}
func (m *WlstSlu_2400) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_2400) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_2400.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_2400) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_2400.Merge(m, src)
}
func (m *WlstSlu_2400) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_2400) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_2400.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_2400 proto.InternalMessageInfo

func (m *WlstSlu_2400) GetDoFlag() int32 {
	if m != nil {
		return m.DoFlag
	}
	return 0
}

func (m *WlstSlu_2400) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// Wlst_slu_ee00
type WlstSlu_6E00 struct {
	// 操作标识（0-清除设置，1-设置，2-读取设置）
	DoFlag int32 `protobuf:"varint,1,opt,name=do_flag,json=doFlag,proto3" json:"do_flag,omitempty"`
	// 巡测开始时间 hhmm->int32(hh*60+mm)
	PatrolStart int32 `protobuf:"varint,2,opt,name=patrol_start,json=patrolStart,proto3" json:"patrol_start,omitempty"`
	// 巡测间隔时间 mm(0<=mm<=255)
	PatrolInterval int32 `protobuf:"varint,3,opt,name=patrol_interval,json=patrolInterval,proto3" json:"patrol_interval,omitempty"`
	// 巡测序号
	PatrolOrder int32 `protobuf:"varint,4,opt,name=patrol_order,json=patrolOrder,proto3" json:"patrol_order,omitempty"`
	// 巡测数量
	PatrolCount int32 `protobuf:"varint,5,opt,name=patrol_count,json=patrolCount,proto3" json:"patrol_count,omitempty"`
	// 序号
	CmdIdx int32 `protobuf:"varint,6,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
}

func (m *WlstSlu_6E00) Reset()         { *m = WlstSlu_6E00{} }
func (m *WlstSlu_6E00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6E00) ProtoMessage()    {}
func (*WlstSlu_6E00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{10}
}
func (m *WlstSlu_6E00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6E00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6E00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6E00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6E00.Merge(m, src)
}
func (m *WlstSlu_6E00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6E00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6E00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6E00 proto.InternalMessageInfo

func (m *WlstSlu_6E00) GetDoFlag() int32 {
	if m != nil {
		return m.DoFlag
	}
	return 0
}

func (m *WlstSlu_6E00) GetPatrolStart() int32 {
	if m != nil {
		return m.PatrolStart
	}
	return 0
}

func (m *WlstSlu_6E00) GetPatrolInterval() int32 {
	if m != nil {
		return m.PatrolInterval
	}
	return 0
}

func (m *WlstSlu_6E00) GetPatrolOrder() int32 {
	if m != nil {
		return m.PatrolOrder
	}
	return 0
}

func (m *WlstSlu_6E00) GetPatrolCount() int32 {
	if m != nil {
		return m.PatrolCount
	}
	return 0
}

func (m *WlstSlu_6E00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

// Wlst_slu_b200
type WlstSlu_3000 struct {
	// 控制器数量
	Ctrls int32 `protobuf:"varint,1,opt,name=ctrls,proto3" json:"ctrls,omitempty"`
	// 域名
	DomainName int32 `protobuf:"varint,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// 电压上限
	UpperVoltageLimit int32 `protobuf:"varint,3,opt,name=upper_voltage_limit,json=upperVoltageLimit,proto3" json:"upper_voltage_limit,omitempty"`
	// 电压下限
	LowerVoltageLimit int32 `protobuf:"varint,4,opt,name=lower_voltage_limit,json=lowerVoltageLimit,proto3" json:"lower_voltage_limit,omitempty"`
	// 64位地址
	MacAddr int64 `protobuf:"varint,5,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
}

func (m *WlstSlu_3000) Reset()         { *m = WlstSlu_3000{} }
func (m *WlstSlu_3000) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_3000) ProtoMessage()    {}
func (*WlstSlu_3000) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{11}
}
func (m *WlstSlu_3000) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_3000) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_3000.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_3000) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_3000.Merge(m, src)
}
func (m *WlstSlu_3000) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_3000) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_3000.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_3000 proto.InternalMessageInfo

func (m *WlstSlu_3000) GetCtrls() int32 {
	if m != nil {
		return m.Ctrls
	}
	return 0
}

func (m *WlstSlu_3000) GetDomainName() int32 {
	if m != nil {
		return m.DomainName
	}
	return 0
}

func (m *WlstSlu_3000) GetUpperVoltageLimit() int32 {
	if m != nil {
		return m.UpperVoltageLimit
	}
	return 0
}

func (m *WlstSlu_3000) GetLowerVoltageLimit() int32 {
	if m != nil {
		return m.LowerVoltageLimit
	}
	return 0
}

func (m *WlstSlu_3000) GetMacAddr() int64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

type WlstSlu_9A00 struct {
	// 域名已设置标志
	DomainNameStatus []int32 `protobuf:"varint,1,rep,packed,name=domain_name_status,json=domainNameStatus,proto3" json:"domain_name_status,omitempty"`
}

func (m *WlstSlu_9A00) Reset()         { *m = WlstSlu_9A00{} }
func (m *WlstSlu_9A00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9A00) ProtoMessage()    {}
func (*WlstSlu_9A00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{12}
}
func (m *WlstSlu_9A00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9A00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9A00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9A00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9A00.Merge(m, src)
}
func (m *WlstSlu_9A00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9A00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9A00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9A00 proto.InternalMessageInfo

func (m *WlstSlu_9A00) GetDomainNameStatus() []int32 {
	if m != nil {
		return m.DomainNameStatus
	}
	return nil
}

// Wlst_slu_7600
type WlstSluCd00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,13,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 通讯失败次数
	CommunicationFailures int32 `protobuf:"varint,1,opt,name=communication_failures,json=communicationFailures,proto3" json:"communication_failures,omitempty"`
	// 功率因数
	PowerFactor int32 `protobuf:"varint,2,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`
	// 通信信道(仅包含启用的通道)
	CommunicationChannel int32 `protobuf:"varint,3,opt,name=communication_channel,json=communicationChannel,proto3" json:"communication_channel,omitempty"`
	// 电流最大量程
	CurrentRange float64 `protobuf:"fixed64,4,opt,name=current_range,json=currentRange,proto3" json:"current_range,omitempty"`
	// 有功最大量程
	PowerRange int32 `protobuf:"varint,5,opt,name=power_range,json=powerRange,proto3" json:"power_range,omitempty"`
	// 集中器自动控制功能 1-自动补发，0-不补发
	AutoMode int32 `protobuf:"varint,6,opt,name=auto_mode,json=autoMode,proto3" json:"auto_mode,omitempty"`
	// 经度
	Longitude float64 `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 载波路由模式 1-标准，2-扩展，3-III代，4-IV代，5-自适应
	CarrierRoutingMode int32 `protobuf:"varint,9,opt,name=carrier_routing_mode,json=carrierRoutingMode,proto3" json:"carrier_routing_mode,omitempty"`
	// 蓝牙模块pin码，默认62547600
	BluetoothPin int32 `protobuf:"varint,10,opt,name=bluetooth_pin,json=bluetoothPin,proto3" json:"bluetooth_pin,omitempty"`
	// 蓝牙安全模式 0-无，1-安全模式1,2-安全模式2
	BluetoothMode int32 `protobuf:"varint,11,opt,name=bluetooth_mode,json=bluetoothMode,proto3" json:"bluetooth_mode,omitempty"`
	// 集中器通讯类型,concentrator communication type 0-gprs，1-485
	Cct int32 `protobuf:"varint,12,opt,name=cct,proto3" json:"cct,omitempty"`
	// 控制器24小时带电，0-不带电（集中器不转发时间），1-带电（集中器转发时间）
	AlwaysOnline int32 `protobuf:"varint,14,opt,name=always_online,json=alwaysOnline,proto3" json:"always_online,omitempty"`
}

func (m *WlstSluCd00) Reset()         { *m = WlstSluCd00{} }
func (m *WlstSluCd00) String() string { return proto.CompactTextString(m) }
func (*WlstSluCd00) ProtoMessage()    {}
func (*WlstSluCd00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{13}
}
func (m *WlstSluCd00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluCd00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluCd00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluCd00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluCd00.Merge(m, src)
}
func (m *WlstSluCd00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluCd00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluCd00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluCd00 proto.InternalMessageInfo

func (m *WlstSluCd00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluCd00) GetCommunicationFailures() int32 {
	if m != nil {
		return m.CommunicationFailures
	}
	return 0
}

func (m *WlstSluCd00) GetPowerFactor() int32 {
	if m != nil {
		return m.PowerFactor
	}
	return 0
}

func (m *WlstSluCd00) GetCommunicationChannel() int32 {
	if m != nil {
		return m.CommunicationChannel
	}
	return 0
}

func (m *WlstSluCd00) GetCurrentRange() float64 {
	if m != nil {
		return m.CurrentRange
	}
	return 0
}

func (m *WlstSluCd00) GetPowerRange() int32 {
	if m != nil {
		return m.PowerRange
	}
	return 0
}

func (m *WlstSluCd00) GetAutoMode() int32 {
	if m != nil {
		return m.AutoMode
	}
	return 0
}

func (m *WlstSluCd00) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstSluCd00) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstSluCd00) GetCarrierRoutingMode() int32 {
	if m != nil {
		return m.CarrierRoutingMode
	}
	return 0
}

func (m *WlstSluCd00) GetBluetoothPin() int32 {
	if m != nil {
		return m.BluetoothPin
	}
	return 0
}

func (m *WlstSluCd00) GetBluetoothMode() int32 {
	if m != nil {
		return m.BluetoothMode
	}
	return 0
}

func (m *WlstSluCd00) GetCct() int32 {
	if m != nil {
		return m.Cct
	}
	return 0
}

func (m *WlstSluCd00) GetAlwaysOnline() int32 {
	if m != nil {
		return m.AlwaysOnline
	}
	return 0
}

type WlstSlu_1C00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 控制器条码
	SluitemIdx int64 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 域名
	DomainName int32 `protobuf:"varint,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *WlstSlu_1C00) Reset()         { *m = WlstSlu_1C00{} }
func (m *WlstSlu_1C00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_1C00) ProtoMessage()    {}
func (*WlstSlu_1C00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{14}
}
func (m *WlstSlu_1C00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_1C00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_1C00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_1C00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_1C00.Merge(m, src)
}
func (m *WlstSlu_1C00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_1C00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_1C00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_1C00 proto.InternalMessageInfo

func (m *WlstSlu_1C00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_1C00) GetSluitemIdx() int64 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSlu_1C00) GetDomainName() int32 {
	if m != nil {
		return m.DomainName
	}
	return 0
}

// Wlst_slu_7a00
type WlstSlu_1D00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 控制器条码（4字节）
	SluitemIdx int64 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 控制器地址（2字节）
	// int64 sluitem_idx = 3;
	// 选测数据标识
	DataMark *WlstSlu_1D00_DataMark `protobuf:"bytes,4,opt,name=data_mark,json=dataMark,proto3" json:"data_mark,omitempty"`
}

func (m *WlstSlu_1D00) Reset()         { *m = WlstSlu_1D00{} }
func (m *WlstSlu_1D00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_1D00) ProtoMessage()    {}
func (*WlstSlu_1D00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{15}
}
func (m *WlstSlu_1D00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_1D00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_1D00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_1D00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_1D00.Merge(m, src)
}
func (m *WlstSlu_1D00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_1D00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_1D00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_1D00 proto.InternalMessageInfo

func (m *WlstSlu_1D00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_1D00) GetSluitemIdx() int64 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSlu_1D00) GetDataMark() *WlstSlu_1D00_DataMark {
	if m != nil {
		return m.DataMark
	}
	return nil
}

type WlstSlu_1D00_DataMark struct {
	// 选测
	ReadData int32 `protobuf:"varint,1,opt,name=read_data,json=readData,proto3" json:"read_data,omitempty"`
	// 读取时钟
	ReadTimer int32 `protobuf:"varint,2,opt,name=read_timer,json=readTimer,proto3" json:"read_timer,omitempty"`
	// 读取运行参数
	ReadArgs int32 `protobuf:"varint,3,opt,name=read_args,json=readArgs,proto3" json:"read_args,omitempty"`
	// 读取组地址
	ReadGroup int32 `protobuf:"varint,4,opt,name=read_group,json=readGroup,proto3" json:"read_group,omitempty"`
	// 读取版本
	ReadVer int32 `protobuf:"varint,5,opt,name=read_ver,json=readVer,proto3" json:"read_ver,omitempty"`
	// 读取当天日出日落
	ReadSunriseset int32 `protobuf:"varint,6,opt,name=read_sunriseset,json=readSunriseset,proto3" json:"read_sunriseset,omitempty"`
	// 读取本地参数（新）
	ReadTimetable int32 `protobuf:"varint,7,opt,name=read_timetable,json=readTimetable,proto3" json:"read_timetable,omitempty"`
	// 读取控制器数据（新）
	ReadCtrldata int32 `protobuf:"varint,8,opt,name=read_ctrldata,json=readCtrldata,proto3" json:"read_ctrldata,omitempty"`
}

func (m *WlstSlu_1D00_DataMark) Reset()         { *m = WlstSlu_1D00_DataMark{} }
func (m *WlstSlu_1D00_DataMark) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_1D00_DataMark) ProtoMessage()    {}
func (*WlstSlu_1D00_DataMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{15, 0}
}
func (m *WlstSlu_1D00_DataMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_1D00_DataMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_1D00_DataMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_1D00_DataMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_1D00_DataMark.Merge(m, src)
}
func (m *WlstSlu_1D00_DataMark) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_1D00_DataMark) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_1D00_DataMark.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_1D00_DataMark proto.InternalMessageInfo

func (m *WlstSlu_1D00_DataMark) GetReadData() int32 {
	if m != nil {
		return m.ReadData
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadTimer() int32 {
	if m != nil {
		return m.ReadTimer
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadArgs() int32 {
	if m != nil {
		return m.ReadArgs
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadGroup() int32 {
	if m != nil {
		return m.ReadGroup
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadVer() int32 {
	if m != nil {
		return m.ReadVer
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadSunriseset() int32 {
	if m != nil {
		return m.ReadSunriseset
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadTimetable() int32 {
	if m != nil {
		return m.ReadTimetable
	}
	return 0
}

func (m *WlstSlu_1D00_DataMark) GetReadCtrldata() int32 {
	if m != nil {
		return m.ReadCtrldata
	}
	return 0
}

// Wlst_slu_fa00
type WlstSlu_9D00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 控制器条码（4字节）
	SluitemIdx int64 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 控制器地址（2字节）
	// int32 sluitem_idx = 3;
	// 选测数据标识
	DataMark *WlstSlu_1D00_DataMark `protobuf:"bytes,4,opt,name=data_mark,json=dataMark,proto3" json:"data_mark,omitempty"`
	// 控制器回路数量
	LoopCount int32 `protobuf:"varint,5,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty"`
	// 控制器选测数据(read_data)
	SluitemData *WlstSlu_9D00_SluitemData `protobuf:"bytes,6,opt,name=sluitem_data,json=sluitemData,proto3" json:"sluitem_data,omitempty"`
	// 控制器时钟(read_timer)
	SluitemTime int64 `protobuf:"varint,7,opt,name=sluitem_time,json=sluitemTime,proto3" json:"sluitem_time,omitempty"`
	// 控制器运行参数(read_args)
	SluitemPara *WlstSlu_9D00_SluitemPara `protobuf:"bytes,8,opt,name=sluitem_para,json=sluitemPara,proto3" json:"sluitem_para,omitempty"`
	// 控制器组地址(read_group)
	SluitemGroup []int32 `protobuf:"varint,9,rep,packed,name=sluitem_group,json=sluitemGroup,proto3" json:"sluitem_group,omitempty"`
	// 控制器版本(read_ver)
	SluitemVer *WlstSlu_9D00_SluitemVer `protobuf:"bytes,10,opt,name=sluitem_ver,json=sluitemVer,proto3" json:"sluitem_ver,omitempty"`
	// 控制器当日日出日落(read_sunriseset)
	SluitemSunriseset *WlstSlu_9D00_SluitemSunriseset `protobuf:"bytes,11,opt,name=sluitem_sunriseset,json=sluitemSunriseset,proto3" json:"sluitem_sunriseset,omitempty"`
	// 控制器本地参数(read_timetable)
	SluitemRuntime []*WlstSlu_9D00_SluitemRuntime `protobuf:"bytes,12,rep,name=sluitem_runtime,json=sluitemRuntime,proto3" json:"sluitem_runtime,omitempty"`
	// 控制器数据（新）(read_ctrldata)
	SluitemDataNew *WlstSlu_9D00_SluitemDataNew `protobuf:"bytes,13,opt,name=sluitem_data_new,json=sluitemDataNew,proto3" json:"sluitem_data_new,omitempty"`
	// 读取状态0-失败，1-成功
	Status  int32                 `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	SetMark *WlstSlu_9D00_SetMark `protobuf:"bytes,15,opt,name=set_mark,json=setMark,proto3" json:"set_mark,omitempty"`
	// 是否有后续数据,0-没有，1-有
	DataContinue int32 `protobuf:"varint,16,opt,name=data_continue,json=dataContinue,proto3" json:"data_continue,omitempty"`
}

func (m *WlstSlu_9D00) Reset()         { *m = WlstSlu_9D00{} }
func (m *WlstSlu_9D00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00) ProtoMessage()    {}
func (*WlstSlu_9D00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16}
}
func (m *WlstSlu_9D00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00.Merge(m, src)
}
func (m *WlstSlu_9D00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00 proto.InternalMessageInfo

func (m *WlstSlu_9D00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_9D00) GetSluitemIdx() int64 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSlu_9D00) GetDataMark() *WlstSlu_1D00_DataMark {
	if m != nil {
		return m.DataMark
	}
	return nil
}

func (m *WlstSlu_9D00) GetLoopCount() int32 {
	if m != nil {
		return m.LoopCount
	}
	return 0
}

func (m *WlstSlu_9D00) GetSluitemData() *WlstSlu_9D00_SluitemData {
	if m != nil {
		return m.SluitemData
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemTime() int64 {
	if m != nil {
		return m.SluitemTime
	}
	return 0
}

func (m *WlstSlu_9D00) GetSluitemPara() *WlstSlu_9D00_SluitemPara {
	if m != nil {
		return m.SluitemPara
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemGroup() []int32 {
	if m != nil {
		return m.SluitemGroup
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemVer() *WlstSlu_9D00_SluitemVer {
	if m != nil {
		return m.SluitemVer
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemSunriseset() *WlstSlu_9D00_SluitemSunriseset {
	if m != nil {
		return m.SluitemSunriseset
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemRuntime() []*WlstSlu_9D00_SluitemRuntime {
	if m != nil {
		return m.SluitemRuntime
	}
	return nil
}

func (m *WlstSlu_9D00) GetSluitemDataNew() *WlstSlu_9D00_SluitemDataNew {
	if m != nil {
		return m.SluitemDataNew
	}
	return nil
}

func (m *WlstSlu_9D00) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstSlu_9D00) GetSetMark() *WlstSlu_9D00_SetMark {
	if m != nil {
		return m.SetMark
	}
	return nil
}

func (m *WlstSlu_9D00) GetDataContinue() int32 {
	if m != nil {
		return m.DataContinue
	}
	return 0
}

type WlstSlu_9D00_SetMark struct {
	SetTimer   int32 `protobuf:"varint,1,opt,name=set_timer,json=setTimer,proto3" json:"set_timer,omitempty"`
	SetArgs    int32 `protobuf:"varint,2,opt,name=set_args,json=setArgs,proto3" json:"set_args,omitempty"`
	SetGroup   int32 `protobuf:"varint,3,opt,name=set_group,json=setGroup,proto3" json:"set_group,omitempty"`
	SetReset   int32 `protobuf:"varint,4,opt,name=set_reset,json=setReset,proto3" json:"set_reset,omitempty"`
	SetControl int32 `protobuf:"varint,5,opt,name=set_control,json=setControl,proto3" json:"set_control,omitempty"`
}

func (m *WlstSlu_9D00_SetMark) Reset()         { *m = WlstSlu_9D00_SetMark{} }
func (m *WlstSlu_9D00_SetMark) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SetMark) ProtoMessage()    {}
func (*WlstSlu_9D00_SetMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 0}
}
func (m *WlstSlu_9D00_SetMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SetMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SetMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SetMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SetMark.Merge(m, src)
}
func (m *WlstSlu_9D00_SetMark) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SetMark) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SetMark.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SetMark proto.InternalMessageInfo

func (m *WlstSlu_9D00_SetMark) GetSetTimer() int32 {
	if m != nil {
		return m.SetTimer
	}
	return 0
}

func (m *WlstSlu_9D00_SetMark) GetSetArgs() int32 {
	if m != nil {
		return m.SetArgs
	}
	return 0
}

func (m *WlstSlu_9D00_SetMark) GetSetGroup() int32 {
	if m != nil {
		return m.SetGroup
	}
	return 0
}

func (m *WlstSlu_9D00_SetMark) GetSetReset() int32 {
	if m != nil {
		return m.SetReset
	}
	return 0
}

func (m *WlstSlu_9D00_SetMark) GetSetControl() int32 {
	if m != nil {
		return m.SetControl
	}
	return 0
}

type WlstSlu_9D00_SluitemData struct {
	// 电压 /100
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流 /100
	Current []float64 `protobuf:"fixed64,2,rep,packed,name=current,proto3" json:"current,omitempty"`
	// 有功功率 /10
	ActivePower []float64 `protobuf:"fixed64,3,rep,packed,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 无功功率 /10
	ReactivePower []float64 `protobuf:"fixed64,4,rep,packed,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`
	// 最大电压 /100
	MaxVoltage float64 `protobuf:"fixed64,5,opt,name=max_voltage,json=maxVoltage,proto3" json:"max_voltage,omitempty"`
	// 最大电流 /100
	MaxCurrent []float64 `protobuf:"fixed64,6,rep,packed,name=max_current,json=maxCurrent,proto3" json:"max_current,omitempty"`
	// 累计电量
	TotalElectricity []float64 `protobuf:"fixed64,7,rep,packed,name=total_electricity,json=totalElectricity,proto3" json:"total_electricity,omitempty"`
	// 温度 0xff无效
	Temperature int32 `protobuf:"varint,8,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 漏电流 /100
	LeakageCurrent float64 `protobuf:"fixed64,9,opt,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
	// 时钟故障
	TimerError int32 `protobuf:"varint,10,opt,name=timer_error,json=timerError,proto3" json:"timer_error,omitempty"`
	// 控制器状态
	SluitemStatus *WlstSlu_7300_BaseSluitemData_SluitemStatus `protobuf:"bytes,11,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 灯状态
	LightStatus []*WlstSlu_7300_BaseSluitemData_LightStatus `protobuf:"bytes,12,rep,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	// 自复位次数
	ResetCount int32 `protobuf:"varint,13,opt,name=reset_count,json=resetCount,proto3" json:"reset_count,omitempty"`
}

func (m *WlstSlu_9D00_SluitemData) Reset()         { *m = WlstSlu_9D00_SluitemData{} }
func (m *WlstSlu_9D00_SluitemData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemData) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 1}
}
func (m *WlstSlu_9D00_SluitemData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemData.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemData proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemData) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemData) GetCurrent() []float64 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetActivePower() []float64 {
	if m != nil {
		return m.ActivePower
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetReactivePower() []float64 {
	if m != nil {
		return m.ReactivePower
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetMaxVoltage() float64 {
	if m != nil {
		return m.MaxVoltage
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemData) GetMaxCurrent() []float64 {
	if m != nil {
		return m.MaxCurrent
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetTotalElectricity() []float64 {
	if m != nil {
		return m.TotalElectricity
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemData) GetLeakageCurrent() float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemData) GetTimerError() int32 {
	if m != nil {
		return m.TimerError
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemData) GetSluitemStatus() *WlstSlu_7300_BaseSluitemData_SluitemStatus {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetLightStatus() []*WlstSlu_7300_BaseSluitemData_LightStatus {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemData) GetResetCount() int32 {
	if m != nil {
		return m.ResetCount
	}
	return 0
}

type WlstSlu_9D00_SluitemDataNew struct {
	// 电压 /100
	Voltage []float64 `protobuf:"fixed64,1,rep,packed,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流 /100
	Current []float64 `protobuf:"fixed64,2,rep,packed,name=current,proto3" json:"current,omitempty"`
	// 有功功率 /10
	ActivePower []float64 `protobuf:"fixed64,3,rep,packed,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 运行时间
	RunTime []int32 `protobuf:"varint,4,rep,packed,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// 相位，0-无法确认,1-a,2-b,3-c
	Phase int32 `protobuf:"varint,5,opt,name=phase,proto3" json:"phase,omitempty"`
	// 累计电量
	TotalElectricity []float64 `protobuf:"fixed64,7,rep,packed,name=total_electricity,json=totalElectricity,proto3" json:"total_electricity,omitempty"`
	// 漏电流 /100
	LeakageCurrent float64 `protobuf:"fixed64,9,opt,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
	// 时钟故障
	TimerError int32 `protobuf:"varint,10,opt,name=timer_error,json=timerError,proto3" json:"timer_error,omitempty"`
	// 控制器状态
	SluitemStatus *WlstSlu_7300_BaseSluitemData_SluitemStatus `protobuf:"bytes,11,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 灯状态
	LightStatus []*WlstSlu_7300_BaseSluitemData_LightStatus `protobuf:"bytes,12,rep,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	// 自复位次数
	ResetCount int32 `protobuf:"varint,13,opt,name=reset_count,json=resetCount,proto3" json:"reset_count,omitempty"`
	// 节能档位
	EnergySaving []int32 `protobuf:"varint,14,rep,packed,name=energy_saving,json=energySaving,proto3" json:"energy_saving,omitempty"`
}

func (m *WlstSlu_9D00_SluitemDataNew) Reset()         { *m = WlstSlu_9D00_SluitemDataNew{} }
func (m *WlstSlu_9D00_SluitemDataNew) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemDataNew) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemDataNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 2}
}
func (m *WlstSlu_9D00_SluitemDataNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemDataNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemDataNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemDataNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemDataNew.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemDataNew) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemDataNew) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemDataNew.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemDataNew proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemDataNew) GetVoltage() []float64 {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetCurrent() []float64 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetActivePower() []float64 {
	if m != nil {
		return m.ActivePower
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetRunTime() []int32 {
	if m != nil {
		return m.RunTime
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemDataNew) GetTotalElectricity() []float64 {
	if m != nil {
		return m.TotalElectricity
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetLeakageCurrent() float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemDataNew) GetTimerError() int32 {
	if m != nil {
		return m.TimerError
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemDataNew) GetSluitemStatus() *WlstSlu_7300_BaseSluitemData_SluitemStatus {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetLightStatus() []*WlstSlu_7300_BaseSluitemData_LightStatus {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemDataNew) GetResetCount() int32 {
	if m != nil {
		return m.ResetCount
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemDataNew) GetEnergySaving() []int32 {
	if m != nil {
		return m.EnergySaving
	}
	return nil
}

type WlstSlu_9D00_SluitemPara struct {
	// 域名
	DomainName int32 `protobuf:"varint,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// 控制器状态 0-停运，1-投运
	SluitemStatus int32 `protobuf:"varint,2,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 控制器主报 0-禁止主报，1-允许主报
	SluitemEnableAlarm int32 `protobuf:"varint,3,opt,name=sluitem_enable_alarm,json=sluitemEnableAlarm,proto3" json:"sluitem_enable_alarm,omitempty"`
	// 控制器上电开灯 1-开灯，0-关灯
	SluitemPowerTurnon []int32 `protobuf:"varint,4,rep,packed,name=sluitem_power_turnon,json=sluitemPowerTurnon,proto3" json:"sluitem_power_turnon,omitempty"`
	// 控制器1-4回路矢量
	SluitemVector []int32 `protobuf:"varint,5,rep,packed,name=sluitem_vector,json=sluitemVector,proto3" json:"sluitem_vector,omitempty"`
	// 经度
	Longitude float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 1-4回路额定功率
	RatedPower []int32 `protobuf:"varint,8,rep,packed,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`
	// nb主报间隔，(0～127)*5
	UplinkTimer int32 `protobuf:"varint,9,opt,name=uplink_timer,json=uplinkTimer,proto3" json:"uplink_timer,omitempty"`
	// nb主报需要主站应答，0-不需要，1-需要
	UplinkReply int32 `protobuf:"varint,10,opt,name=uplink_reply,json=uplinkReply,proto3" json:"uplink_reply,omitempty"`
}

func (m *WlstSlu_9D00_SluitemPara) Reset()         { *m = WlstSlu_9D00_SluitemPara{} }
func (m *WlstSlu_9D00_SluitemPara) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemPara) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemPara) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 3}
}
func (m *WlstSlu_9D00_SluitemPara) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemPara) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemPara.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemPara) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemPara.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemPara) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemPara) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemPara.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemPara proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemPara) GetDomainName() int32 {
	if m != nil {
		return m.DomainName
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetSluitemStatus() int32 {
	if m != nil {
		return m.SluitemStatus
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetSluitemEnableAlarm() int32 {
	if m != nil {
		return m.SluitemEnableAlarm
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetSluitemPowerTurnon() []int32 {
	if m != nil {
		return m.SluitemPowerTurnon
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemPara) GetSluitemVector() []int32 {
	if m != nil {
		return m.SluitemVector
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemPara) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetRatedPower() []int32 {
	if m != nil {
		return m.RatedPower
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemPara) GetUplinkTimer() int32 {
	if m != nil {
		return m.UplinkTimer
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemPara) GetUplinkReply() int32 {
	if m != nil {
		return m.UplinkReply
	}
	return 0
}

type WlstSlu_9D00_SluitemVer struct {
	// 控制器回路
	SluitemLoop int32 `protobuf:"varint,1,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
	// 节能方式
	EnergySaving int32 `protobuf:"varint,2,opt,name=energy_saving,json=energySaving,proto3" json:"energy_saving,omitempty"`
	// 有漏电模块
	ElectricLeakageModule int32 `protobuf:"varint,3,opt,name=electric_leakage_module,json=electricLeakageModule,proto3" json:"electric_leakage_module,omitempty"`
	// 有温度检测模块
	TemperatureModule int32 `protobuf:"varint,4,opt,name=temperature_module,json=temperatureModule,proto3" json:"temperature_module,omitempty"`
	// 有时钟
	TimerModule int32 `protobuf:"varint,5,opt,name=timer_module,json=timerModule,proto3" json:"timer_module,omitempty"`
	// 型号 0-unknow,1-wj2090j
	SluitemType string `protobuf:"bytes,6,opt,name=sluitem_type,json=sluitemType,proto3" json:"sluitem_type,omitempty"`
	// 软件版本
	Ver string `protobuf:"bytes,7,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *WlstSlu_9D00_SluitemVer) Reset()         { *m = WlstSlu_9D00_SluitemVer{} }
func (m *WlstSlu_9D00_SluitemVer) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemVer) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemVer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 4}
}
func (m *WlstSlu_9D00_SluitemVer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemVer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemVer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemVer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemVer.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemVer) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemVer) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemVer.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemVer proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemVer) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemVer) GetEnergySaving() int32 {
	if m != nil {
		return m.EnergySaving
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemVer) GetElectricLeakageModule() int32 {
	if m != nil {
		return m.ElectricLeakageModule
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemVer) GetTemperatureModule() int32 {
	if m != nil {
		return m.TemperatureModule
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemVer) GetTimerModule() int32 {
	if m != nil {
		return m.TimerModule
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemVer) GetSluitemType() string {
	if m != nil {
		return m.SluitemType
	}
	return ""
}

func (m *WlstSlu_9D00_SluitemVer) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type WlstSlu_9D00_SluitemSunriseset struct {
	// 当日日出日落时间 hhmm->int32
	Sunrise int32 `protobuf:"varint,1,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	Sunset  int32 `protobuf:"varint,2,opt,name=sunset,proto3" json:"sunset,omitempty"`
}

func (m *WlstSlu_9D00_SluitemSunriseset) Reset()         { *m = WlstSlu_9D00_SluitemSunriseset{} }
func (m *WlstSlu_9D00_SluitemSunriseset) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemSunriseset) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemSunriseset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 5}
}
func (m *WlstSlu_9D00_SluitemSunriseset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemSunriseset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemSunriseset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemSunriseset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemSunriseset.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemSunriseset) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemSunriseset) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemSunriseset.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemSunriseset proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemSunriseset) GetSunrise() int32 {
	if m != nil {
		return m.Sunrise
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemSunriseset) GetSunset() int32 {
	if m != nil {
		return m.Sunset
	}
	return 0
}

type WlstSlu_9D00_SluitemRuntime struct {
	// 本地控制数据类型0-基本类型（6字节），1-扩展类型（6+20字节）
	DataType int32 `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// 输出类型0-继电器，1-pwm输出，2-485
	OutputType int32 `protobuf:"varint,2,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	// 操作类型1-定时操作，2-经纬度操作，3-即时操作
	OperateType int32 `protobuf:"varint,3,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`
	// 有效日期，0-6～周日-周6
	DateEnable []int32 `protobuf:"varint,4,rep,packed,name=date_enable,json=dateEnable,proto3" json:"date_enable,omitempty"`
	// 开关灯操作时间 hhmm->int32
	OperateTime int32 `protobuf:"varint,5,opt,name=operate_time,json=operateTime,proto3" json:"operate_time,omitempty"`
	// 操作偏移 -720~+720
	OperateOffset int32 `protobuf:"varint,6,opt,name=operate_offset,json=operateOffset,proto3" json:"operate_offset,omitempty"`
	// 继电器操作回路1-4 0-不操作，3-开灯，5-一档节能，a-二档节能，c-关灯
	RelayOperate []int32 `protobuf:"varint,7,rep,packed,name=relay_operate,json=relayOperate,proto3" json:"relay_operate,omitempty"`
	// PWM操作回路
	PwmLoop []int32 `protobuf:"varint,8,rep,packed,name=pwm_loop,json=pwmLoop,proto3" json:"pwm_loop,omitempty"`
	// PWM操作占空比
	PwmPower int32 `protobuf:"varint,9,opt,name=pwm_power,json=pwmPower,proto3" json:"pwm_power,omitempty"`
	// PWM频率 (1~255) * 100
	PwmBaudrate int32 `protobuf:"varint,10,opt,name=pwm_baudrate,json=pwmBaudrate,proto3" json:"pwm_baudrate,omitempty"`
	// 485波特率 0-300,1-600,2-1200,3-2400,4-4800,5-9600,6-19200
	Rs485Baudrate int32 `protobuf:"varint,11,opt,name=rs485_baudrate,json=rs485Baudrate,proto3" json:"rs485_baudrate,omitempty"`
	// 485校验位 0-无校验，1-奇校验，2-偶校验
	Rs485Check int32 `protobuf:"varint,12,opt,name=rs485_check,json=rs485Check,proto3" json:"rs485_check,omitempty"`
}

func (m *WlstSlu_9D00_SluitemRuntime) Reset()         { *m = WlstSlu_9D00_SluitemRuntime{} }
func (m *WlstSlu_9D00_SluitemRuntime) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_9D00_SluitemRuntime) ProtoMessage()    {}
func (*WlstSlu_9D00_SluitemRuntime) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{16, 6}
}
func (m *WlstSlu_9D00_SluitemRuntime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_9D00_SluitemRuntime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_9D00_SluitemRuntime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_9D00_SluitemRuntime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_9D00_SluitemRuntime.Merge(m, src)
}
func (m *WlstSlu_9D00_SluitemRuntime) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_9D00_SluitemRuntime) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_9D00_SluitemRuntime.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_9D00_SluitemRuntime proto.InternalMessageInfo

func (m *WlstSlu_9D00_SluitemRuntime) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetOutputType() int32 {
	if m != nil {
		return m.OutputType
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetOperateType() int32 {
	if m != nil {
		return m.OperateType
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetDateEnable() []int32 {
	if m != nil {
		return m.DateEnable
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemRuntime) GetOperateTime() int32 {
	if m != nil {
		return m.OperateTime
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetOperateOffset() int32 {
	if m != nil {
		return m.OperateOffset
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetRelayOperate() []int32 {
	if m != nil {
		return m.RelayOperate
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemRuntime) GetPwmLoop() []int32 {
	if m != nil {
		return m.PwmLoop
	}
	return nil
}

func (m *WlstSlu_9D00_SluitemRuntime) GetPwmPower() int32 {
	if m != nil {
		return m.PwmPower
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetPwmBaudrate() int32 {
	if m != nil {
		return m.PwmBaudrate
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetRs485Baudrate() int32 {
	if m != nil {
		return m.Rs485Baudrate
	}
	return 0
}

func (m *WlstSlu_9D00_SluitemRuntime) GetRs485Check() int32 {
	if m != nil {
		return m.Rs485Check
	}
	return 0
}

// Wlst_slu_7000
type WlstSluF000 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 复位标识
	ResetMark *WlstSluF000_ResetMark `protobuf:"bytes,2,opt,name=reset_mark,json=resetMark,proto3" json:"reset_mark,omitempty"`
}

func (m *WlstSluF000) Reset()         { *m = WlstSluF000{} }
func (m *WlstSluF000) String() string { return proto.CompactTextString(m) }
func (*WlstSluF000) ProtoMessage()    {}
func (*WlstSluF000) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{17}
}
func (m *WlstSluF000) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF000) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF000.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF000) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF000.Merge(m, src)
}
func (m *WlstSluF000) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF000) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF000.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF000 proto.InternalMessageInfo

func (m *WlstSluF000) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF000) GetResetMark() *WlstSluF000_ResetMark {
	if m != nil {
		return m.ResetMark
	}
	return nil
}

type WlstSluF000_ResetMark struct {
	// 清除任务
	ClearTask int32 `protobuf:"varint,1,opt,name=clear_task,json=clearTask,proto3" json:"clear_task,omitempty"`
	// 复位集中器
	ResetConcentrator int32 `protobuf:"varint,2,opt,name=reset_concentrator,json=resetConcentrator,proto3" json:"reset_concentrator,omitempty"`
	// 硬件复位zigbee
	HardResetZigbee int32 `protobuf:"varint,3,opt,name=hard_reset_zigbee,json=hardResetZigbee,proto3" json:"hard_reset_zigbee,omitempty"`
	// 软件复位zigbee
	SoftResetZigbee int32 `protobuf:"varint,4,opt,name=soft_reset_zigbee,json=softResetZigbee,proto3" json:"soft_reset_zigbee,omitempty"`
	// 复位电力载波
	ResetCarrier int32 `protobuf:"varint,5,opt,name=reset_carrier,json=resetCarrier,proto3" json:"reset_carrier,omitempty"`
	// 初始化所有
	InitAll int32 `protobuf:"varint,6,opt,name=init_all,json=initAll,proto3" json:"init_all,omitempty"`
	// 清除数据
	ClearData int32 `protobuf:"varint,7,opt,name=clear_data,json=clearData,proto3" json:"clear_data,omitempty"`
	// 清除参数
	ClearArgs int32 `protobuf:"varint,8,opt,name=clear_args,json=clearArgs,proto3" json:"clear_args,omitempty"`
}

func (m *WlstSluF000_ResetMark) Reset()         { *m = WlstSluF000_ResetMark{} }
func (m *WlstSluF000_ResetMark) String() string { return proto.CompactTextString(m) }
func (*WlstSluF000_ResetMark) ProtoMessage()    {}
func (*WlstSluF000_ResetMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{17, 0}
}
func (m *WlstSluF000_ResetMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF000_ResetMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF000_ResetMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF000_ResetMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF000_ResetMark.Merge(m, src)
}
func (m *WlstSluF000_ResetMark) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF000_ResetMark) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF000_ResetMark.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF000_ResetMark proto.InternalMessageInfo

func (m *WlstSluF000_ResetMark) GetClearTask() int32 {
	if m != nil {
		return m.ClearTask
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetResetConcentrator() int32 {
	if m != nil {
		return m.ResetConcentrator
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetHardResetZigbee() int32 {
	if m != nil {
		return m.HardResetZigbee
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetSoftResetZigbee() int32 {
	if m != nil {
		return m.SoftResetZigbee
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetResetCarrier() int32 {
	if m != nil {
		return m.ResetCarrier
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetInitAll() int32 {
	if m != nil {
		return m.InitAll
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetClearData() int32 {
	if m != nil {
		return m.ClearData
	}
	return 0
}

func (m *WlstSluF000_ResetMark) GetClearArgs() int32 {
	if m != nil {
		return m.ClearArgs
	}
	return 0
}

// Wlst_slu_7100
type WlstSluF100 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 操作标识0-设置时钟，1-读取时钟
	OptMark int32 `protobuf:"varint,2,opt,name=opt_mark,json=optMark,proto3" json:"opt_mark,omitempty"`
	// 时间（c#需加1970-1-1）
	DateTime int64 `protobuf:"varint,3,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// 强制对时
	ForceTimer int32 `protobuf:"varint,4,opt,name=force_timer,json=forceTimer,proto3" json:"force_timer,omitempty"`
	// 错误标识
	TimerStatus *WlstSluF100_TimerStatus `protobuf:"bytes,5,opt,name=timer_status,json=timerStatus,proto3" json:"timer_status,omitempty"`
}

func (m *WlstSluF100) Reset()         { *m = WlstSluF100{} }
func (m *WlstSluF100) String() string { return proto.CompactTextString(m) }
func (*WlstSluF100) ProtoMessage()    {}
func (*WlstSluF100) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{18}
}
func (m *WlstSluF100) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF100) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF100.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF100) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF100.Merge(m, src)
}
func (m *WlstSluF100) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF100) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF100.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF100 proto.InternalMessageInfo

func (m *WlstSluF100) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF100) GetOptMark() int32 {
	if m != nil {
		return m.OptMark
	}
	return 0
}

func (m *WlstSluF100) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func (m *WlstSluF100) GetForceTimer() int32 {
	if m != nil {
		return m.ForceTimer
	}
	return 0
}

func (m *WlstSluF100) GetTimerStatus() *WlstSluF100_TimerStatus {
	if m != nil {
		return m.TimerStatus
	}
	return nil
}

type WlstSluF100_TimerStatus struct {
	// 时间数据错误
	DtformatError int32 `protobuf:"varint,1,opt,name=dtformat_error,json=dtformatError,proto3" json:"dtformat_error,omitempty"`
	// 时钟超差
	TimerError int32 `protobuf:"varint,2,opt,name=timer_error,json=timerError,proto3" json:"timer_error,omitempty"`
	// 对时失败
	TimeFault int32 `protobuf:"varint,3,opt,name=time_fault,json=timeFault,proto3" json:"time_fault,omitempty"`
}

func (m *WlstSluF100_TimerStatus) Reset()         { *m = WlstSluF100_TimerStatus{} }
func (m *WlstSluF100_TimerStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSluF100_TimerStatus) ProtoMessage()    {}
func (*WlstSluF100_TimerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{18, 0}
}
func (m *WlstSluF100_TimerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF100_TimerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF100_TimerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF100_TimerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF100_TimerStatus.Merge(m, src)
}
func (m *WlstSluF100_TimerStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF100_TimerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF100_TimerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF100_TimerStatus proto.InternalMessageInfo

func (m *WlstSluF100_TimerStatus) GetDtformatError() int32 {
	if m != nil {
		return m.DtformatError
	}
	return 0
}

func (m *WlstSluF100_TimerStatus) GetTimerError() int32 {
	if m != nil {
		return m.TimerError
	}
	return 0
}

func (m *WlstSluF100_TimerStatus) GetTimeFault() int32 {
	if m != nil {
		return m.TimeFault
	}
	return 0
}

// Wlst_slu_7200
type WlstSluF200 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 起始控制器地址
	SluitemIdx int32 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 控制器数量
	SluitemCount int32 `protobuf:"varint,3,opt,name=sluitem_count,json=sluitemCount,proto3" json:"sluitem_count,omitempty"`
	// 数据类型
	DataMark *WlstSluF200_DataMark `protobuf:"bytes,4,opt,name=data_mark,json=dataMark,proto3" json:"data_mark,omitempty"`
	// 控制器数据
	SluitemData []*WlstSluF200_ControllerData `protobuf:"bytes,5,rep,name=sluitem_data,json=sluitemData,proto3" json:"sluitem_data,omitempty"`
	// 操作结果0-失败，1-成功
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstSluF200) Reset()         { *m = WlstSluF200{} }
func (m *WlstSluF200) String() string { return proto.CompactTextString(m) }
func (*WlstSluF200) ProtoMessage()    {}
func (*WlstSluF200) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{19}
}
func (m *WlstSluF200) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF200) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF200.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF200) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF200.Merge(m, src)
}
func (m *WlstSluF200) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF200) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF200.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF200 proto.InternalMessageInfo

func (m *WlstSluF200) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF200) GetSluitemIdx() int32 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSluF200) GetSluitemCount() int32 {
	if m != nil {
		return m.SluitemCount
	}
	return 0
}

func (m *WlstSluF200) GetDataMark() *WlstSluF200_DataMark {
	if m != nil {
		return m.DataMark
	}
	return nil
}

func (m *WlstSluF200) GetSluitemData() []*WlstSluF200_ControllerData {
	if m != nil {
		return m.SluitemData
	}
	return nil
}

func (m *WlstSluF200) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WlstSluF200_DataMark struct {
	// 指令类型 0-读取数据，1-设置数据
	SetData int32 `protobuf:"varint,20,opt,name=set_data,json=setData,proto3" json:"set_data,omitempty"`
	// 控制器所属组（5个）
	Group int32 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	// 控制器条码
	Barcode int32 `protobuf:"varint,2,opt,name=barcode,proto3" json:"barcode,omitempty"`
	// 控制器路由（前4级通信控制器编号1,2,3...)
	Route int32 `protobuf:"varint,3,opt,name=route,proto3" json:"route,omitempty"`
	// 开灯序号
	Order int32 `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	// 功率上限/下限
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 上电控制状态
	PowerOnStatus int32 `protobuf:"varint,6,opt,name=power_on_status,json=powerOnStatus,proto3" json:"power_on_status,omitempty"`
	// 2-投运，1-停运
	RunStatus int32 `protobuf:"varint,7,opt,name=run_status,json=runStatus,proto3" json:"run_status,omitempty"`
	// 控制器物理矢量
	Vector int32 `protobuf:"varint,8,opt,name=vector,proto3" json:"vector,omitempty"`
	// 额定功率
	RatedPower int32 `protobuf:"varint,9,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`
	// 回路数量
	LoopCount int32 `protobuf:"varint,10,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty"`
}

func (m *WlstSluF200_DataMark) Reset()         { *m = WlstSluF200_DataMark{} }
func (m *WlstSluF200_DataMark) String() string { return proto.CompactTextString(m) }
func (*WlstSluF200_DataMark) ProtoMessage()    {}
func (*WlstSluF200_DataMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{19, 0}
}
func (m *WlstSluF200_DataMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF200_DataMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF200_DataMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF200_DataMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF200_DataMark.Merge(m, src)
}
func (m *WlstSluF200_DataMark) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF200_DataMark) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF200_DataMark.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF200_DataMark proto.InternalMessageInfo

func (m *WlstSluF200_DataMark) GetSetData() int32 {
	if m != nil {
		return m.SetData
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetBarcode() int32 {
	if m != nil {
		return m.Barcode
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetRoute() int32 {
	if m != nil {
		return m.Route
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetPowerOnStatus() int32 {
	if m != nil {
		return m.PowerOnStatus
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetRunStatus() int32 {
	if m != nil {
		return m.RunStatus
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetVector() int32 {
	if m != nil {
		return m.Vector
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetRatedPower() int32 {
	if m != nil {
		return m.RatedPower
	}
	return 0
}

func (m *WlstSluF200_DataMark) GetLoopCount() int32 {
	if m != nil {
		return m.LoopCount
	}
	return 0
}

type WlstSluF200_ControllerData struct {
	// 控制器所属组（5个）
	SluitemGroup []int32 `protobuf:"varint,1,rep,packed,name=sluitem_group,json=sluitemGroup,proto3" json:"sluitem_group,omitempty"`
	// 控制器条码
	SluitemIdx int64 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 控制器路由（前4级通信控制器编号1,2,3...)
	SluitemRoute []int32 `protobuf:"varint,3,rep,packed,name=sluitem_route,json=sluitemRoute,proto3" json:"sluitem_route,omitempty"`
	// 开灯序号
	SluitemOrder int32 `protobuf:"varint,4,opt,name=sluitem_order,json=sluitemOrder,proto3" json:"sluitem_order,omitempty"`
	// 功率上限
	UpperPowerLimit int32 `protobuf:"varint,5,opt,name=upper_power_limit,json=upperPowerLimit,proto3" json:"upper_power_limit,omitempty"`
	// 功率下限
	LowerPowerLimit int32 `protobuf:"varint,6,opt,name=lower_power_limit,json=lowerPowerLimit,proto3" json:"lower_power_limit,omitempty"`
	// 控制器上电开灯 true-开灯，false-关灯
	SluitemPowerTurnon []int32 `protobuf:"varint,7,rep,packed,name=sluitem_power_turnon,json=sluitemPowerTurnon,proto3" json:"sluitem_power_turnon,omitempty"`
	// 控制器状态 false-停运，true-投运
	SluitemStatus int32 `protobuf:"varint,8,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 控制器主报 false-禁止主报，true-允许主报
	SluitemEnableAlarm int32 `protobuf:"varint,9,opt,name=sluitem_enable_alarm,json=sluitemEnableAlarm,proto3" json:"sluitem_enable_alarm,omitempty"`
	// 控制器物理矢量
	SluitemVector []int32 `protobuf:"varint,10,rep,packed,name=sluitem_vector,json=sluitemVector,proto3" json:"sluitem_vector,omitempty"`
	// 额定功率
	RatedPower []int32 `protobuf:"varint,11,rep,packed,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`
	// 回路数量
	LoopCount int32 `protobuf:"varint,12,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty"`
	// 经度
	Longitude float64 `protobuf:"fixed64,13,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度
	Latitude float64 `protobuf:"fixed64,14,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// nb主报间隔，(0～127)*5
	UplinkTimer int32 `protobuf:"varint,15,opt,name=uplink_timer,json=uplinkTimer,proto3" json:"uplink_timer,omitempty"`
	// nb主报需要主站应答，0-不需要，1-需要
	UplinkReply int32 `protobuf:"varint,16,opt,name=uplink_reply,json=uplinkReply,proto3" json:"uplink_reply,omitempty"`
}

func (m *WlstSluF200_ControllerData) Reset()         { *m = WlstSluF200_ControllerData{} }
func (m *WlstSluF200_ControllerData) String() string { return proto.CompactTextString(m) }
func (*WlstSluF200_ControllerData) ProtoMessage()    {}
func (*WlstSluF200_ControllerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{19, 1}
}
func (m *WlstSluF200_ControllerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF200_ControllerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF200_ControllerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF200_ControllerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF200_ControllerData.Merge(m, src)
}
func (m *WlstSluF200_ControllerData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF200_ControllerData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF200_ControllerData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF200_ControllerData proto.InternalMessageInfo

func (m *WlstSluF200_ControllerData) GetSluitemGroup() []int32 {
	if m != nil {
		return m.SluitemGroup
	}
	return nil
}

func (m *WlstSluF200_ControllerData) GetSluitemIdx() int64 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetSluitemRoute() []int32 {
	if m != nil {
		return m.SluitemRoute
	}
	return nil
}

func (m *WlstSluF200_ControllerData) GetSluitemOrder() int32 {
	if m != nil {
		return m.SluitemOrder
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetUpperPowerLimit() int32 {
	if m != nil {
		return m.UpperPowerLimit
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetLowerPowerLimit() int32 {
	if m != nil {
		return m.LowerPowerLimit
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetSluitemPowerTurnon() []int32 {
	if m != nil {
		return m.SluitemPowerTurnon
	}
	return nil
}

func (m *WlstSluF200_ControllerData) GetSluitemStatus() int32 {
	if m != nil {
		return m.SluitemStatus
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetSluitemEnableAlarm() int32 {
	if m != nil {
		return m.SluitemEnableAlarm
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetSluitemVector() []int32 {
	if m != nil {
		return m.SluitemVector
	}
	return nil
}

func (m *WlstSluF200_ControllerData) GetRatedPower() []int32 {
	if m != nil {
		return m.RatedPower
	}
	return nil
}

func (m *WlstSluF200_ControllerData) GetLoopCount() int32 {
	if m != nil {
		return m.LoopCount
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetUplinkTimer() int32 {
	if m != nil {
		return m.UplinkTimer
	}
	return 0
}

func (m *WlstSluF200_ControllerData) GetUplinkReply() int32 {
	if m != nil {
		return m.UplinkReply
	}
	return 0
}

// Wlst_slu_f300
type WlstSlu_7300 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 起始控制器地址(带标识)
	SluitemStart int32 `protobuf:"varint,2,opt,name=sluitem_start,json=sluitemStart,proto3" json:"sluitem_start,omitempty"`
	// 控制器数量
	SluitemCount int32 `protobuf:"varint,3,opt,name=sluitem_count,json=sluitemCount,proto3" json:"sluitem_count,omitempty"`
	// 选测数据类型
	// 0-选测集中器，1-选测控制器基本数据（不用），2-选测未知控制器，3-选测控制器辅助参数（不用），4-选测控制器物理信息，5-选测控制器带时标数据，6-选测控制器带时标辅助数据,
	// 7-控制器双字节电压电流数据，带电量
	DataMark int32 `protobuf:"varint,4,opt,name=data_mark,json=dataMark,proto3" json:"data_mark,omitempty"`
	// 选测集中器
	ConcentratorData *WlstSlu_7300_ConcentratorData `protobuf:"bytes,5,opt,name=concentrator_data,json=concentratorData,proto3" json:"concentrator_data,omitempty"`
	// 选测控制器基本参数
	BaseSluitemData []*WlstSlu_7300_BaseSluitemData `protobuf:"bytes,6,rep,name=base_sluitem_data,json=baseSluitemData,proto3" json:"base_sluitem_data,omitempty"`
	// 选测未知控制器
	UnknowSluitem []*WlstSlu_7300_UnknowSluitem `protobuf:"bytes,7,rep,name=unknow_sluitem,json=unknowSluitem,proto3" json:"unknow_sluitem,omitempty"`
	// 选测控制器辅助参数
	AssistSluitemData []*WlstSlu_7300_AssistSluitemData `protobuf:"bytes,8,rep,name=assist_sluitem_data,json=assistSluitemData,proto3" json:"assist_sluitem_data,omitempty"`
	// 选测控制器物理信息
	SluitemPhyinfo []*WlstSlu_7300_SluitemPhyinfo `protobuf:"bytes,9,rep,name=sluitem_phyinfo,json=sluitemPhyinfo,proto3" json:"sluitem_phyinfo,omitempty"`
	// 控制器序号(地址)
	SluitemAddrs []int32 `protobuf:"varint,10,rep,packed,name=sluitem_addrs,json=sluitemAddrs,proto3" json:"sluitem_addrs,omitempty"`
}

func (m *WlstSlu_7300) Reset()         { *m = WlstSlu_7300{} }
func (m *WlstSlu_7300) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300) ProtoMessage()    {}
func (*WlstSlu_7300) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20}
}
func (m *WlstSlu_7300) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300.Merge(m, src)
}
func (m *WlstSlu_7300) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300 proto.InternalMessageInfo

func (m *WlstSlu_7300) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_7300) GetSluitemStart() int32 {
	if m != nil {
		return m.SluitemStart
	}
	return 0
}

func (m *WlstSlu_7300) GetSluitemCount() int32 {
	if m != nil {
		return m.SluitemCount
	}
	return 0
}

func (m *WlstSlu_7300) GetDataMark() int32 {
	if m != nil {
		return m.DataMark
	}
	return 0
}

func (m *WlstSlu_7300) GetConcentratorData() *WlstSlu_7300_ConcentratorData {
	if m != nil {
		return m.ConcentratorData
	}
	return nil
}

func (m *WlstSlu_7300) GetBaseSluitemData() []*WlstSlu_7300_BaseSluitemData {
	if m != nil {
		return m.BaseSluitemData
	}
	return nil
}

func (m *WlstSlu_7300) GetUnknowSluitem() []*WlstSlu_7300_UnknowSluitem {
	if m != nil {
		return m.UnknowSluitem
	}
	return nil
}

func (m *WlstSlu_7300) GetAssistSluitemData() []*WlstSlu_7300_AssistSluitemData {
	if m != nil {
		return m.AssistSluitemData
	}
	return nil
}

func (m *WlstSlu_7300) GetSluitemPhyinfo() []*WlstSlu_7300_SluitemPhyinfo {
	if m != nil {
		return m.SluitemPhyinfo
	}
	return nil
}

func (m *WlstSlu_7300) GetSluitemAddrs() []int32 {
	if m != nil {
		return m.SluitemAddrs
	}
	return nil
}

type WlstSlu_7300_ConcentratorData struct {
	// 复位次数
	ResetCount []int32 `protobuf:"varint,1,rep,packed,name=reset_count,json=resetCount,proto3" json:"reset_count,omitempty"`
	// 集中器状态
	RunStatus *WlstSlu_7300_ConcentratorData_RunStatus `protobuf:"bytes,2,opt,name=run_status,json=runStatus,proto3" json:"run_status,omitempty"`
	// 参数状态
	ArgsStatus *WlstSlu_7300_ConcentratorData_ArgsStatus `protobuf:"bytes,3,opt,name=args_status,json=argsStatus,proto3" json:"args_status,omitempty"`
	// 硬件状态
	HardwareStatus *WlstSlu_7300_ConcentratorData_HardwareStatus `protobuf:"bytes,4,opt,name=hardware_status,json=hardwareStatus,proto3" json:"hardware_status,omitempty"`
	// 未知控制器
	UnknowSluitemCount int32 `protobuf:"varint,5,opt,name=unknow_sluitem_count,json=unknowSluitemCount,proto3" json:"unknow_sluitem_count,omitempty"`
	// 通信信道 -10为当前值
	CommunicationChannel int32 `protobuf:"varint,6,opt,name=communication_channel,json=communicationChannel,proto3" json:"communication_channel,omitempty"`
}

func (m *WlstSlu_7300_ConcentratorData) Reset()         { *m = WlstSlu_7300_ConcentratorData{} }
func (m *WlstSlu_7300_ConcentratorData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_ConcentratorData) ProtoMessage()    {}
func (*WlstSlu_7300_ConcentratorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 0}
}
func (m *WlstSlu_7300_ConcentratorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_ConcentratorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_ConcentratorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_ConcentratorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData.Merge(m, src)
}
func (m *WlstSlu_7300_ConcentratorData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_ConcentratorData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_ConcentratorData proto.InternalMessageInfo

func (m *WlstSlu_7300_ConcentratorData) GetResetCount() []int32 {
	if m != nil {
		return m.ResetCount
	}
	return nil
}

func (m *WlstSlu_7300_ConcentratorData) GetRunStatus() *WlstSlu_7300_ConcentratorData_RunStatus {
	if m != nil {
		return m.RunStatus
	}
	return nil
}

func (m *WlstSlu_7300_ConcentratorData) GetArgsStatus() *WlstSlu_7300_ConcentratorData_ArgsStatus {
	if m != nil {
		return m.ArgsStatus
	}
	return nil
}

func (m *WlstSlu_7300_ConcentratorData) GetHardwareStatus() *WlstSlu_7300_ConcentratorData_HardwareStatus {
	if m != nil {
		return m.HardwareStatus
	}
	return nil
}

func (m *WlstSlu_7300_ConcentratorData) GetUnknowSluitemCount() int32 {
	if m != nil {
		return m.UnknowSluitemCount
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData) GetCommunicationChannel() int32 {
	if m != nil {
		return m.CommunicationChannel
	}
	return 0
}

type WlstSlu_7300_ConcentratorData_RunStatus struct {
	// 停运 0-正常，1-停运
	Offline int32 `protobuf:"varint,1,opt,name=offline,proto3" json:"offline,omitempty"`
	// 允许主报 0-禁止主报，1-允许主报
	EnableAlarm int32 `protobuf:"varint,2,opt,name=enable_alarm,json=enableAlarm,proto3" json:"enable_alarm,omitempty"`
	// 开机申请 0-非开机，1-开机
	PoweronMark int32 `protobuf:"varint,3,opt,name=poweron_mark,json=poweronMark,proto3" json:"poweron_mark,omitempty"`
	// gprs通讯 0-485,1-gprs
	EnableGprs int32 `protobuf:"varint,4,opt,name=enable_gprs,json=enableGprs,proto3" json:"enable_gprs,omitempty"`
	// 允许巡测 0-不允许,1-允许
	EnableAutochk int32 `protobuf:"varint,5,opt,name=enable_autochk,json=enableAutochk,proto3" json:"enable_autochk,omitempty"`
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) Reset() {
	*m = WlstSlu_7300_ConcentratorData_RunStatus{}
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_ConcentratorData_RunStatus) ProtoMessage()    {}
func (*WlstSlu_7300_ConcentratorData_RunStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 0, 0}
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_ConcentratorData_RunStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_RunStatus.Merge(m, src)
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_RunStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_ConcentratorData_RunStatus proto.InternalMessageInfo

func (m *WlstSlu_7300_ConcentratorData_RunStatus) GetOffline() int32 {
	if m != nil {
		return m.Offline
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) GetEnableAlarm() int32 {
	if m != nil {
		return m.EnableAlarm
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) GetPoweronMark() int32 {
	if m != nil {
		return m.PoweronMark
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) GetEnableGprs() int32 {
	if m != nil {
		return m.EnableGprs
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) GetEnableAutochk() int32 {
	if m != nil {
		return m.EnableAutochk
	}
	return 0
}

type WlstSlu_7300_ConcentratorData_ArgsStatus struct {
	// 集中器参数错误
	ConcentratorArgsError int32 `protobuf:"varint,1,opt,name=concentrator_args_error,json=concentratorArgsError,proto3" json:"concentrator_args_error,omitempty"`
	// 控制器参数错误
	SluitemArgsError int32 `protobuf:"varint,2,opt,name=sluitem_args_error,json=sluitemArgsError,proto3" json:"sluitem_args_error,omitempty"`
	// 开关灯控制参数错误
	TurnOnoffError int32 `protobuf:"varint,3,opt,name=turn_onoff_error,json=turnOnoffError,proto3" json:"turn_onoff_error,omitempty"`
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) Reset() {
	*m = WlstSlu_7300_ConcentratorData_ArgsStatus{}
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_ConcentratorData_ArgsStatus) ProtoMessage()    {}
func (*WlstSlu_7300_ConcentratorData_ArgsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 0, 1}
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_ConcentratorData_ArgsStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_ArgsStatus.Merge(m, src)
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_ArgsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_ConcentratorData_ArgsStatus proto.InternalMessageInfo

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) GetConcentratorArgsError() int32 {
	if m != nil {
		return m.ConcentratorArgsError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) GetSluitemArgsError() int32 {
	if m != nil {
		return m.SluitemArgsError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) GetTurnOnoffError() int32 {
	if m != nil {
		return m.TurnOnoffError
	}
	return 0
}

type WlstSlu_7300_ConcentratorData_HardwareStatus struct {
	// zigbee模块出错
	ZigbeeError int32 `protobuf:"varint,1,opt,name=zigbee_error,json=zigbeeError,proto3" json:"zigbee_error,omitempty"`
	// 电力载波模块出错
	CarrierError int32 `protobuf:"varint,2,opt,name=carrier_error,json=carrierError,proto3" json:"carrier_error,omitempty"`
	// fram出错
	FramError int32 `protobuf:"varint,3,opt,name=fram_error,json=framError,proto3" json:"fram_error,omitempty"`
	// 蓝牙模块出错
	BluetoothError int32 `protobuf:"varint,4,opt,name=bluetooth_error,json=bluetoothError,proto3" json:"bluetooth_error,omitempty"`
	// 硬件时钟出错
	TimerError int32 `protobuf:"varint,5,opt,name=timer_error,json=timerError,proto3" json:"timer_error,omitempty"`
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) Reset() {
	*m = WlstSlu_7300_ConcentratorData_HardwareStatus{}
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7300_ConcentratorData_HardwareStatus) ProtoMessage() {}
func (*WlstSlu_7300_ConcentratorData_HardwareStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 0, 2}
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_ConcentratorData_HardwareStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_HardwareStatus.Merge(m, src)
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_ConcentratorData_HardwareStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_ConcentratorData_HardwareStatus proto.InternalMessageInfo

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) GetZigbeeError() int32 {
	if m != nil {
		return m.ZigbeeError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) GetCarrierError() int32 {
	if m != nil {
		return m.CarrierError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) GetFramError() int32 {
	if m != nil {
		return m.FramError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) GetBluetoothError() int32 {
	if m != nil {
		return m.BluetoothError
	}
	return 0
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) GetTimerError() int32 {
	if m != nil {
		return m.TimerError
	}
	return 0
}

type WlstSlu_7300_BaseSluitemData struct {
	// 控制器数据
	// 日 时:分 c#需加1970-1-1
	DateTime int64 `protobuf:"varint,1,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// 控制器状态
	SluitemStatus *WlstSlu_7300_BaseSluitemData_SluitemStatus `protobuf:"bytes,2,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 温度
	Temperature int32 `protobuf:"varint,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 灯状态
	LightStatus []*WlstSlu_7300_BaseSluitemData_LightStatus `protobuf:"bytes,4,rep,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	// 灯数据
	LightData []*WlstSlu_7300_BaseSluitemData_LightData `protobuf:"bytes,5,rep,name=light_data,json=lightData,proto3" json:"light_data,omitempty"`
	// 字节数 =控制器数量 / 4 每2位一个控制器 0-3（1路，2路，3路，4路）
	SluitemLoop int32 `protobuf:"varint,6,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
}

func (m *WlstSlu_7300_BaseSluitemData) Reset()         { *m = WlstSlu_7300_BaseSluitemData{} }
func (m *WlstSlu_7300_BaseSluitemData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_BaseSluitemData) ProtoMessage()    {}
func (*WlstSlu_7300_BaseSluitemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 1}
}
func (m *WlstSlu_7300_BaseSluitemData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_BaseSluitemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_BaseSluitemData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_BaseSluitemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData.Merge(m, src)
}
func (m *WlstSlu_7300_BaseSluitemData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_BaseSluitemData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_BaseSluitemData proto.InternalMessageInfo

func (m *WlstSlu_7300_BaseSluitemData) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData) GetSluitemStatus() *WlstSlu_7300_BaseSluitemData_SluitemStatus {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSlu_7300_BaseSluitemData) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData) GetLightStatus() []*WlstSlu_7300_BaseSluitemData_LightStatus {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *WlstSlu_7300_BaseSluitemData) GetLightData() []*WlstSlu_7300_BaseSluitemData_LightData {
	if m != nil {
		return m.LightData
	}
	return nil
}

func (m *WlstSlu_7300_BaseSluitemData) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

type WlstSlu_7300_BaseSluitemData_SluitemStatus struct {
	// 状态 0-正常，1-电压越上限，2-电压越下限，3-通讯故障
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 已校准 0-未校准，1-已校准
	Adjust int32 `protobuf:"varint,2,opt,name=adjust,proto3" json:"adjust,omitempty"`
	// 工作参数设置 0-未设置，1-已设置
	WorkingArgs int32 `protobuf:"varint,3,opt,name=working_args,json=workingArgs,proto3" json:"working_args,omitempty"`
	// 禁止主动报警 0-允许，1-禁止
	NoAlarm int32 `protobuf:"varint,4,opt,name=no_alarm,json=noAlarm,proto3" json:"no_alarm,omitempty"`
	// 停运 0-正常，1-停运
	OffLine int32 `protobuf:"varint,5,opt,name=off_line,json=offLine,proto3" json:"off_line,omitempty"`
	// EEPROM故障 0-正常，1-故障
	EepromError int32 `protobuf:"varint,6,opt,name=eeprom_error,json=eepromError,proto3" json:"eeprom_error,omitempty"`
	// 温度传感器故障 0-正常，1-故障
	TemperatureSensor int32 `protobuf:"varint,7,opt,name=temperature_sensor,json=temperatureSensor,proto3" json:"temperature_sensor,omitempty"`
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) Reset() {
	*m = WlstSlu_7300_BaseSluitemData_SluitemStatus{}
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7300_BaseSluitemData_SluitemStatus) ProtoMessage() {}
func (*WlstSlu_7300_BaseSluitemData_SluitemStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 1, 0}
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_BaseSluitemData_SluitemStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_SluitemStatus.Merge(m, src)
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_SluitemStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_BaseSluitemData_SluitemStatus proto.InternalMessageInfo

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetAdjust() int32 {
	if m != nil {
		return m.Adjust
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetWorkingArgs() int32 {
	if m != nil {
		return m.WorkingArgs
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetNoAlarm() int32 {
	if m != nil {
		return m.NoAlarm
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetOffLine() int32 {
	if m != nil {
		return m.OffLine
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetEepromError() int32 {
	if m != nil {
		return m.EepromError
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) GetTemperatureSensor() int32 {
	if m != nil {
		return m.TemperatureSensor
	}
	return 0
}

type WlstSlu_7300_BaseSluitemData_LightStatus struct {
	// 功率状态 0-正常，1-功率越上限，2-功率越下限
	PowerStatus int32 `protobuf:"varint,1,opt,name=power_status,json=powerStatus,proto3" json:"power_status,omitempty"`
	// 灯具漏电 0-正常，1-漏电
	Leakage int32 `protobuf:"varint,2,opt,name=leakage,proto3" json:"leakage,omitempty"`
	// 故障
	// 0-正常，1-光源故障，2-补偿电容故障，3-意外灭灯，4-意外亮灯，5-自熄灯，6-控制器断电告警（苏州）,7-继电器故障
	Fault int32 `protobuf:"varint,3,opt,name=fault,proto3" json:"fault,omitempty"`
	// 工作状态 0-正常亮灯，1-一档节能，2-二档节能，3-关灯
	WorkingOn int32 `protobuf:"varint,4,opt,name=working_on,json=workingOn,proto3" json:"working_on,omitempty"`
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) Reset() {
	*m = WlstSlu_7300_BaseSluitemData_LightStatus{}
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_BaseSluitemData_LightStatus) ProtoMessage()    {}
func (*WlstSlu_7300_BaseSluitemData_LightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 1, 1}
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightStatus.Merge(m, src)
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightStatus proto.InternalMessageInfo

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) GetPowerStatus() int32 {
	if m != nil {
		return m.PowerStatus
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) GetLeakage() int32 {
	if m != nil {
		return m.Leakage
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) GetFault() int32 {
	if m != nil {
		return m.Fault
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) GetWorkingOn() int32 {
	if m != nil {
		return m.WorkingOn
	}
	return 0
}

type WlstSlu_7300_BaseSluitemData_LightData struct {
	// 电压
	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 电流
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	// 有功功率
	ActivePower float64 `protobuf:"fixed64,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	// 电量
	Electricity float64 `protobuf:"fixed64,4,opt,name=electricity,proto3" json:"electricity,omitempty"`
	// 运行时间
	ActiveTime float64 `protobuf:"fixed64,5,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	// 节能档位
	PowerLevel int32 `protobuf:"varint,6,opt,name=power_level,json=powerLevel,proto3" json:"power_level,omitempty"`
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) Reset() {
	*m = WlstSlu_7300_BaseSluitemData_LightData{}
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_BaseSluitemData_LightData) ProtoMessage()    {}
func (*WlstSlu_7300_BaseSluitemData_LightData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 1, 2}
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightData.Merge(m, src)
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_BaseSluitemData_LightData proto.InternalMessageInfo

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetActivePower() float64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetElectricity() float64 {
	if m != nil {
		return m.Electricity
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetActiveTime() float64 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) GetPowerLevel() int32 {
	if m != nil {
		return m.PowerLevel
	}
	return 0
}

type WlstSlu_7300_UnknowSluitem struct {
	// 条码
	SluitemIdx int64 `protobuf:"varint,1,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 型号信息
	ModelInfo *WlstSlu_7300_ModelInfo `protobuf:"bytes,2,opt,name=model_info,json=modelInfo,proto3" json:"model_info,omitempty"`
}

func (m *WlstSlu_7300_UnknowSluitem) Reset()         { *m = WlstSlu_7300_UnknowSluitem{} }
func (m *WlstSlu_7300_UnknowSluitem) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_UnknowSluitem) ProtoMessage()    {}
func (*WlstSlu_7300_UnknowSluitem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 2}
}
func (m *WlstSlu_7300_UnknowSluitem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_UnknowSluitem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_UnknowSluitem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_UnknowSluitem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_UnknowSluitem.Merge(m, src)
}
func (m *WlstSlu_7300_UnknowSluitem) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_UnknowSluitem) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_UnknowSluitem.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_UnknowSluitem proto.InternalMessageInfo

func (m *WlstSlu_7300_UnknowSluitem) GetSluitemIdx() int64 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSlu_7300_UnknowSluitem) GetModelInfo() *WlstSlu_7300_ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

type WlstSlu_7300_AssistSluitemData struct {
	// 日 时:分 c#需加1970-1-1
	DateTime int64 `protobuf:"varint,1,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// 漏电流 / 100 0xff为满量程，此时=2.55A
	LeakageCurrent float64 `protobuf:"fixed64,2,opt,name=leakage_current,json=leakageCurrent,proto3" json:"leakage_current,omitempty"`
	// 灯数据
	LightData []*WlstSlu_7300_AssistSluitemData_LightData `protobuf:"bytes,3,rep,name=light_data,json=lightData,proto3" json:"light_data,omitempty"`
	// 字节数 =控制器数量 / 4 每2位一个控制器 0-3（1路，2路，3路，4路）
	SluitemLoop int32 `protobuf:"varint,4,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
}

func (m *WlstSlu_7300_AssistSluitemData) Reset()         { *m = WlstSlu_7300_AssistSluitemData{} }
func (m *WlstSlu_7300_AssistSluitemData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_AssistSluitemData) ProtoMessage()    {}
func (*WlstSlu_7300_AssistSluitemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 3}
}
func (m *WlstSlu_7300_AssistSluitemData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_AssistSluitemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_AssistSluitemData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_AssistSluitemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_AssistSluitemData.Merge(m, src)
}
func (m *WlstSlu_7300_AssistSluitemData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_AssistSluitemData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_AssistSluitemData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_AssistSluitemData proto.InternalMessageInfo

func (m *WlstSlu_7300_AssistSluitemData) GetDateTime() int64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func (m *WlstSlu_7300_AssistSluitemData) GetLeakageCurrent() float64 {
	if m != nil {
		return m.LeakageCurrent
	}
	return 0
}

func (m *WlstSlu_7300_AssistSluitemData) GetLightData() []*WlstSlu_7300_AssistSluitemData_LightData {
	if m != nil {
		return m.LightData
	}
	return nil
}

func (m *WlstSlu_7300_AssistSluitemData) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

type WlstSlu_7300_AssistSluitemData_LightData struct {
	// 最大电压
	MaxVoltage float64 `protobuf:"fixed64,1,opt,name=max_voltage,json=maxVoltage,proto3" json:"max_voltage,omitempty"`
	// 最大电流
	MaxCurrent float64 `protobuf:"fixed64,2,opt,name=max_current,json=maxCurrent,proto3" json:"max_current,omitempty"`
	// 电量 满量程250kw/h，超出清零
	Electricity float64 `protobuf:"fixed64,3,opt,name=electricity,proto3" json:"electricity,omitempty"`
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) Reset() {
	*m = WlstSlu_7300_AssistSluitemData_LightData{}
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_AssistSluitemData_LightData) ProtoMessage()    {}
func (*WlstSlu_7300_AssistSluitemData_LightData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 3, 0}
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_AssistSluitemData_LightData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_AssistSluitemData_LightData.Merge(m, src)
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_AssistSluitemData_LightData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_AssistSluitemData_LightData proto.InternalMessageInfo

func (m *WlstSlu_7300_AssistSluitemData_LightData) GetMaxVoltage() float64 {
	if m != nil {
		return m.MaxVoltage
	}
	return 0
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) GetMaxCurrent() float64 {
	if m != nil {
		return m.MaxCurrent
	}
	return 0
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) GetElectricity() float64 {
	if m != nil {
		return m.Electricity
	}
	return 0
}

type WlstSlu_7300_SluitemPhyinfo struct {
	// 信号强度
	SignalStrength int32 `protobuf:"varint,1,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	// 路由级数 电力载波 0-6,zigbee 0-10
	Routing int32 `protobuf:"varint,2,opt,name=routing,proto3" json:"routing,omitempty"`
	// 所在相位 0-无法确定，1-A，2-B，3-C
	Phase int32 `protobuf:"varint,3,opt,name=phase,proto3" json:"phase,omitempty"`
	// 通信成功次数 1-16
	UsefulCommunicate int32 `protobuf:"varint,4,opt,name=useful_communicate,json=usefulCommunicate,proto3" json:"useful_communicate,omitempty"`
	// 通信总次数 1-16
	AllCommunicate int32 `protobuf:"varint,5,opt,name=all_communicate,json=allCommunicate,proto3" json:"all_communicate,omitempty"`
	// 型号信息
	ModelInfo *WlstSlu_7300_ModelInfo `protobuf:"bytes,6,opt,name=model_info,json=modelInfo,proto3" json:"model_info,omitempty"`
}

func (m *WlstSlu_7300_SluitemPhyinfo) Reset()         { *m = WlstSlu_7300_SluitemPhyinfo{} }
func (m *WlstSlu_7300_SluitemPhyinfo) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_SluitemPhyinfo) ProtoMessage()    {}
func (*WlstSlu_7300_SluitemPhyinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 4}
}
func (m *WlstSlu_7300_SluitemPhyinfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_SluitemPhyinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_SluitemPhyinfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_SluitemPhyinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_SluitemPhyinfo.Merge(m, src)
}
func (m *WlstSlu_7300_SluitemPhyinfo) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_SluitemPhyinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_SluitemPhyinfo.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_SluitemPhyinfo proto.InternalMessageInfo

func (m *WlstSlu_7300_SluitemPhyinfo) GetSignalStrength() int32 {
	if m != nil {
		return m.SignalStrength
	}
	return 0
}

func (m *WlstSlu_7300_SluitemPhyinfo) GetRouting() int32 {
	if m != nil {
		return m.Routing
	}
	return 0
}

func (m *WlstSlu_7300_SluitemPhyinfo) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *WlstSlu_7300_SluitemPhyinfo) GetUsefulCommunicate() int32 {
	if m != nil {
		return m.UsefulCommunicate
	}
	return 0
}

func (m *WlstSlu_7300_SluitemPhyinfo) GetAllCommunicate() int32 {
	if m != nil {
		return m.AllCommunicate
	}
	return 0
}

func (m *WlstSlu_7300_SluitemPhyinfo) GetModelInfo() *WlstSlu_7300_ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

type WlstSlu_7300_ModelInfo struct {
	// 控制器回路
	SluitemLoop int32 `protobuf:"varint,1,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
	// 节能方式 0-无控制，1-只有开关灯，2-一档节能，3-二档节能，4-RS485，5-PWM
	PowerSaving int32 `protobuf:"varint,2,opt,name=power_saving,json=powerSaving,proto3" json:"power_saving,omitempty"`
	// 漏电流测量 0-无，1-有
	HasLeakage int32 `protobuf:"varint,3,opt,name=has_leakage,json=hasLeakage,proto3" json:"has_leakage,omitempty"`
	// 温度采集 0-无，1-有
	HasTemperature int32 `protobuf:"varint,4,opt,name=has_temperature,json=hasTemperature,proto3" json:"has_temperature,omitempty"`
	// 时钟 0-无，1-有
	HasTimer int32 `protobuf:"varint,5,opt,name=has_timer,json=hasTimer,proto3" json:"has_timer,omitempty"`
	// 型号 0-unknow,1-wj2090j
	Model int32 `protobuf:"varint,6,opt,name=model,proto3" json:"model,omitempty"`
	// 字符串型号
	SluitemType string `protobuf:"bytes,7,opt,name=sluitem_type,json=sluitemType,proto3" json:"sluitem_type,omitempty"`
}

func (m *WlstSlu_7300_ModelInfo) Reset()         { *m = WlstSlu_7300_ModelInfo{} }
func (m *WlstSlu_7300_ModelInfo) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7300_ModelInfo) ProtoMessage()    {}
func (*WlstSlu_7300_ModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{20, 5}
}
func (m *WlstSlu_7300_ModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7300_ModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7300_ModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7300_ModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7300_ModelInfo.Merge(m, src)
}
func (m *WlstSlu_7300_ModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7300_ModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7300_ModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7300_ModelInfo proto.InternalMessageInfo

func (m *WlstSlu_7300_ModelInfo) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetPowerSaving() int32 {
	if m != nil {
		return m.PowerSaving
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetHasLeakage() int32 {
	if m != nil {
		return m.HasLeakage
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetHasTemperature() int32 {
	if m != nil {
		return m.HasTemperature
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetHasTimer() int32 {
	if m != nil {
		return m.HasTimer
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetModel() int32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *WlstSlu_7300_ModelInfo) GetSluitemType() string {
	if m != nil {
		return m.SluitemType
	}
	return ""
}

type WlstSluF900 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 告警类型
	// 0-集中器告警，1-控制器通讯故障，2-控制器状态告警，3-主动上报巡测结束，4-蓝牙模块连接申请，5-设置新域名成功,
	// 6-控制器基本数据(双字节)
	AlarmType int32 `protobuf:"varint,2,opt,name=alarm_type,json=alarmType,proto3" json:"alarm_type,omitempty"`
	// 集中器数据
	ConcentratorData *WlstSlu_7300_ConcentratorData `protobuf:"bytes,3,opt,name=concentrator_data,json=concentratorData,proto3" json:"concentrator_data,omitempty"`
	// 通讯故障控制器编号
	ErrorCtrls []int32 `protobuf:"varint,4,rep,packed,name=error_ctrls,json=errorCtrls,proto3" json:"error_ctrls,omitempty"`
	// 控制器状态
	SluitemStatusAlarm []*WlstSluF900_SluitemStatusAlarm `protobuf:"bytes,5,rep,name=sluitem_status_alarm,json=sluitemStatusAlarm,proto3" json:"sluitem_status_alarm,omitempty"`
	// 蓝牙连接申请
	BluetoothApply *WlstSluF900_BluetoothApply `protobuf:"bytes,6,opt,name=bluetooth_apply,json=bluetoothApply,proto3" json:"bluetooth_apply,omitempty"`
	// 新域名设置状态
	SetDomainResult *WlstSluF900_SetDomainResult `protobuf:"bytes,7,opt,name=set_domain_result,json=setDomainResult,proto3" json:"set_domain_result,omitempty"`
}

func (m *WlstSluF900) Reset()         { *m = WlstSluF900{} }
func (m *WlstSluF900) String() string { return proto.CompactTextString(m) }
func (*WlstSluF900) ProtoMessage()    {}
func (*WlstSluF900) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{21}
}
func (m *WlstSluF900) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF900) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF900.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF900) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF900.Merge(m, src)
}
func (m *WlstSluF900) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF900) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF900.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF900 proto.InternalMessageInfo

func (m *WlstSluF900) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluF900) GetAlarmType() int32 {
	if m != nil {
		return m.AlarmType
	}
	return 0
}

func (m *WlstSluF900) GetConcentratorData() *WlstSlu_7300_ConcentratorData {
	if m != nil {
		return m.ConcentratorData
	}
	return nil
}

func (m *WlstSluF900) GetErrorCtrls() []int32 {
	if m != nil {
		return m.ErrorCtrls
	}
	return nil
}

func (m *WlstSluF900) GetSluitemStatusAlarm() []*WlstSluF900_SluitemStatusAlarm {
	if m != nil {
		return m.SluitemStatusAlarm
	}
	return nil
}

func (m *WlstSluF900) GetBluetoothApply() *WlstSluF900_BluetoothApply {
	if m != nil {
		return m.BluetoothApply
	}
	return nil
}

func (m *WlstSluF900) GetSetDomainResult() *WlstSluF900_SetDomainResult {
	if m != nil {
		return m.SetDomainResult
	}
	return nil
}

type WlstSluF900_SluitemStatusAlarm struct {
	// 控制器地址
	SluitemIdx int32 `protobuf:"varint,1,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 控制器回路数量
	SluitemLoop int32 `protobuf:"varint,2,opt,name=sluitem_loop,json=sluitemLoop,proto3" json:"sluitem_loop,omitempty"`
	// 控制器状态
	SluitemStatus *WlstSlu_7300_BaseSluitemData_SluitemStatus `protobuf:"bytes,3,opt,name=sluitem_status,json=sluitemStatus,proto3" json:"sluitem_status,omitempty"`
	// 灯状态
	LightStatus []*WlstSlu_7300_BaseSluitemData_LightStatus `protobuf:"bytes,4,rep,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
}

func (m *WlstSluF900_SluitemStatusAlarm) Reset()         { *m = WlstSluF900_SluitemStatusAlarm{} }
func (m *WlstSluF900_SluitemStatusAlarm) String() string { return proto.CompactTextString(m) }
func (*WlstSluF900_SluitemStatusAlarm) ProtoMessage()    {}
func (*WlstSluF900_SluitemStatusAlarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{21, 0}
}
func (m *WlstSluF900_SluitemStatusAlarm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF900_SluitemStatusAlarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF900_SluitemStatusAlarm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF900_SluitemStatusAlarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF900_SluitemStatusAlarm.Merge(m, src)
}
func (m *WlstSluF900_SluitemStatusAlarm) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF900_SluitemStatusAlarm) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF900_SluitemStatusAlarm.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF900_SluitemStatusAlarm proto.InternalMessageInfo

func (m *WlstSluF900_SluitemStatusAlarm) GetSluitemIdx() int32 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSluF900_SluitemStatusAlarm) GetSluitemLoop() int32 {
	if m != nil {
		return m.SluitemLoop
	}
	return 0
}

func (m *WlstSluF900_SluitemStatusAlarm) GetSluitemStatus() *WlstSlu_7300_BaseSluitemData_SluitemStatus {
	if m != nil {
		return m.SluitemStatus
	}
	return nil
}

func (m *WlstSluF900_SluitemStatusAlarm) GetLightStatus() []*WlstSlu_7300_BaseSluitemData_LightStatus {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

type WlstSluF900_BluetoothApply struct {
	// 设备标识码
	SimNumber int64 `protobuf:"varint,1,opt,name=sim_number,json=simNumber,proto3" json:"sim_number,omitempty"`
	// 动态码
	CheckCode string `protobuf:"bytes,2,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
}

func (m *WlstSluF900_BluetoothApply) Reset()         { *m = WlstSluF900_BluetoothApply{} }
func (m *WlstSluF900_BluetoothApply) String() string { return proto.CompactTextString(m) }
func (*WlstSluF900_BluetoothApply) ProtoMessage()    {}
func (*WlstSluF900_BluetoothApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{21, 1}
}
func (m *WlstSluF900_BluetoothApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF900_BluetoothApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF900_BluetoothApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF900_BluetoothApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF900_BluetoothApply.Merge(m, src)
}
func (m *WlstSluF900_BluetoothApply) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF900_BluetoothApply) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF900_BluetoothApply.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF900_BluetoothApply proto.InternalMessageInfo

func (m *WlstSluF900_BluetoothApply) GetSimNumber() int64 {
	if m != nil {
		return m.SimNumber
	}
	return 0
}

func (m *WlstSluF900_BluetoothApply) GetCheckCode() string {
	if m != nil {
		return m.CheckCode
	}
	return ""
}

type WlstSluF900_SetDomainResult struct {
	// 域名
	DomainName int32 `protobuf:"varint,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// 状态 设置成功
	SetSuccess []int32 `protobuf:"varint,2,rep,packed,name=set_success,json=setSuccess,proto3" json:"set_success,omitempty"`
}

func (m *WlstSluF900_SetDomainResult) Reset()         { *m = WlstSluF900_SetDomainResult{} }
func (m *WlstSluF900_SetDomainResult) String() string { return proto.CompactTextString(m) }
func (*WlstSluF900_SetDomainResult) ProtoMessage()    {}
func (*WlstSluF900_SetDomainResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{21, 2}
}
func (m *WlstSluF900_SetDomainResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluF900_SetDomainResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluF900_SetDomainResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluF900_SetDomainResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluF900_SetDomainResult.Merge(m, src)
}
func (m *WlstSluF900_SetDomainResult) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluF900_SetDomainResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluF900_SetDomainResult.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluF900_SetDomainResult proto.InternalMessageInfo

func (m *WlstSluF900_SetDomainResult) GetDomainName() int32 {
	if m != nil {
		return m.DomainName
	}
	return 0
}

func (m *WlstSluF900_SetDomainResult) GetSetSuccess() []int32 {
	if m != nil {
		return m.SetSuccess
	}
	return nil
}

// Wlst_slu_fb00
type WlstSlu_7B00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 起始地址
	SluitemIdx int32 `protobuf:"varint,2,opt,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
	// 记录数量
	DataCount int32 `protobuf:"varint,3,opt,name=data_count,json=dataCount,proto3" json:"data_count,omitempty"`
	// 控制参数
	OperationData []*WlstSlu_7B00_ReadConcentratorOperationData `protobuf:"bytes,4,rep,name=operation_data,json=operationData,proto3" json:"operation_data,omitempty"`
}

func (m *WlstSlu_7B00) Reset()         { *m = WlstSlu_7B00{} }
func (m *WlstSlu_7B00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7B00) ProtoMessage()    {}
func (*WlstSlu_7B00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{22}
}
func (m *WlstSlu_7B00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7B00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7B00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7B00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7B00.Merge(m, src)
}
func (m *WlstSlu_7B00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7B00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7B00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7B00 proto.InternalMessageInfo

func (m *WlstSlu_7B00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_7B00) GetSluitemIdx() int32 {
	if m != nil {
		return m.SluitemIdx
	}
	return 0
}

func (m *WlstSlu_7B00) GetDataCount() int32 {
	if m != nil {
		return m.DataCount
	}
	return 0
}

func (m *WlstSlu_7B00) GetOperationData() []*WlstSlu_7B00_ReadConcentratorOperationData {
	if m != nil {
		return m.OperationData
	}
	return nil
}

type WlstSlu_7B00_ReadConcentratorOperationData struct {
	// （集中器：操作顺序 0-广播，1-依次）（控制器：数据类型 0-base，1-adv）
	OperationOrder int32 `protobuf:"varint,1,opt,name=operation_order,json=operationOrder,proto3" json:"operation_order,omitempty"`
	// 指令类型 0-清除(发送到控制器时无此值)，1-定时，2-经纬度，3-即时
	OperationType int32 `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// 周设置
	WeekSet []int32 `protobuf:"varint,3,rep,packed,name=week_set,json=weekSet,proto3" json:"week_set,omitempty"`
	// 定时 hh:mm->int32 或偏移量 依据 operation_type定
	TimerOrOffset int32 `protobuf:"varint,4,opt,name=timer_or_offset,json=timerOrOffset,proto3" json:"timer_or_offset,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，3-单一，4-gprs
	AddrType int32 `protobuf:"varint,5,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// 地址
	Addr []int32 `protobuf:"varint,6,rep,packed,name=addr,proto3" json:"addr,omitempty"`
	// 操作类型，1-传统，4-混合，5-pwm
	CmdType int32 `protobuf:"varint,7,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// 操作内容
	CmdMix []*WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation `protobuf:"bytes,8,rep,name=cmd_mix,json=cmdMix,proto3" json:"cmd_mix,omitempty"`
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) Reset() {
	*m = WlstSlu_7B00_ReadConcentratorOperationData{}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7B00_ReadConcentratorOperationData) ProtoMessage() {}
func (*WlstSlu_7B00_ReadConcentratorOperationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{22, 0}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData.Merge(m, src)
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData proto.InternalMessageInfo

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetOperationOrder() int32 {
	if m != nil {
		return m.OperationOrder
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetOperationType() int32 {
	if m != nil {
		return m.OperationType
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetWeekSet() []int32 {
	if m != nil {
		return m.WeekSet
	}
	return nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetTimerOrOffset() int32 {
	if m != nil {
		return m.TimerOrOffset
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetAddr() []int32 {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetCmdType() int32 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) GetCmdMix() []*WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation {
	if m != nil {
		return m.CmdMix
	}
	return nil
}

type WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation struct {
	// 回路1-4操作，-1-不操作，0-开灯，1-一档节能，2-二档节能，3-关灯，100～200-pwm0%～100%
	Handle int32 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// pwm频率 /100为发送值
	Rate int32 `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) Reset() {
	*m = WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation{}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) ProtoMessage() {}
func (*WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{22, 0, 0}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation.Merge(m, src)
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation proto.InternalMessageInfo

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) GetHandle() int32 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type WlstSluFe00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 操作命令
	OperationCmd int32 `protobuf:"varint,2,opt,name=operation_cmd,json=operationCmd,proto3" json:"operation_cmd,omitempty"`
	// 不成功数量
	FaultCount int32 `protobuf:"varint,3,opt,name=fault_count,json=faultCount,proto3" json:"fault_count,omitempty"`
	// 控制器地址
	SluitemIdx []int32 `protobuf:"varint,4,rep,packed,name=sluitem_idx,json=sluitemIdx,proto3" json:"sluitem_idx,omitempty"`
}

func (m *WlstSluFe00) Reset()         { *m = WlstSluFe00{} }
func (m *WlstSluFe00) String() string { return proto.CompactTextString(m) }
func (*WlstSluFe00) ProtoMessage()    {}
func (*WlstSluFe00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{23}
}
func (m *WlstSluFe00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSluFe00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSluFe00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSluFe00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSluFe00.Merge(m, src)
}
func (m *WlstSluFe00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSluFe00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSluFe00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSluFe00 proto.InternalMessageInfo

func (m *WlstSluFe00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSluFe00) GetOperationCmd() int32 {
	if m != nil {
		return m.OperationCmd
	}
	return 0
}

func (m *WlstSluFe00) GetFaultCount() int32 {
	if m != nil {
		return m.FaultCount
	}
	return 0
}

func (m *WlstSluFe00) GetSluitemIdx() []int32 {
	if m != nil {
		return m.SluitemIdx
	}
	return nil
}

// Wlst_slu_7d00
type WlstSlu_7400 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 指令类型 0-清除，1-定时，2-经纬度，3-即时
	OperationType int32 `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// 操作顺序 0-广播，1-依次
	OperationOrder int32 `protobuf:"varint,3,opt,name=operation_order,json=operationOrder,proto3" json:"operation_order,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，3-单一，4-gprs
	AddrType int32 `protobuf:"varint,4,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// 地址(需要操作的序号)
	// int32 addr = 5;
	// gprs操作地址
	Addrs []int32 `protobuf:"varint,6,rep,packed,name=addrs,proto3" json:"addrs,omitempty"`
	// 周设置
	WeekSet []int32 `protobuf:"varint,7,rep,packed,name=week_set,json=weekSet,proto3" json:"week_set,omitempty"`
	// 定时 hh:mm->int32 或偏移量 依据 operation_type定
	TimerOrOffset int32 `protobuf:"varint,8,opt,name=timer_or_offset,json=timerOrOffset,proto3" json:"timer_or_offset,omitempty"`
	// 操作类型 3-经纬度关灯，4-混合控制，5-pwm调节，6-485调节
	CmdType int32 `protobuf:"varint,9,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// 混合回路操作
	// 0-不操作，1-开灯，2-1档节能，3-2档节能，4-关灯（经纬度关灯时，cmd_type<4视为不操作）
	CmdMix []int32 `protobuf:"varint,10,rep,packed,name=cmd_mix,json=cmdMix,proto3" json:"cmd_mix,omitempty"`
	// pwm功率调节
	CmdPwm *WlstSlu_7400_CmdPwm `protobuf:"bytes,11,opt,name=cmd_pwm,json=cmdPwm,proto3" json:"cmd_pwm,omitempty"`
}

func (m *WlstSlu_7400) Reset()         { *m = WlstSlu_7400{} }
func (m *WlstSlu_7400) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7400) ProtoMessage()    {}
func (*WlstSlu_7400) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{24}
}
func (m *WlstSlu_7400) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7400) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7400.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7400) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7400.Merge(m, src)
}
func (m *WlstSlu_7400) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7400) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7400.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7400 proto.InternalMessageInfo

func (m *WlstSlu_7400) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_7400) GetOperationType() int32 {
	if m != nil {
		return m.OperationType
	}
	return 0
}

func (m *WlstSlu_7400) GetOperationOrder() int32 {
	if m != nil {
		return m.OperationOrder
	}
	return 0
}

func (m *WlstSlu_7400) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSlu_7400) GetAddrs() []int32 {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *WlstSlu_7400) GetWeekSet() []int32 {
	if m != nil {
		return m.WeekSet
	}
	return nil
}

func (m *WlstSlu_7400) GetTimerOrOffset() int32 {
	if m != nil {
		return m.TimerOrOffset
	}
	return 0
}

func (m *WlstSlu_7400) GetCmdType() int32 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *WlstSlu_7400) GetCmdMix() []int32 {
	if m != nil {
		return m.CmdMix
	}
	return nil
}

func (m *WlstSlu_7400) GetCmdPwm() *WlstSlu_7400_CmdPwm {
	if m != nil {
		return m.CmdPwm
	}
	return nil
}

type WlstSlu_7400_CmdPwm struct {
	// 回路(仅需要操作的回路序号)
	LoopCanDo []int32 `protobuf:"varint,1,rep,packed,name=loop_can_do,json=loopCanDo,proto3" json:"loop_can_do,omitempty"`
	// 比例 0-100 -> 0%-100%
	Scale int32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	// 频率 /100为发送值
	Rate int32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *WlstSlu_7400_CmdPwm) Reset()         { *m = WlstSlu_7400_CmdPwm{} }
func (m *WlstSlu_7400_CmdPwm) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7400_CmdPwm) ProtoMessage()    {}
func (*WlstSlu_7400_CmdPwm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{24, 0}
}
func (m *WlstSlu_7400_CmdPwm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7400_CmdPwm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7400_CmdPwm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7400_CmdPwm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7400_CmdPwm.Merge(m, src)
}
func (m *WlstSlu_7400_CmdPwm) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7400_CmdPwm) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7400_CmdPwm.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7400_CmdPwm proto.InternalMessageInfo

func (m *WlstSlu_7400_CmdPwm) GetLoopCanDo() []int32 {
	if m != nil {
		return m.LoopCanDo
	}
	return nil
}

func (m *WlstSlu_7400_CmdPwm) GetScale() int32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *WlstSlu_7400_CmdPwm) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type WlstSlu_7C00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，3-单一，4-gprs
	AddrType int32 `protobuf:"varint,2,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// 地址
	Addr int32 `protobuf:"varint,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// 数据条数（==-1时表示发送给集中器）
	CmdCount int32 `protobuf:"varint,4,opt,name=cmd_count,json=cmdCount,proto3" json:"cmd_count,omitempty"`
	// 更新或清除 0-add,1-clean&add（仅发送给控制器时有效）
	AddOrUpdate int32 `protobuf:"varint,5,opt,name=add_or_update,json=addOrUpdate,proto3" json:"add_or_update,omitempty"`
	// 控制参数
	OperationData []*WlstSlu_7C00_ConcentratorOperationData `protobuf:"bytes,6,rep,name=operation_data,json=operationData,proto3" json:"operation_data,omitempty"`
}

func (m *WlstSlu_7C00) Reset()         { *m = WlstSlu_7C00{} }
func (m *WlstSlu_7C00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7C00) ProtoMessage()    {}
func (*WlstSlu_7C00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{25}
}
func (m *WlstSlu_7C00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7C00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7C00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7C00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7C00.Merge(m, src)
}
func (m *WlstSlu_7C00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7C00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7C00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7C00 proto.InternalMessageInfo

func (m *WlstSlu_7C00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_7C00) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSlu_7C00) GetAddr() int32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *WlstSlu_7C00) GetCmdCount() int32 {
	if m != nil {
		return m.CmdCount
	}
	return 0
}

func (m *WlstSlu_7C00) GetAddOrUpdate() int32 {
	if m != nil {
		return m.AddOrUpdate
	}
	return 0
}

func (m *WlstSlu_7C00) GetOperationData() []*WlstSlu_7C00_ConcentratorOperationData {
	if m != nil {
		return m.OperationData
	}
	return nil
}

type WlstSlu_7C00_ConcentratorOperationData struct {
	// 指令类型 1-定时，2-经纬度，3-即时
	OperationType int32 `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// 操作类型 4-混合控制，5-pwm调节，6-485调节
	CmdType int32 `protobuf:"varint,2,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// 周设置
	WeekSet []int32 `protobuf:"varint,3,rep,packed,name=week_set,json=weekSet,proto3" json:"week_set,omitempty"`
	// 定时 hh:mm->int32 或偏移量 依据 operation_type定
	TimerOrOffset int32 `protobuf:"varint,4,opt,name=timer_or_offset,json=timerOrOffset,proto3" json:"timer_or_offset,omitempty"`
	// 混合回路操作 0-不操作，1-开灯，2-1档节能，3-2档节能，4-关灯
	CmdMix []int32 `protobuf:"varint,5,rep,packed,name=cmd_mix,json=cmdMix,proto3" json:"cmd_mix,omitempty"`
	// pwm功率调节
	CmdPwm *WlstSlu_7C00_ConcentratorOperationData_CmdPwm `protobuf:"bytes,6,opt,name=cmd_pwm,json=cmdPwm,proto3" json:"cmd_pwm,omitempty"`
	// 485调节
	Cmd_485 *WlstSlu_7C00_ConcentratorOperationData_Cmd_485 `protobuf:"bytes,7,opt,name=cmd_485,json=cmd485,proto3" json:"cmd_485,omitempty"`
}

func (m *WlstSlu_7C00_ConcentratorOperationData) Reset() {
	*m = WlstSlu_7C00_ConcentratorOperationData{}
}
func (m *WlstSlu_7C00_ConcentratorOperationData) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_7C00_ConcentratorOperationData) ProtoMessage()    {}
func (*WlstSlu_7C00_ConcentratorOperationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{25, 0}
}
func (m *WlstSlu_7C00_ConcentratorOperationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7C00_ConcentratorOperationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7C00_ConcentratorOperationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData.Merge(m, src)
}
func (m *WlstSlu_7C00_ConcentratorOperationData) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7C00_ConcentratorOperationData) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData proto.InternalMessageInfo

func (m *WlstSlu_7C00_ConcentratorOperationData) GetOperationType() int32 {
	if m != nil {
		return m.OperationType
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetCmdType() int32 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetWeekSet() []int32 {
	if m != nil {
		return m.WeekSet
	}
	return nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetTimerOrOffset() int32 {
	if m != nil {
		return m.TimerOrOffset
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetCmdMix() []int32 {
	if m != nil {
		return m.CmdMix
	}
	return nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetCmdPwm() *WlstSlu_7C00_ConcentratorOperationData_CmdPwm {
	if m != nil {
		return m.CmdPwm
	}
	return nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData) GetCmd_485() *WlstSlu_7C00_ConcentratorOperationData_Cmd_485 {
	if m != nil {
		return m.Cmd_485
	}
	return nil
}

type WlstSlu_7C00_ConcentratorOperationData_CmdPwm struct {
	// 回路
	LoopCanDo []int32 `protobuf:"varint,1,rep,packed,name=loop_can_do,json=loopCanDo,proto3" json:"loop_can_do,omitempty"`
	// 比例 0-100～10%-100%
	Scale int32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	// 频率 /100为发送值
	Rate int32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) Reset() {
	*m = WlstSlu_7C00_ConcentratorOperationData_CmdPwm{}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7C00_ConcentratorOperationData_CmdPwm) ProtoMessage() {}
func (*WlstSlu_7C00_ConcentratorOperationData_CmdPwm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{25, 0, 0}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_CmdPwm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_CmdPwm.Merge(m, src)
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_CmdPwm.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_CmdPwm proto.InternalMessageInfo

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) GetLoopCanDo() []int32 {
	if m != nil {
		return m.LoopCanDo
	}
	return nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) GetScale() int32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type WlstSlu_7C00_ConcentratorOperationData_Cmd_485 struct {
	// 波特率 1-600,2-1200,3-2400,4-4800,5-9600,6-19200
	Baudrate int32 `protobuf:"varint,1,opt,name=baudrate,proto3" json:"baudrate,omitempty"`
	// 校验位 0-无，1-奇校验，2-偶校验
	Check int32 `protobuf:"varint,2,opt,name=check,proto3" json:"check,omitempty"`
	// 数据长度 0-20
	DataLength int32 `protobuf:"varint,3,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	// 数据
	Data_485 string `protobuf:"bytes,4,opt,name=data_485,json=data485,proto3" json:"data_485,omitempty"`
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) Reset() {
	*m = WlstSlu_7C00_ConcentratorOperationData_Cmd_485{}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) String() string {
	return proto.CompactTextString(m)
}
func (*WlstSlu_7C00_ConcentratorOperationData_Cmd_485) ProtoMessage() {}
func (*WlstSlu_7C00_ConcentratorOperationData_Cmd_485) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{25, 0, 1}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_Cmd_485.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_Cmd_485.Merge(m, src)
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_Cmd_485.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_7C00_ConcentratorOperationData_Cmd_485 proto.InternalMessageInfo

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) GetBaudrate() int32 {
	if m != nil {
		return m.Baudrate
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) GetCheck() int32 {
	if m != nil {
		return m.Check
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) GetDataLength() int32 {
	if m != nil {
		return m.DataLength
	}
	return 0
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) GetData_485() string {
	if m != nil {
		return m.Data_485
	}
	return ""
}

type WlstSlu_6F00 struct {
	// 序号
	CmdIdx int32 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// 地址类型 0-全部，1-组，2-规则，3-单一，4-gprs
	AddrType int32 `protobuf:"varint,2,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	// 地址
	Addr int32 `protobuf:"varint,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// 操作标识
	ResetMark *WlstSlu_6F00_ResetMark `protobuf:"bytes,4,opt,name=reset_mark,json=resetMark,proto3" json:"reset_mark,omitempty"`
	// 操作结果 0x3a-成功，0x5a-失败,
	// 0x60-数据错误，0x61-正在操作，0x62-等待操作，0x63-队列已满
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WlstSlu_6F00) Reset()         { *m = WlstSlu_6F00{} }
func (m *WlstSlu_6F00) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6F00) ProtoMessage()    {}
func (*WlstSlu_6F00) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{26}
}
func (m *WlstSlu_6F00) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6F00) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6F00.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6F00) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6F00.Merge(m, src)
}
func (m *WlstSlu_6F00) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6F00) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6F00.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6F00 proto.InternalMessageInfo

func (m *WlstSlu_6F00) GetCmdIdx() int32 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *WlstSlu_6F00) GetAddrType() int32 {
	if m != nil {
		return m.AddrType
	}
	return 0
}

func (m *WlstSlu_6F00) GetAddr() int32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *WlstSlu_6F00) GetResetMark() *WlstSlu_6F00_ResetMark {
	if m != nil {
		return m.ResetMark
	}
	return nil
}

func (m *WlstSlu_6F00) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WlstSlu_6F00_ResetMark struct {
	// mcu复位
	ResetMcu int32 `protobuf:"varint,1,opt,name=reset_mcu,json=resetMcu,proto3" json:"reset_mcu,omitempty"`
	// 通讯模块复位
	ResetComm int32 `protobuf:"varint,2,opt,name=reset_comm,json=resetComm,proto3" json:"reset_comm,omitempty"`
	// 初始化mcu硬件配置
	InitMcuHardware int32 `protobuf:"varint,3,opt,name=init_mcu_hardware,json=initMcuHardware,proto3" json:"init_mcu_hardware,omitempty"`
	// 初始化ram
	InitRam int32 `protobuf:"varint,4,opt,name=init_ram,json=initRam,proto3" json:"init_ram,omitempty"`
	// eerom 清零
	ZeroEerom int32 `protobuf:"varint,5,opt,name=zero_eerom,json=zeroEerom,proto3" json:"zero_eerom,omitempty"`
	// 电量计数清零
	ZeroCount int32 `protobuf:"varint,6,opt,name=zero_count,json=zeroCount,proto3" json:"zero_count,omitempty"`
}

func (m *WlstSlu_6F00_ResetMark) Reset()         { *m = WlstSlu_6F00_ResetMark{} }
func (m *WlstSlu_6F00_ResetMark) String() string { return proto.CompactTextString(m) }
func (*WlstSlu_6F00_ResetMark) ProtoMessage()    {}
func (*WlstSlu_6F00_ResetMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab6bd86311f0b5fd, []int{26, 0}
}
func (m *WlstSlu_6F00_ResetMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WlstSlu_6F00_ResetMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WlstSlu_6F00_ResetMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WlstSlu_6F00_ResetMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlstSlu_6F00_ResetMark.Merge(m, src)
}
func (m *WlstSlu_6F00_ResetMark) XXX_Size() int {
	return m.Size()
}
func (m *WlstSlu_6F00_ResetMark) XXX_DiscardUnknown() {
	xxx_messageInfo_WlstSlu_6F00_ResetMark.DiscardUnknown(m)
}

var xxx_messageInfo_WlstSlu_6F00_ResetMark proto.InternalMessageInfo

func (m *WlstSlu_6F00_ResetMark) GetResetMcu() int32 {
	if m != nil {
		return m.ResetMcu
	}
	return 0
}

func (m *WlstSlu_6F00_ResetMark) GetResetComm() int32 {
	if m != nil {
		return m.ResetComm
	}
	return 0
}

func (m *WlstSlu_6F00_ResetMark) GetInitMcuHardware() int32 {
	if m != nil {
		return m.InitMcuHardware
	}
	return 0
}

func (m *WlstSlu_6F00_ResetMark) GetInitRam() int32 {
	if m != nil {
		return m.InitRam
	}
	return 0
}

func (m *WlstSlu_6F00_ResetMark) GetZeroEerom() int32 {
	if m != nil {
		return m.ZeroEerom
	}
	return 0
}

func (m *WlstSlu_6F00_ResetMark) GetZeroCount() int32 {
	if m != nil {
		return m.ZeroCount
	}
	return 0
}

func init() {
	proto.RegisterType((*WlstSluF400)(nil), "wlst.pb2.Wlst_slu_f400")
	proto.RegisterType((*WlstSlu_3900)(nil), "wlst.pb2.Wlst_slu_3900")
	proto.RegisterType((*WlstSlu_3900_ModelInfo)(nil), "wlst.pb2.Wlst_slu_3900.Model_info")
	proto.RegisterType((*WlstSlu_3900_LightData)(nil), "wlst.pb2.Wlst_slu_3900.Light_data")
	proto.RegisterType((*WlstSlu_3900_LightStatus)(nil), "wlst.pb2.Wlst_slu_3900.Light_status")
	proto.RegisterType((*WlstSlu_3900_SluitemStatus)(nil), "wlst.pb2.Wlst_slu_3900.Sluitem_status")
	proto.RegisterType((*WlstSlu_3900_TimeFault)(nil), "wlst.pb2.Wlst_slu_3900.Time_fault")
	proto.RegisterType((*WlstSlu_3900_SluitemPara)(nil), "wlst.pb2.Wlst_slu_3900.Sluitem_para")
	proto.RegisterType((*WlstSlu_7800)(nil), "wlst.pb2.Wlst_slu_7800")
	proto.RegisterType((*WlstSluF800)(nil), "wlst.pb2.Wlst_slu_f800")
	proto.RegisterType((*WlstSluF800_View0X20)(nil), "wlst.pb2.Wlst_slu_f800.View0x20")
	proto.RegisterType((*WlstSluF800_View0X21)(nil), "wlst.pb2.Wlst_slu_f800.View0x21")
	proto.RegisterType((*WlstSluF800_View0X23)(nil), "wlst.pb2.Wlst_slu_f800.View0x23")
	proto.RegisterType((*WlstSluEc00)(nil), "wlst.pb2.Wlst_slu_ec00")
	proto.RegisterType((*WlstSlu_6B00)(nil), "wlst.pb2.Wlst_slu_6b00")
	proto.RegisterType((*WlstSlu_6B00_CmdPwm)(nil), "wlst.pb2.Wlst_slu_6b00.Cmd_pwm")
	proto.RegisterType((*WlstSlu_6C00)(nil), "wlst.pb2.Wlst_slu_6c00")
	proto.RegisterType((*WlstSluD000)(nil), "wlst.pb2.Wlst_slu_d000")
	proto.RegisterType((*WlstSlu_2800)(nil), "wlst.pb2.Wlst_slu_2800")
	proto.RegisterType((*WlstSlu_2400)(nil), "wlst.pb2.Wlst_slu_2400")
	proto.RegisterType((*WlstSlu_6E00)(nil), "wlst.pb2.Wlst_slu_6e00")
	proto.RegisterType((*WlstSlu_3000)(nil), "wlst.pb2.Wlst_slu_3000")
	proto.RegisterType((*WlstSlu_9A00)(nil), "wlst.pb2.Wlst_slu_9a00")
	proto.RegisterType((*WlstSluCd00)(nil), "wlst.pb2.Wlst_slu_cd00")
	proto.RegisterType((*WlstSlu_1C00)(nil), "wlst.pb2.Wlst_slu_1c00")
	proto.RegisterType((*WlstSlu_1D00)(nil), "wlst.pb2.Wlst_slu_1d00")
	proto.RegisterType((*WlstSlu_1D00_DataMark)(nil), "wlst.pb2.Wlst_slu_1d00.Data_mark")
	proto.RegisterType((*WlstSlu_9D00)(nil), "wlst.pb2.Wlst_slu_9d00")
	proto.RegisterType((*WlstSlu_9D00_SetMark)(nil), "wlst.pb2.Wlst_slu_9d00.Set_mark")
	proto.RegisterType((*WlstSlu_9D00_SluitemData)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_data")
	proto.RegisterType((*WlstSlu_9D00_SluitemDataNew)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_data_new")
	proto.RegisterType((*WlstSlu_9D00_SluitemPara)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_para")
	proto.RegisterType((*WlstSlu_9D00_SluitemVer)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_ver")
	proto.RegisterType((*WlstSlu_9D00_SluitemSunriseset)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_sunriseset")
	proto.RegisterType((*WlstSlu_9D00_SluitemRuntime)(nil), "wlst.pb2.Wlst_slu_9d00.Sluitem_runtime")
	proto.RegisterType((*WlstSluF000)(nil), "wlst.pb2.Wlst_slu_f000")
	proto.RegisterType((*WlstSluF000_ResetMark)(nil), "wlst.pb2.Wlst_slu_f000.Reset_mark")
	proto.RegisterType((*WlstSluF100)(nil), "wlst.pb2.Wlst_slu_f100")
	proto.RegisterType((*WlstSluF100_TimerStatus)(nil), "wlst.pb2.Wlst_slu_f100.Timer_status")
	proto.RegisterType((*WlstSluF200)(nil), "wlst.pb2.Wlst_slu_f200")
	proto.RegisterType((*WlstSluF200_DataMark)(nil), "wlst.pb2.Wlst_slu_f200.Data_mark")
	proto.RegisterType((*WlstSluF200_ControllerData)(nil), "wlst.pb2.Wlst_slu_f200.Controller_data")
	proto.RegisterType((*WlstSlu_7300)(nil), "wlst.pb2.Wlst_slu_7300")
	proto.RegisterType((*WlstSlu_7300_ConcentratorData)(nil), "wlst.pb2.Wlst_slu_7300.Concentrator_data")
	proto.RegisterType((*WlstSlu_7300_ConcentratorData_RunStatus)(nil), "wlst.pb2.Wlst_slu_7300.Concentrator_data.Run_status")
	proto.RegisterType((*WlstSlu_7300_ConcentratorData_ArgsStatus)(nil), "wlst.pb2.Wlst_slu_7300.Concentrator_data.Args_status")
	proto.RegisterType((*WlstSlu_7300_ConcentratorData_HardwareStatus)(nil), "wlst.pb2.Wlst_slu_7300.Concentrator_data.Hardware_status")
	proto.RegisterType((*WlstSlu_7300_BaseSluitemData)(nil), "wlst.pb2.Wlst_slu_7300.Base_sluitem_data")
	proto.RegisterType((*WlstSlu_7300_BaseSluitemData_SluitemStatus)(nil), "wlst.pb2.Wlst_slu_7300.Base_sluitem_data.Sluitem_status")
	proto.RegisterType((*WlstSlu_7300_BaseSluitemData_LightStatus)(nil), "wlst.pb2.Wlst_slu_7300.Base_sluitem_data.Light_status")
	proto.RegisterType((*WlstSlu_7300_BaseSluitemData_LightData)(nil), "wlst.pb2.Wlst_slu_7300.Base_sluitem_data.Light_data")
	proto.RegisterType((*WlstSlu_7300_UnknowSluitem)(nil), "wlst.pb2.Wlst_slu_7300.Unknow_sluitem")
	proto.RegisterType((*WlstSlu_7300_AssistSluitemData)(nil), "wlst.pb2.Wlst_slu_7300.Assist_sluitem_data")
	proto.RegisterType((*WlstSlu_7300_AssistSluitemData_LightData)(nil), "wlst.pb2.Wlst_slu_7300.Assist_sluitem_data.Light_data")
	proto.RegisterType((*WlstSlu_7300_SluitemPhyinfo)(nil), "wlst.pb2.Wlst_slu_7300.Sluitem_phyinfo")
	proto.RegisterType((*WlstSlu_7300_ModelInfo)(nil), "wlst.pb2.Wlst_slu_7300.Model_info")
	proto.RegisterType((*WlstSluF900)(nil), "wlst.pb2.Wlst_slu_f900")
	proto.RegisterType((*WlstSluF900_SluitemStatusAlarm)(nil), "wlst.pb2.Wlst_slu_f900.Sluitem_status_alarm")
	proto.RegisterType((*WlstSluF900_BluetoothApply)(nil), "wlst.pb2.Wlst_slu_f900.Bluetooth_apply")
	proto.RegisterType((*WlstSluF900_SetDomainResult)(nil), "wlst.pb2.Wlst_slu_f900.Set_domain_result")
	proto.RegisterType((*WlstSlu_7B00)(nil), "wlst.pb2.Wlst_slu_7b00")
	proto.RegisterType((*WlstSlu_7B00_ReadConcentratorOperationData)(nil), "wlst.pb2.Wlst_slu_7b00.Read_concentrator_operation_data")
	proto.RegisterType((*WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation)(nil), "wlst.pb2.Wlst_slu_7b00.Read_concentrator_operation_data.Cmd_operation")
	proto.RegisterType((*WlstSluFe00)(nil), "wlst.pb2.Wlst_slu_fe00")
	proto.RegisterType((*WlstSlu_7400)(nil), "wlst.pb2.Wlst_slu_7400")
	proto.RegisterType((*WlstSlu_7400_CmdPwm)(nil), "wlst.pb2.Wlst_slu_7400.Cmd_pwm")
	proto.RegisterType((*WlstSlu_7C00)(nil), "wlst.pb2.Wlst_slu_7c00")
	proto.RegisterType((*WlstSlu_7C00_ConcentratorOperationData)(nil), "wlst.pb2.Wlst_slu_7c00.Concentrator_operation_data")
	proto.RegisterType((*WlstSlu_7C00_ConcentratorOperationData_CmdPwm)(nil), "wlst.pb2.Wlst_slu_7c00.Concentrator_operation_data.Cmd_pwm")
	proto.RegisterType((*WlstSlu_7C00_ConcentratorOperationData_Cmd_485)(nil), "wlst.pb2.Wlst_slu_7c00.Concentrator_operation_data.Cmd_485")
	proto.RegisterType((*WlstSlu_6F00)(nil), "wlst.pb2.Wlst_slu_6f00")
	proto.RegisterType((*WlstSlu_6F00_ResetMark)(nil), "wlst.pb2.Wlst_slu_6f00.Reset_mark")
}

func init() { proto.RegisterFile("protocol_slu.proto", fileDescriptor_ab6bd86311f0b5fd) }

var fileDescriptor_ab6bd86311f0b5fd = []byte{
	// 5260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcd, 0x8f, 0x24, 0x47,
	0x56, 0x77, 0x55, 0x75, 0x7d, 0x45, 0x75, 0x77, 0x75, 0xa7, 0xc7, 0xe3, 0x9a, 0x9a, 0x9d, 0xaf,
	0x6a, 0xec, 0x19, 0x7b, 0x77, 0x9b, 0x9e, 0xe9, 0x1e, 0x7b, 0x2c, 0x6b, 0x11, 0xed, 0xb6, 0xc7,
	0x36, 0x9a, 0x71, 0x8f, 0xb2, 0xc7, 0xb3, 0xf2, 0x22, 0x48, 0x45, 0x67, 0x46, 0x75, 0xe7, 0x76,
	0x56, 0x66, 0x39, 0x32, 0xb3, 0x7b, 0x66, 0x11, 0x12, 0x07, 0x38, 0x70, 0x00, 0x21, 0x76, 0xe1,
	0xb6, 0x20, 0x4e, 0x1c, 0xb8, 0xb0, 0x12, 0x08, 0x09, 0x4e, 0xe6, 0xb2, 0x1c, 0x00, 0xad, 0xb4,
	0x97, 0x15, 0x5c, 0x90, 0x7d, 0x44, 0x48, 0x08, 0xfe, 0x00, 0xd0, 0x7b, 0x2f, 0x22, 0x33, 0x32,
	0xeb, 0xa3, 0x7b, 0xec, 0xb1, 0x39, 0xb0, 0xb7, 0x8a, 0x5f, 0xbc, 0x88, 0xc8, 0x88, 0x78, 0xf1,
	0xe2, 0x7d, 0x45, 0x31, 0x6b, 0x2c, 0xa3, 0x24, 0x72, 0xa3, 0xc0, 0x89, 0x83, 0x74, 0x1d, 0x0b,
	0x56, 0xeb, 0x24, 0x88, 0x93, 0xf5, 0xf1, 0xfe, 0xad, 0xc1, 0x6f, 0xb0, 0xa5, 0x6f, 0x07, 0x71,
	0x02, 0x75, 0xce, 0x70, 0x6b, 0x63, 0xc3, 0x7a, 0x91, 0x35, 0xdd, 0x91, 0xe7, 0xf8, 0xde, 0xe3,
	0x5e, 0xe5, 0x6a, 0xe5, 0x46, 0xdd, 0x6e, 0xb8, 0x23, 0xef, 0x7d, 0xef, 0xb1, 0x75, 0x9e, 0x35,
	0xe2, 0x84, 0x27, 0x69, 0xdc, 0xab, 0x12, 0x4e, 0x25, 0xc0, 0xa5, 0x18, 0x71, 0x79, 0xd4, 0xab,
	0x11, 0x4e, 0x25, 0xeb, 0x1a, 0x5b, 0x8c, 0x83, 0xd4, 0x4f, 0xc4, 0xc8, 0xe1, 0x9e, 0x27, 0x7b,
	0x0b, 0x58, 0xdb, 0x51, 0xd8, 0xb6, 0xe7, 0xc9, 0xc1, 0xbf, 0x74, 0x8d, 0xd1, 0x37, 0xdf, 0x98,
	0x37, 0xfa, 0x36, 0x63, 0xa3, 0xc8, 0x13, 0x81, 0xe3, 0x87, 0xc3, 0x08, 0xbf, 0xa0, 0x73, 0x6b,
	0xb0, 0xae, 0xa7, 0xb1, 0x5e, 0xe8, 0x65, 0xfd, 0x7e, 0x46, 0x69, 0xb7, 0xb1, 0xd5, 0xfb, 0xe1,
	0x30, 0x82, 0x2e, 0x02, 0xff, 0xe0, 0x30, 0x71, 0x3c, 0x9e, 0xf0, 0x5e, 0xed, 0x6a, 0x6d, 0x5e,
	0x17, 0xf7, 0x32, 0x4a, 0xbb, 0x8d, 0xad, 0xde, 0xe6, 0x09, 0xb7, 0xae, 0xb3, 0x6e, 0x20, 0xf8,
	0x11, 0x3f, 0x10, 0x8e, 0x9b, 0x4a, 0x29, 0xc2, 0x04, 0xa7, 0x55, 0xb1, 0x97, 0x15, 0xbc, 0x43,
	0xa8, 0x75, 0x9f, 0x2d, 0xeb, 0xc9, 0xab, 0x45, 0xab, 0xe3, 0x27, 0xbf, 0x3c, 0x6b, 0xbc, 0xbd,
	0x02, 0xb5, 0xbd, 0xa4, 0x5a, 0xef, 0xd1, 0x1a, 0x6f, 0x33, 0x96, 0xf8, 0x23, 0xe1, 0x0c, 0x79,
	0x1a, 0x24, 0xbd, 0xc6, 0xfc, 0xd9, 0x3f, 0xcc, 0x28, 0xed, 0x36, 0xb4, 0xba, 0x0b, 0x3f, 0xad,
	0x2b, 0xac, 0x23, 0x45, 0x2c, 0x12, 0xc7, 0x8d, 0xd2, 0x30, 0xe9, 0x35, 0x71, 0x75, 0x19, 0x42,
	0x3b, 0x80, 0x58, 0x17, 0x59, 0xdb, 0xe3, 0x89, 0x70, 0xa0, 0x49, 0xaf, 0x75, 0xb5, 0x72, 0xa3,
	0x66, 0xb7, 0x00, 0x80, 0xee, 0xac, 0x77, 0xf3, 0xcd, 0x1c, 0x73, 0xc9, 0x7b, 0x6d, 0xfc, 0x84,
	0x5f, 0x38, 0x6d, 0x36, 0x40, 0x9b, 0x6d, 0xf9, 0x03, 0x2e, 0xb9, 0x65, 0xb1, 0x05, 0x19, 0xcb,
	0x71, 0x8f, 0xe1, 0x00, 0xf8, 0x9b, 0xb0, 0xd8, 0xef, 0x75, 0x34, 0x16, 0xfb, 0xd6, 0x0a, 0xab,
	0xc5, 0xa1, 0xec, 0x2d, 0x22, 0x04, 0x3f, 0x01, 0x19, 0xbb, 0x7e, 0x6f, 0x89, 0x90, 0xb1, 0xeb,
	0xab, 0xbe, 0x3e, 0xee, 0x2d, 0x67, 0x7d, 0x7d, 0x6c, 0xf5, 0x58, 0x33, 0x79, 0x3c, 0x8e, 0x4e,
	0x84, 0xec, 0x75, 0x11, 0xd6, 0x45, 0xe0, 0x53, 0xc1, 0xe5, 0xd0, 0x0d, 0x7b, 0x2b, 0x58, 0xa1,
	0x4a, 0xd0, 0xaf, 0x70, 0x83, 0xde, 0x2a, 0x2e, 0x08, 0xfc, 0x04, 0xc4, 0x8d, 0x3f, 0xee, 0x59,
	0x84, 0xb8, 0xf1, 0xc7, 0xd6, 0x39, 0x56, 0x97, 0x22, 0x8e, 0xc2, 0xde, 0xf3, 0x88, 0x51, 0x81,
	0xd0, 0x44, 0x3e, 0xe9, 0x9d, 0xd3, 0x68, 0x22, 0x9f, 0xc0, 0x17, 0xc4, 0x69, 0x28, 0xfd, 0x58,
	0xf4, 0x5e, 0x40, 0x5c, 0x17, 0xf1, 0x04, 0xa5, 0x61, 0x2c, 0x92, 0xde, 0x79, 0x75, 0x82, 0xb0,
	0xd4, 0xff, 0xbd, 0x2a, 0x63, 0x39, 0xcb, 0x9a, 0x07, 0x27, 0x88, 0xa2, 0xb1, 0x3a, 0x08, 0x7a,
	0x15, 0xef, 0x45, 0xd1, 0x18, 0x48, 0x70, 0x52, 0x4e, 0xcc, 0x8f, 0xfd, 0xf0, 0x40, 0x9d, 0xc8,
	0x0e, 0x62, 0x7b, 0x08, 0xc1, 0x7e, 0x1f, 0xf2, 0xd8, 0x51, 0x7c, 0xa9, 0xce, 0x26, 0x3b, 0xe4,
	0xf1, 0x3d, 0x42, 0x80, 0x97, 0x81, 0x20, 0x11, 0xa3, 0xb1, 0x90, 0x3c, 0x49, 0xa5, 0x50, 0x47,
	0x74, 0xf9, 0x90, 0xc7, 0x0f, 0x73, 0x14, 0x18, 0x03, 0x09, 0xfd, 0x91, 0x90, 0xc8, 0xc6, 0x75,
	0xbb, 0x05, 0x24, 0x50, 0x86, 0x35, 0xc0, 0x13, 0x86, 0x4c, 0x59, 0xb7, 0xa9, 0x60, 0x4e, 0x21,
	0x79, 0x32, 0x16, 0xc8, 0x6d, 0xed, 0x6c, 0x0a, 0x0f, 0x9f, 0x8c, 0x85, 0x75, 0x81, 0xb5, 0xd2,
	0x58, 0xd0, 0x0c, 0x5b, 0xb4, 0x4e, 0x69, 0x2c, 0x60, 0x76, 0xfd, 0x1f, 0xd5, 0x18, 0xcb, 0xcf,
	0x1f, 0x2c, 0xe8, 0x71, 0x14, 0x24, 0x30, 0x8b, 0x0a, 0x1e, 0x36, 0x5d, 0x84, 0x1a, 0x7d, 0x0c,
	0xab, 0x54, 0xa3, 0x8a, 0xf0, 0x01, 0xdc, 0x4d, 0xfc, 0x63, 0xe1, 0x10, 0x2f, 0xd4, 0xb0, 0xba,
	0x43, 0xd8, 0x03, 0xe4, 0x87, 0x97, 0xd8, 0xb2, 0x14, 0x05, 0x22, 0x3a, 0xca, 0x4b, 0x1a, 0xcd,
	0xc8, 0xf8, 0x78, 0xcc, 0xa1, 0x57, 0x45, 0x56, 0x27, 0x32, 0x8d, 0x12, 0xd9, 0x55, 0xd6, 0x11,
	0x81, 0x70, 0x13, 0xe9, 0xbb, 0x7e, 0xf2, 0x04, 0x57, 0xa3, 0x62, 0x9b, 0x10, 0x6c, 0x88, 0x1a,
	0x0d, 0x4f, 0x58, 0x13, 0x29, 0x18, 0x41, 0xfa, 0x8c, 0x91, 0x7c, 0x52, 0x12, 0xa3, 0x35, 0xff,
	0x8c, 0xdd, 0x33, 0x68, 0xed, 0x0e, 0xb6, 0x54, 0xd2, 0xe2, 0x0a, 0x23, 0x4e, 0x70, 0x02, 0x71,
	0x2c, 0x02, 0x3c, 0xab, 0x75, 0x9b, 0x21, 0x74, 0x0f, 0x10, 0x6b, 0x83, 0x9d, 0xcb, 0x4e, 0x33,
	0x12, 0x26, 0xa9, 0x0c, 0xa3, 0x10, 0x0f, 0x65, 0xdd, 0xb6, 0xf4, 0x79, 0x85, 0xaa, 0x87, 0x58,
	0x83, 0xd2, 0x83, 0x27, 0xc2, 0x53, 0x4b, 0xd0, 0x51, 0xd2, 0x03, 0x20, 0x24, 0xeb, 0xff, 0x1a,
	0x5b, 0x34, 0x3f, 0x08, 0xb6, 0x46, 0xb3, 0x1e, 0xf1, 0xaf, 0x2e, 0x02, 0xc7, 0x90, 0x18, 0x23,
	0xa6, 0xa5, 0x82, 0x75, 0x89, 0xb1, 0x93, 0x48, 0x1e, 0xf9, 0xe1, 0x81, 0x13, 0x85, 0x8a, 0x5b,
	0xdb, 0x0a, 0xd9, 0x0d, 0xfb, 0x0f, 0xd9, 0x72, 0x51, 0x42, 0xc2, 0x17, 0x0d, 0x03, 0x1e, 0x1f,
	0x2a, 0x99, 0x48, 0x83, 0x30, 0x84, 0x48, 0xe0, 0x5d, 0x63, 0x8b, 0x22, 0xe4, 0xfb, 0x81, 0x70,
	0x78, 0xc0, 0xe5, 0x48, 0x9f, 0x11, 0xc2, 0xb6, 0x01, 0xea, 0xff, 0x26, 0x63, 0xb9, 0xb0, 0x84,
	0x1e, 0xdd, 0x20, 0x72, 0x8f, 0x8a, 0x3d, 0x22, 0x44, 0x3d, 0xbe, 0xcc, 0xba, 0x44, 0x10, 0xa5,
	0x89, 0x63, 0xce, 0x61, 0x09, 0xe1, 0xdd, 0x34, 0x99, 0x42, 0x47, 0x83, 0xd7, 0x8a, 0x74, 0x34,
	0xfc, 0xbf, 0x56, 0xd8, 0xa2, 0x29, 0x29, 0xad, 0xaf, 0xb1, 0x76, 0x10, 0x85, 0x07, 0x7e, 0x92,
	0x7a, 0x9a, 0xd7, 0x73, 0xc0, 0xea, 0xb3, 0x56, 0xc0, 0x13, 0xaa, 0x24, 0x76, 0xcf, 0xca, 0xd6,
	0x0d, 0xb6, 0x02, 0x67, 0xb4, 0x30, 0xe1, 0x5a, 0x76, 0x9a, 0xdf, 0xc9, 0xe7, 0x0c, 0x0b, 0xed,
	0xc7, 0x8e, 0x4c, 0xc3, 0x10, 0x04, 0x07, 0x9d, 0xf8, 0xb6, 0x1f, 0xdb, 0x04, 0x20, 0xbb, 0x03,
	0x9d, 0xe3, 0x87, 0x89, 0x90, 0xc7, 0x3c, 0x50, 0x27, 0x7e, 0x09, 0xd1, 0xf7, 0x15, 0x08, 0x8b,
	0x9b, 0x8e, 0x03, 0x3f, 0x3c, 0x72, 0xa4, 0x18, 0x07, 0x4f, 0xd4, 0xe9, 0xef, 0x10, 0x66, 0x03,
	0x34, 0xf8, 0xbb, 0x8a, 0x71, 0xb9, 0xbf, 0x7e, 0x67, 0xde, 0xe5, 0x7e, 0x89, 0x31, 0x71, 0x0c,
	0x07, 0x0c, 0x85, 0x05, 0xad, 0x69, 0x1b, 0x11, 0x14, 0x15, 0x97, 0x18, 0x73, 0x03, 0x1e, 0xc7,
	0x54, 0xad, 0x78, 0x03, 0x11, 0xac, 0xbe, 0xc6, 0x16, 0xa5, 0x70, 0x23, 0xe9, 0xa9, 0xab, 0x4d,
	0x29, 0x1a, 0x84, 0xd1, 0xdd, 0x76, 0x81, 0xb5, 0x3c, 0x64, 0x4d, 0x99, 0xe0, 0x7c, 0x6a, 0x76,
	0xd3, 0x83, 0xd3, 0x22, 0x13, 0xeb, 0x05, 0xd6, 0xf0, 0x12, 0x47, 0x84, 0x1e, 0xce, 0xa1, 0x66,
	0xd7, 0xbd, 0xe4, 0x9d, 0xd0, 0x1b, 0xfc, 0x27, 0x33, 0x15, 0xa3, 0x2f, 0xf1, 0xeb, 0x2f, 0x31,
	0x06, 0x52, 0xce, 0x49, 0xa2, 0x84, 0x07, 0x7a, 0x3f, 0x00, 0x79, 0x08, 0x00, 0x7e, 0x39, 0x54,
	0xc3, 0xb0, 0xb4, 0x13, 0x4d, 0x28, 0xc3, 0xb8, 0xe5, 0x79, 0x37, 0x26, 0xe7, 0xfd, 0x2d, 0xd6,
	0x3e, 0xf6, 0xc5, 0x89, 0xb3, 0xf1, 0xf8, 0xd6, 0x46, 0xaf, 0x89, 0x1a, 0xcf, 0xd5, 0x29, 0xf2,
	0x04, 0xe6, 0xb7, 0xfe, 0xc8, 0x17, 0x27, 0x40, 0x67, 0xb7, 0x8e, 0xd5, 0x2f, 0xb3, 0xf9, 0xcd,
	0x5e, 0xeb, 0x4c, 0xcd, 0x6f, 0x66, 0xcd, 0x6f, 0x9a, 0xcd, 0x6f, 0xf5, 0xda, 0x4f, 0x39, 0xfa,
	0x2d, 0xb3, 0xf9, 0x66, 0x8f, 0x9d, 0xa9, 0xf9, 0x66, 0xd6, 0x7c, 0xd3, 0x6c, 0xbe, 0xd5, 0xeb,
	0x3c, 0xe5, 0xe8, 0x5b, 0x66, 0xf3, 0xdb, 0xbd, 0xc5, 0xa7, 0x6c, 0x7e, 0xbb, 0xbf, 0xc3, 0x5a,
	0x1a, 0x45, 0xcd, 0x2a, 0x71, 0x0e, 0xf9, 0x78, 0x2c, 0x42, 0xe4, 0x1d, 0xd0, 0xac, 0x92, 0xf7,
	0xb0, 0x6c, 0xf5, 0x0d, 0xb5, 0xba, 0x76, 0xa3, 0xfe, 0x56, 0x75, 0xa5, 0xa2, 0x55, 0xeb, 0xfe,
	0x4f, 0x2b, 0x59, 0x2f, 0x37, 0xe7, 0xf7, 0xf2, 0x12, 0x5b, 0x8e, 0xf0, 0xc2, 0xf6, 0xa3, 0xd0,
	0xe4, 0xc3, 0xa5, 0x0c, 0x45, 0x66, 0xbb, 0xce, 0xba, 0x39, 0x59, 0x24, 0x3d, 0x75, 0x33, 0xd6,
	0xed, 0xbc, 0xf5, 0x2e, 0xa0, 0x30, 0x18, 0x28, 0xed, 0xd4, 0x15, 0x31, 0x65, 0x0b, 0x00, 0xec,
	0xc5, 0x62, 0x0b, 0xa8, 0xd1, 0x13, 0x3f, 0xe2, 0x6f, 0xeb, 0x15, 0xb6, 0x92, 0xf7, 0x1c, 0x47,
	0xa9, 0x74, 0x85, 0x62, 0xc8, 0x7c, 0xc4, 0x3d, 0x84, 0xfb, 0x7f, 0xb4, 0x90, 0xcd, 0x6a, 0x73,
	0xfe, 0xac, 0xf4, 0x40, 0x55, 0x63, 0xa0, 0x6b, 0x8c, 0x91, 0x80, 0x52, 0xc7, 0x49, 0xaf, 0x59,
	0x1b, 0x51, 0xfc, 0xbe, 0x57, 0x26, 0x94, 0xef, 0x85, 0x8c, 0xac, 0xa4, 0x58, 0x5f, 0x67, 0x5d,
	0x4d, 0xaa, 0x75, 0x0c, 0xba, 0xde, 0x75, 0x0f, 0x8f, 0x94, 0xaa, 0xf1, 0xf5, 0x9c, 0x50, 0xab,
	0x1c, 0x8d, 0xab, 0xb5, 0x1b, 0x15, 0xec, 0x54, 0x13, 0x6b, 0xed, 0x7f, 0x2b, 0xbf, 0x5f, 0x0b,
	0x0a, 0x46, 0x33, 0x6b, 0xa1, 0xef, 0xd8, 0x6d, 0x43, 0xd3, 0xb8, 0xc3, 0xce, 0xeb, 0x56, 0x25,
	0xc5, 0xa4, 0x95, 0xb5, 0xd3, 0xfd, 0xda, 0x05, 0x1d, 0x65, 0x9d, 0x3d, 0xaf, 0x5b, 0x8e, 0xf8,
	0xe3, 0x6c, 0x26, 0x6d, 0x9c, 0xc9, 0xaa, 0xaa, 0xba, 0xcf, 0x1f, 0xeb, 0xc9, 0xdc, 0x2a, 0xd2,
	0xeb, 0x09, 0xb1, 0x6c, 0x18, 0xa3, 0x8d, 0x9e, 0xd3, 0x66, 0xde, 0xc6, 0x54, 0x74, 0x3a, 0x13,
	0x53, 0x7a, 0xc7, 0xd0, 0x79, 0x8c, 0x55, 0x1b, 0x1f, 0x3e, 0x41, 0xd3, 0x6d, 0x31, 0xdb, 0x0a,
	0xbd, 0x6a, 0x0f, 0xa8, 0x66, 0xf0, 0x67, 0xe6, 0x85, 0x21, 0xdc, 0x79, 0x22, 0xf7, 0x22, 0x6b,
	0xa3, 0x30, 0xc7, 0x2a, 0xe2, 0x8e, 0x16, 0x02, 0x4a, 0x1e, 0x4b, 0xc1, 0xb5, 0x54, 0x54, 0x02,
	0x17, 0x10, 0x92, 0x89, 0x6f, 0xb2, 0xa5, 0x13, 0x3d, 0xca, 0x6b, 0xfb, 0x1b, 0x1b, 0xc8, 0x1c,
	0x9d, 0x5b, 0x2f, 0x4e, 0x39, 0xdc, 0x50, 0x6d, 0x77, 0x00, 0xdf, 0x0b, 0x52, 0x28, 0x0c, 0xfe,
	0xa3, 0x66, 0x7c, 0x23, 0x20, 0xb3, 0xbf, 0xf1, 0x45, 0xd6, 0x04, 0x73, 0x2b, 0xff, 0xc2, 0x46,
	0x2c, 0xf0, 0xfb, 0xcc, 0xcb, 0xa8, 0x36, 0xeb, 0x32, 0x5a, 0x30, 0x2e, 0xa3, 0x29, 0xa7, 0xbb,
	0x7e, 0xc6, 0xd3, 0xdd, 0x98, 0x7a, 0xba, 0x5f, 0x66, 0x5d, 0xd4, 0xe6, 0x9d, 0x48, 0x3a, 0xd1,
	0x70, 0x08, 0x16, 0x09, 0xd9, 0x83, 0x4b, 0x08, 0xef, 0xca, 0x5d, 0x04, 0x8b, 0x52, 0xa0, 0x55,
	0x92, 0x02, 0x3d, 0x56, 0x87, 0xdf, 0x31, 0x4a, 0x76, 0xda, 0x51, 0x02, 0x60, 0x82, 0xb0, 0x24,
	0xd8, 0x8a, 0x54, 0x4a, 0x58, 0x22, 0x6c, 0x74, 0x91, 0x56, 0x6b, 0xe4, 0x3f, 0x46, 0xce, 0x51,
	0xe2, 0xce, 0x1d, 0x79, 0xf7, 0xfd, 0xc7, 0xd6, 0x1d, 0xaa, 0x1c, 0x9f, 0x8c, 0xd0, 0xee, 0xeb,
	0xdc, 0xba, 0x32, 0x63, 0x4f, 0xd6, 0x77, 0x88, 0x0c, 0x5b, 0x3e, 0x38, 0x19, 0xf5, 0xbf, 0xcd,
	0x9a, 0x0a, 0xb2, 0x06, 0xac, 0x03, 0x36, 0x85, 0xe3, 0xf2, 0xd0, 0xf1, 0xa2, 0x5e, 0x25, 0x17,
	0x10, 0x00, 0xef, 0xf0, 0xf0, 0xed, 0x08, 0x54, 0xd0, 0xd8, 0xe5, 0x81, 0x16, 0x92, 0x54, 0x40,
	0x73, 0x92, 0x27, 0xfa, 0x8a, 0xc6, 0xdf, 0x03, 0xcf, 0xdc, 0xee, 0x2f, 0x8b, 0x25, 0x07, 0xd7,
	0x8c, 0x51, 0xbc, 0x8d, 0x8d, 0x0d, 0xb0, 0x40, 0x8f, 0x85, 0xc4, 0x11, 0xda, 0x36, 0xfc, 0x1c,
	0x7c, 0xcb, 0x20, 0xb9, 0x05, 0xea, 0x48, 0xee, 0x8e, 0xa9, 0x14, 0xdc, 0x31, 0xe7, 0x58, 0xdd,
	0xd4, 0x77, 0xa9, 0x30, 0xf8, 0x65, 0xb3, 0xb9, 0x72, 0xf3, 0x78, 0x91, 0x33, 0x0c, 0xf8, 0x81,
	0x6e, 0xef, 0x45, 0x77, 0x03, 0x7e, 0x30, 0xcb, 0xcd, 0x33, 0xf8, 0xa9, 0x79, 0x3a, 0x5f, 0x13,
	0xf3, 0xba, 0x00, 0xeb, 0x94, 0x27, 0x32, 0x0a, 0x14, 0x93, 0x6b, 0xeb, 0x14, 0x31, 0x62, 0xf4,
	0xeb, 0xac, 0xab, 0x48, 0x32, 0x3d, 0x53, 0x5d, 0x44, 0x04, 0x9b, 0x8a, 0xa6, 0x22, 0x24, 0x86,
	0x5e, 0x30, 0xfb, 0x22, 0x6e, 0xce, 0x49, 0x68, 0x79, 0xeb, 0x26, 0x09, 0x9d, 0x79, 0x63, 0xd7,
	0x1a, 0xe6, 0xae, 0x0d, 0x3e, 0x31, 0x67, 0xb5, 0x09, 0x4b, 0x7f, 0x8e, 0xd5, 0xdd, 0x44, 0x06,
	0x7a, 0x59, 0xa9, 0x00, 0xb6, 0x81, 0x17, 0x8d, 0xb8, 0x1f, 0x3a, 0x21, 0x1f, 0x69, 0xbe, 0x61,
	0x04, 0x7d, 0xc0, 0x47, 0x02, 0x44, 0x70, 0x3a, 0x1e, 0x0b, 0xa9, 0x85, 0xaf, 0x13, 0xf8, 0x23,
	0x5f, 0x6f, 0xf5, 0x2a, 0x56, 0x29, 0xe9, 0x7b, 0x0f, 0x2a, 0x80, 0x3e, 0x40, 0xd3, 0xab, 0x48,
	0x4f, 0xd3, 0x5b, 0xc5, 0xaa, 0x02, 0xfd, 0x05, 0xd6, 0x1a, 0x71, 0xd7, 0xc9, 0xee, 0xdd, 0x9a,
	0xdd, 0x1c, 0x71, 0x17, 0xbd, 0x68, 0xdb, 0xc6, 0x14, 0xde, 0xe0, 0x1b, 0x1b, 0xd6, 0x06, 0xb3,
	0x8c, 0x8f, 0x75, 0x32, 0x36, 0xd1, 0x27, 0x61, 0x25, 0xff, 0x6e, 0xba, 0x06, 0x07, 0xbf, 0xbb,
	0x60, 0xf4, 0xe1, 0x7a, 0x45, 0x3e, 0x5f, 0x2a, 0xf0, 0xf9, 0x6d, 0x76, 0xde, 0x8d, 0x46, 0xa3,
	0x34, 0xf4, 0x5d, 0x12, 0x34, 0x43, 0xee, 0x07, 0xa9, 0x14, 0x7a, 0xc1, 0x5e, 0x28, 0xd4, 0xde,
	0x55, 0x95, 0xb9, 0xc7, 0x62, 0xc8, 0xdd, 0x24, 0x92, 0x05, 0x8f, 0xc5, 0x5d, 0x84, 0xac, 0x4d,
	0x56, 0x6c, 0xeb, 0xb8, 0x87, 0x3c, 0x0c, 0x85, 0xe6, 0x8c, 0x73, 0x85, 0xca, 0x1d, 0xaa, 0xb3,
	0xd6, 0xd8, 0x92, 0xba, 0xbe, 0x1c, 0xc9, 0xc3, 0x03, 0xa1, 0x8c, 0xf8, 0x45, 0x05, 0xda, 0x80,
	0xe5, 0x06, 0x31, 0x91, 0xd4, 0x0d, 0x83, 0x98, 0x08, 0x40, 0xd0, 0xa5, 0x49, 0xe4, 0x8c, 0x22,
	0x4f, 0xab, 0x2d, 0x2d, 0x00, 0xee, 0x47, 0x9e, 0x28, 0x5a, 0x65, 0xcd, 0x79, 0x56, 0x59, 0xab,
	0x64, 0x95, 0x6d, 0xb0, 0x73, 0x2e, 0x97, 0xd2, 0x87, 0x91, 0xa3, 0x34, 0x01, 0xe3, 0x16, 0x47,
	0x20, 0x8b, 0xdc, 0x52, 0x75, 0x36, 0x55, 0xe1, 0x58, 0x6b, 0x6c, 0x69, 0x3f, 0x48, 0x45, 0x12,
	0x45, 0xc9, 0xa1, 0x33, 0xf6, 0xb5, 0x49, 0xbe, 0x98, 0x81, 0x0f, 0x7c, 0x54, 0xf6, 0x72, 0x22,
	0xec, 0x90, 0xec, 0xf1, 0xbc, 0x29, 0xf6, 0xb5, 0xc2, 0x6a, 0xae, 0x9b, 0xa0, 0x28, 0xad, 0xdb,
	0xf0, 0x13, 0x7a, 0xe7, 0xc1, 0x09, 0x7f, 0x12, 0x3b, 0x51, 0x18, 0xf8, 0xa1, 0x40, 0xcf, 0x59,
	0xdd, 0x5e, 0x24, 0x70, 0x17, 0xb1, 0xc1, 0x77, 0x0d, 0x56, 0xb8, 0x39, 0x57, 0xe4, 0x5d, 0x61,
	0xda, 0xa3, 0x93, 0x09, 0xbd, 0x9a, 0xcd, 0x14, 0xa4, 0x08, 0xcc, 0x53, 0x53, 0x2b, 0x9f, 0x9a,
	0xc1, 0x9f, 0x9a, 0xd7, 0xe9, 0x4d, 0xef, 0x0b, 0x0d, 0xf6, 0x4b, 0xe8, 0xbf, 0xe4, 0x0e, 0xba,
	0xa2, 0x17, 0xf0, 0xfe, 0xb8, 0x36, 0xe5, 0xfe, 0x80, 0x51, 0xd6, 0xdf, 0xd6, 0x84, 0xe8, 0xe2,
	0xe4, 0xf7, 0xb9, 0x3c, 0xea, 0x7f, 0xbf, 0xca, 0xda, 0x19, 0x0e, 0x1c, 0x81, 0x12, 0x1b, 0x7d,
	0xc5, 0xf4, 0x25, 0x2d, 0x00, 0xd0, 0x0d, 0xac, 0xc5, 0x39, 0xb9, 0xc4, 0xaa, 0xb9, 0x38, 0x27,
	0x9f, 0x98, 0x6e, 0xcb, 0xe5, 0x41, 0xac, 0x26, 0x8d, 0x6d, 0xb7, 0xe5, 0x41, 0x9c, 0xb5, 0x3d,
	0x90, 0x51, 0x3a, 0xd6, 0xf6, 0x1e, 0x20, 0xef, 0x02, 0x00, 0xe7, 0x1c, 0xab, 0x8f, 0x33, 0x5f,
	0x5b, 0x13, 0xca, 0x8f, 0x84, 0x04, 0x99, 0x89, 0x55, 0xca, 0x9d, 0x08, 0xb7, 0xb6, 0xba, 0xde,
	0x01, 0xde, 0xcb, 0x50, 0xe5, 0xd9, 0xa2, 0xcf, 0x4b, 0xc0, 0xf2, 0xd7, 0xb7, 0xbb, 0xfe, 0x44,
	0x04, 0x81, 0x1b, 0xe8, 0x52, 0x4a, 0x64, 0x80, 0xd3, 0xa4, 0x1b, 0x7e, 0x11, 0xef, 0x25, 0x85,
	0x0d, 0x7e, 0xd0, 0x37, 0xa5, 0xcb, 0xff, 0xe9, 0x0e, 0xc1, 0xd2, 0xd1, 0xd5, 0x6e, 0x88, 0x79,
	0xba, 0xd5, 0x51, 0xc8, 0x1b, 0x3e, 0x6a, 0x9c, 0x4e, 0x63, 0xa6, 0xff, 0x0c, 0xe6, 0x91, 0xf9,
	0xa8, 0xd1, 0xc7, 0xaf, 0xbf, 0x1c, 0xb7, 0xd7, 0xf4, 0x5e, 0x6a, 0x57, 0x5d, 0x2d, 0xf7, 0x5e,
	0x4e, 0xf3, 0x87, 0xb7, 0xce, 0x36, 0xd6, 0xa4, 0x3f, 0xfc, 0x3a, 0xd3, 0x16, 0x89, 0xe2, 0x88,
	0x5c, 0x9b, 0xd2, 0x23, 0x10, 0x63, 0xbc, 0x9d, 0xaf, 0x2e, 0xf0, 0x06, 0xc3, 0x01, 0xd7, 0x4e,
	0x1b, 0xf0, 0x58, 0xc8, 0x6c, 0x0b, 0x80, 0x87, 0x3e, 0x62, 0x56, 0x66, 0x1a, 0xe5, 0x6c, 0xd4,
	0xc1, 0xce, 0x5e, 0x3d, 0xad, 0xb3, 0xbc, 0x45, 0x66, 0x20, 0x18, 0x5c, 0xf7, 0x20, 0xd7, 0xf5,
	0x65, 0x1a, 0xe2, 0xc2, 0x91, 0xd9, 0x7c, 0xfd, 0xb4, 0x7e, 0x15, 0x79, 0x66, 0x10, 0xd8, 0x54,
	0xb6, 0x6c, 0xb6, 0x62, 0x6e, 0xa8, 0x13, 0x8a, 0x13, 0xbc, 0x8c, 0x3a, 0xb7, 0x6e, 0x9c, 0x65,
	0x53, 0x81, 0x3e, 0xeb, 0x13, 0x36, 0xf6, 0x03, 0x71, 0x62, 0xa8, 0x37, 0xcb, 0x05, 0xb5, 0xe9,
	0x4d, 0xd6, 0x02, 0x6d, 0x1d, 0x59, 0xb3, 0x8b, 0x63, 0x5c, 0x9d, 0x39, 0x86, 0xa2, 0xb3, 0x41,
	0xbf, 0x47, 0xc6, 0x5c, 0x63, 0x4b, 0x38, 0xa0, 0x1b, 0x85, 0x89, 0x1f, 0xa6, 0x02, 0x23, 0x0c,
	0x75, 0x7b, 0x11, 0xc0, 0x1d, 0x85, 0xf5, 0x7f, 0x58, 0x61, 0x2d, 0xdd, 0x14, 0xb5, 0x45, 0x91,
	0x28, 0x01, 0xa2, 0xc4, 0x4b, 0x2c, 0x12, 0x92, 0x1f, 0x17, 0xe8, 0x5b, 0x50, 0x7c, 0x54, 0x55,
	0x08, 0x41, 0x24, 0x28, 0x3d, 0x54, 0x3b, 0x62, 0x95, 0x5a, 0xd6, 0x8e, 0x58, 0x44, 0x55, 0x62,
	0x4c, 0x47, 0x1b, 0xed, 0xb0, 0x59, 0xb8, 0x3d, 0x70, 0x3a, 0x31, 0xfa, 0x13, 0x82, 0x5a, 0xa4,
	0xef, 0x40, 0x8c, 0xfe, 0x20, 0xd2, 0xff, 0xd9, 0x42, 0xee, 0x8d, 0x3c, 0xc5, 0xef, 0xfe, 0x35,
	0xd3, 0xef, 0xae, 0xed, 0xbf, 0xcc, 0xf7, 0xfe, 0xd2, 0x84, 0xef, 0x5d, 0x93, 0x14, 0xfc, 0xef,
	0xaf, 0x4c, 0xf1, 0xbf, 0x6b, 0xc2, 0x92, 0x0f, 0xfe, 0x0a, 0xeb, 0x98, 0x76, 0x2d, 0x59, 0xe8,
	0x6c, 0x94, 0x1b, 0xb4, 0x6b, 0x44, 0x30, 0x69, 0x99, 0x03, 0x91, 0xb6, 0x60, 0x7f, 0x91, 0xad,
	0xa2, 0x93, 0xad, 0x60, 0xbf, 0xe6, 0x26, 0xf9, 0x0a, 0x56, 0x9a, 0xd6, 0xeb, 0x55, 0xd6, 0x31,
	0xa3, 0x23, 0x24, 0x1e, 0x4d, 0x68, 0x5a, 0x3c, 0xb0, 0x3d, 0x35, 0x1e, 0x78, 0x85, 0x75, 0xc8,
	0xe2, 0x12, 0x52, 0x46, 0x52, 0xdd, 0xea, 0x18, 0xd3, 0x93, 0xef, 0x00, 0x62, 0x39, 0x13, 0x3e,
	0x0b, 0x3a, 0x94, 0x77, 0xa6, 0x70, 0xe1, 0xeb, 0x9b, 0x1b, 0x1b, 0xeb, 0x6f, 0xf1, 0x58, 0x38,
	0xe6, 0xf1, 0x38, 0x25, 0x84, 0xf8, 0x51, 0x29, 0xba, 0x40, 0x67, 0xf3, 0xb5, 0xb3, 0x77, 0x3f,
	0x37, 0xde, 0x60, 0x86, 0x16, 0x97, 0xca, 0xa1, 0xc5, 0xfe, 0x5f, 0x2c, 0xb0, 0x95, 0xf2, 0xc9,
	0x04, 0x26, 0xca, 0xd9, 0x2b, 0x63, 0xa2, 0x67, 0xca, 0x62, 0x97, 0x58, 0x4b, 0xa6, 0x21, 0x09,
	0xf1, 0xdc, 0x05, 0xd4, 0x94, 0x69, 0x88, 0x42, 0xfc, 0x1c, 0xab, 0x8f, 0x0f, 0x79, 0xac, 0x15,
	0x42, 0x2a, 0x3c, 0x3d, 0x9b, 0xfc, 0x9c, 0x09, 0xce, 0xc2, 0x04, 0x70, 0xd3, 0x89, 0x50, 0xc8,
	0x83, 0x27, 0x3a, 0x68, 0xb9, 0x9c, 0xdf, 0x74, 0x54, 0x41, 0x91, 0xcb, 0xfe, 0xef, 0xd7, 0x4a,
	0x61, 0x91, 0x92, 0x1a, 0x59, 0x99, 0x30, 0xbe, 0x5e, 0x9a, 0x58, 0x37, 0xe5, 0xfd, 0x2c, 0xce,
	0xde, 0x08, 0x7b, 0x4d, 0x09, 0x94, 0x64, 0xfe, 0x2b, 0x23, 0x58, 0xb2, 0x35, 0x23, 0x50, 0x96,
	0x33, 0xd3, 0xb4, 0x60, 0x99, 0xe1, 0x7f, 0x3c, 0x16, 0x68, 0xed, 0xd4, 0x27, 0xfc, 0x8f, 0x8f,
	0xb0, 0xa2, 0x68, 0x5b, 0x34, 0xe6, 0xd9, 0x16, 0xcd, 0x92, 0x6d, 0xb1, 0x56, 0x8c, 0xc8, 0xb5,
	0xb2, 0x11, 0x8c, 0xa8, 0x9c, 0x11, 0xa6, 0xa1, 0x9b, 0xa6, 0x6d, 0x86, 0x69, 0xe8, 0xb2, 0x29,
	0x47, 0x72, 0xd8, 0x44, 0x24, 0xa7, 0xff, 0x83, 0x2a, 0xeb, 0x18, 0x0a, 0xc5, 0x59, 0x02, 0xd4,
	0x6b, 0xe5, 0xcd, 0xa6, 0x0d, 0x29, 0x6c, 0xb4, 0xf5, 0x1a, 0x7b, 0x51, 0x9f, 0x31, 0x1d, 0xa7,
	0x06, 0x73, 0x26, 0x0d, 0xb4, 0xa9, 0xf0, 0x82, 0xae, 0x56, 0x31, 0xeb, 0xfb, 0x58, 0x69, 0x7d,
	0x93, 0x59, 0x86, 0x10, 0xd6, 0x4d, 0x94, 0xe9, 0x6c, 0xd4, 0x28, 0xf2, 0x6b, 0x6c, 0x91, 0x8e,
	0x9d, 0x22, 0x54, 0xfe, 0x01, 0xc4, 0x72, 0x92, 0x42, 0xbc, 0xba, 0x31, 0x19, 0xaf, 0x56, 0x2e,
	0x99, 0x66, 0xe6, 0x92, 0xe9, 0xdf, 0x65, 0xd6, 0xa4, 0x66, 0x64, 0x86, 0xff, 0x2b, 0xb3, 0xc2,
	0xff, 0xd5, 0x42, 0xf8, 0xff, 0x47, 0x35, 0xd6, 0x2d, 0xa9, 0x42, 0x2a, 0x19, 0x83, 0xd3, 0xd7,
	0x28, 0xfd, 0x00, 0x83, 0x42, 0xf0, 0x29, 0x57, 0x58, 0x27, 0x4a, 0x93, 0x71, 0x5a, 0x88, 0x38,
	0x31, 0x82, 0x74, 0x44, 0x8c, 0x3c, 0x7e, 0xc2, 0x0c, 0x3a, 0x75, 0x14, 0x86, 0x24, 0x6b, 0xac,
	0x83, 0xd9, 0x1e, 0x74, 0x10, 0x0c, 0x86, 0x66, 0x00, 0xd3, 0x19, 0x28, 0xf4, 0x03, 0x32, 0xb4,
	0x5e, 0xec, 0xc7, 0xa7, 0xa3, 0xa7, 0x49, 0x94, 0x27, 0xb1, 0x61, 0xba, 0x26, 0x85, 0xf2, 0x24,
	0x5e, 0x07, 0x5b, 0x23, 0xe0, 0x4f, 0x1c, 0x05, 0xa3, 0x40, 0x55, 0x87, 0x1f, 0x2b, 0x76, 0x09,
	0x07, 0x91, 0x3d, 0x3e, 0x19, 0xe9, 0xb4, 0x80, 0x4c, 0x64, 0x8f, 0x4f, 0x88, 0xaf, 0x2e, 0xb2,
	0x36, 0x54, 0x13, 0xcf, 0x13, 0x37, 0x03, 0x7d, 0xc6, 0xed, 0x50, 0xb9, 0xcf, 0x53, 0x0f, 0xc7,
	0x50, 0xac, 0x3c, 0x3e, 0x19, 0xbd, 0xa5, 0x20, 0x34, 0x8d, 0xe2, 0xad, 0x3b, 0xb7, 0x73, 0x22,
	0x65, 0x3a, 0x23, 0x9a, 0x91, 0x81, 0x30, 0x43, 0x32, 0xf7, 0x50, 0xb8, 0x47, 0xca, 0x84, 0x66,
	0x08, 0xed, 0x00, 0x32, 0xf8, 0x13, 0xd3, 0x70, 0x1d, 0x6e, 0x9c, 0x92, 0xb9, 0x44, 0x82, 0x11,
	0x75, 0xcb, 0xd9, 0x99, 0x4b, 0xd0, 0xcb, 0xba, 0x9d, 0x51, 0x82, 0x51, 0xa8, 0xf4, 0xcb, 0xfe,
	0x5f, 0x56, 0x19, 0xcb, 0x6b, 0x28, 0xa2, 0x28, 0xb8, 0x74, 0x12, 0x1e, 0x1f, 0xa9, 0xd1, 0xda,
	0x88, 0x3c, 0xe4, 0xf1, 0x11, 0x1c, 0x0f, 0x2d, 0x89, 0x43, 0x57, 0x84, 0x89, 0xe4, 0xb9, 0xc3,
	0x65, 0x55, 0x09, 0xe4, 0xbc, 0xc2, 0x7a, 0x95, 0xad, 0x1e, 0x72, 0xe9, 0x91, 0xda, 0xe8, 0x7c,
	0xcf, 0x3f, 0xd8, 0x17, 0x9a, 0x63, 0xba, 0x50, 0x81, 0x03, 0x7f, 0x07, 0x61, 0xa0, 0x8d, 0xa3,
	0x61, 0x52, 0xa4, 0xa5, 0x83, 0xd7, 0x85, 0x0a, 0x93, 0x16, 0xcd, 0x4b, 0xfc, 0x0c, 0x72, 0x73,
	0x28, 0xee, 0x59, 0xa4, 0x2f, 0x20, 0x0c, 0x54, 0x5d, 0x3f, 0xf4, 0x13, 0x87, 0x07, 0x3a, 0x83,
	0xa4, 0x09, 0xe5, 0xed, 0x20, 0xc8, 0x67, 0x89, 0xc6, 0x5c, 0xd3, 0x98, 0xa5, 0xb6, 0xc1, 0xa9,
	0x1a, 0xd5, 0xe4, 0x96, 0x51, 0x0d, 0x8a, 0xf2, 0xe0, 0x93, 0xaa, 0xb9, 0x41, 0x37, 0xe7, 0x6d,
	0xd0, 0x05, 0xd6, 0x8a, 0xc6, 0xc6, 0xf6, 0xd4, 0xed, 0x66, 0x34, 0x26, 0xc5, 0xbe, 0x90, 0x13,
	0x55, 0x2b, 0xe5, 0x44, 0x5d, 0x61, 0x9d, 0x61, 0x24, 0x5d, 0xa1, 0x64, 0xeb, 0x82, 0xca, 0x40,
	0x00, 0x88, 0x44, 0xeb, 0xbb, 0x5a, 0xf0, 0x14, 0x52, 0xc0, 0xa6, 0x19, 0x89, 0xf0, 0x81, 0x98,
	0xb7, 0x25, 0xb3, 0xbb, 0x15, 0x5b, 0xd2, 0xc5, 0xd5, 0x4f, 0xd9, 0xa2, 0x59, 0x09, 0x5c, 0xec,
	0x25, 0xc3, 0x48, 0x8e, 0x78, 0xa2, 0x74, 0x09, 0x9a, 0xd1, 0x92, 0x46, 0x49, 0x9d, 0x28, 0xe9,
	0x1b, 0xd5, 0x09, 0x7d, 0xe3, 0x52, 0x21, 0xad, 0x4c, 0xb9, 0xa5, 0xb3, 0x94, 0xb1, 0xc1, 0x3f,
	0xb7, 0xcd, 0x35, 0xbc, 0xf5, 0x94, 0xb6, 0x7f, 0xbd, 0x60, 0xfb, 0xaf, 0xe5, 0x76, 0xae, 0xe9,
	0x04, 0xd7, 0x62, 0x97, 0x54, 0x84, 0x33, 0x3a, 0x08, 0xe0, 0x53, 0xa6, 0x3a, 0x08, 0x7e, 0xa5,
	0xe4, 0x01, 0xa8, 0xcf, 0xb4, 0x3f, 0xb1, 0x0b, 0x65, 0xf9, 0x04, 0x42, 0x4e, 0x71, 0x02, 0xe4,
	0x86, 0x62, 0xc3, 0x34, 0x14, 0xfb, 0x7f, 0x53, 0x70, 0x13, 0x29, 0x53, 0x0d, 0x47, 0x3b, 0x97,
	0x99, 0x6a, 0xd8, 0xc1, 0x39, 0x56, 0x27, 0x33, 0x4d, 0x39, 0x92, 0xb1, 0x00, 0xd7, 0xc3, 0x3e,
	0x97, 0x6e, 0xe4, 0x69, 0xb9, 0xad, 0x8b, 0x98, 0x4d, 0x16, 0xa5, 0x59, 0xfc, 0x81, 0x0a, 0x80,
	0x9a, 0x8e, 0x6f, 0x2a, 0x00, 0x4a, 0xfe, 0x62, 0xa5, 0xb9, 0x62, 0xc1, 0x7a, 0x99, 0x75, 0x49,
	0x4b, 0x89, 0x42, 0xa7, 0xf0, 0xed, 0x4b, 0x08, 0xef, 0x86, 0x4a, 0x0f, 0xba, 0xc4, 0x18, 0xa8,
	0xc5, 0x8a, 0x44, 0x9d, 0x2c, 0x99, 0xea, 0xea, 0xf3, 0xac, 0xa1, 0xd4, 0x16, 0x3a, 0x55, 0xaa,
	0x54, 0xce, 0x01, 0x6a, 0x97, 0x73, 0x80, 0x4a, 0xfe, 0x19, 0x56, 0xf2, 0xcf, 0xf4, 0xff, 0x67,
	0x81, 0x75, 0x4b, 0x4b, 0x3e, 0xe9, 0xfe, 0xa8, 0xcc, 0x70, 0x7f, 0x9c, 0xea, 0x5c, 0x32, 0x7a,
	0xd2, 0xcb, 0x58, 0xee, 0xc9, 0xc6, 0x15, 0x35, 0x38, 0xd1, 0x5c, 0x59, 0x4d, 0x44, 0x31, 0x85,
	0x57, 0x19, 0xf9, 0xec, 0x95, 0xda, 0x67, 0x2e, 0x76, 0x17, 0x2b, 0x70, 0xc6, 0xe4, 0x9a, 0x7f,
	0x95, 0x91, 0xbf, 0xbe, 0x40, 0xab, 0x62, 0xdf, 0x58, 0x61, 0xd0, 0xce, 0x52, 0x28, 0x9b, 0x73,
	0x15, 0xca, 0x49, 0xfd, 0xb6, 0xf5, 0x34, 0xfa, 0x6d, 0x7b, 0xa6, 0x7e, 0x3b, 0xa9, 0xa9, 0xb2,
	0x59, 0x9a, 0xea, 0x5a, 0x39, 0x03, 0x6c, 0x9a, 0xbe, 0x59, 0xe4, 0x80, 0xc5, 0xb2, 0x87, 0xae,
	0xa0, 0xed, 0x2e, 0xcd, 0xd3, 0x76, 0x97, 0x4b, 0xda, 0x6e, 0x59, 0x91, 0xed, 0x9e, 0xae, 0xc8,
	0xae, 0x4c, 0xa6, 0x24, 0xfd, 0xf5, 0x45, 0x33, 0x25, 0x69, 0x73, 0x9e, 0x40, 0x33, 0xb8, 0xc4,
	0x0c, 0x62, 0x2d, 0xe6, 0x2b, 0x2e, 0x93, 0xb3, 0x09, 0xb5, 0x8b, 0x65, 0xa1, 0x56, 0x37, 0x24,
	0xd6, 0x23, 0xb6, 0x6a, 0xde, 0xd2, 0x5a, 0x6c, 0x81, 0xe4, 0x7b, 0x65, 0x96, 0x55, 0xb6, 0x53,
	0x6e, 0x60, 0xaf, 0x98, 0x7d, 0xa0, 0xf0, 0xf9, 0x90, 0xad, 0xee, 0x97, 0x8d, 0x37, 0x74, 0x8b,
	0xcc, 0xe9, 0x77, 0xc2, 0xda, 0xb3, 0xbb, 0xd0, 0xc7, 0x9e, 0x21, 0x14, 0xef, 0xb3, 0xe5, 0x34,
	0x3c, 0x0a, 0xa3, 0x13, 0x4d, 0xa7, 0x92, 0x8a, 0x5e, 0x9e, 0xd5, 0xe7, 0x87, 0x05, 0x6a, 0x7b,
	0x89, 0x5a, 0xab, 0x2e, 0xad, 0x5f, 0x65, 0xcf, 0xf3, 0x38, 0xf6, 0xa9, 0x41, 0xfe, 0x9d, 0x94,
	0x69, 0xf4, 0xf5, 0x59, 0x7d, 0x6e, 0x4f, 0x36, 0xb1, 0x57, 0xa9, 0x1f, 0xf3, 0x5b, 0x1f, 0x4c,
	0xe6, 0x1e, 0xb4, 0x67, 0xde, 0x07, 0xd8, 0xf1, 0x5e, 0x91, 0xbc, 0x9c, 0xa0, 0x60, 0x8a, 0x18,
	0x8a, 0x7c, 0xb3, 0x09, 0x11, 0xb3, 0x0d, 0x78, 0xff, 0x1f, 0x9b, 0x6c, 0x75, 0x62, 0x97, 0xf0,
	0x04, 0x19, 0x16, 0x72, 0xc5, 0x38, 0x41, 0xb9, 0x95, 0xbc, 0x57, 0x90, 0xcd, 0xa4, 0x2d, 0x6e,
	0x9d, 0x99, 0x13, 0xd6, 0xed, 0xac, 0xad, 0x29, 0xd1, 0x1f, 0xb1, 0x0e, 0x68, 0x49, 0xba, 0xd7,
	0x1a, 0xf6, 0x7a, 0xfb, 0xec, 0xbd, 0x6e, 0xe7, 0x8d, 0x6d, 0x06, 0x3d, 0xa9, 0x7e, 0xf7, 0x19,
	0x6a, 0x88, 0x27, 0x5c, 0x8a, 0x3c, 0xd3, 0x06, 0xfa, 0x7e, 0xe3, 0xec, 0x7d, 0xbf, 0x57, 0xec,
	0xc0, 0x5e, 0xd6, 0x3d, 0xe6, 0x42, 0xad, 0xc8, 0x72, 0x05, 0xf7, 0xbf, 0x55, 0x60, 0x28, 0x5a,
	0xc2, 0x99, 0x71, 0xc4, 0xc6, 0xec, 0x38, 0x62, 0xff, 0xaf, 0x2a, 0x8c, 0xe5, 0x8b, 0x07, 0xd7,
	0x74, 0x34, 0x1c, 0x62, 0x8c, 0x4c, 0x59, 0x71, 0xaa, 0x78, 0x86, 0xb4, 0xd2, 0x2c, 0xd6, 0x19,
	0x85, 0x8e, 0xf1, 0x2e, 0xa2, 0xa3, 0x30, 0x3c, 0xf7, 0x57, 0x98, 0x6a, 0xe1, 0x1c, 0x8c, 0x65,
	0xac, 0x75, 0x47, 0x82, 0xde, 0x1d, 0x4b, 0x54, 0xf1, 0xf4, 0x30, 0x69, 0x12, 0xb9, 0x87, 0x47,
	0x3a, 0xe5, 0x43, 0x0d, 0x44, 0x60, 0xff, 0x87, 0x15, 0xd6, 0x31, 0x76, 0x07, 0x4c, 0xea, 0x82,
	0x3c, 0xc1, 0x6d, 0x37, 0x55, 0xc4, 0x17, 0xcc, 0x6a, 0x68, 0x49, 0x9a, 0xe0, 0x37, 0xf2, 0xb8,
	0x80, 0xd1, 0x84, 0xe6, 0xa6, 0x9d, 0xf0, 0x39, 0xf5, 0x0d, 0xb6, 0x02, 0xf7, 0x96, 0x13, 0x85,
	0xd1, 0x70, 0xa8, 0x68, 0x55, 0xf8, 0x1e, 0xf0, 0x5d, 0x80, 0x91, 0xb2, 0xff, 0xf7, 0x15, 0xd6,
	0x2d, 0xed, 0x30, 0x2c, 0x0f, 0x59, 0x0e, 0x85, 0x0f, 0xeb, 0x10, 0x46, 0x03, 0xac, 0xb1, 0x25,
	0x1d, 0x38, 0x35, 0xbf, 0x64, 0x51, 0x81, 0x99, 0xf6, 0x3a, 0x94, 0x7c, 0x54, 0x18, 0xbf, 0x0d,
	0x08, 0x55, 0x5f, 0x67, 0xdd, 0x3c, 0x4a, 0x4a, 0x34, 0x2a, 0xbf, 0x3d, 0x83, 0xa7, 0xaa, 0xc9,
	0xf5, 0xb2, 0x9a, 0xdc, 0xff, 0xa4, 0xc9, 0x56, 0x27, 0x84, 0x63, 0xd1, 0x36, 0xa8, 0x94, 0x6c,
	0x03, 0x67, 0xaa, 0x47, 0xea, 0x19, 0x7a, 0xf2, 0x4a, 0xbe, 0xe9, 0xda, 0xa4, 0x6f, 0xba, 0xec,
	0xeb, 0x5b, 0x78, 0x76, 0xbe, 0xbe, 0xbd, 0xc2, 0x4b, 0x1a, 0xd2, 0xb2, 0xb7, 0x9e, 0xb6, 0xe3,
	0xf2, 0xdb, 0x9a, 0xb2, 0x57, 0xa9, 0x31, 0xe1, 0x55, 0xea, 0xff, 0x7b, 0x65, 0x22, 0x0d, 0x7c,
	0x56, 0x1a, 0xcc, 0x79, 0xd6, 0xe0, 0xde, 0x77, 0xd3, 0x38, 0x73, 0xb6, 0x50, 0x09, 0x46, 0xd1,
	0x79, 0xe6, 0x46, 0x78, 0xb6, 0xa3, 0x30, 0x8c, 0xb1, 0x5c, 0x60, 0xad, 0x30, 0x52, 0xa7, 0x9b,
	0x38, 0xa6, 0x19, 0x46, 0x74, 0xb2, 0xc1, 0x54, 0x1c, 0x0e, 0x1d, 0x94, 0x0b, 0xf5, 0x4c, 0x2e,
	0xdc, 0xd3, 0x72, 0x41, 0x8c, 0x65, 0xa4, 0xf9, 0x51, 0x7d, 0x3e, 0x61, 0xc4, 0x68, 0x25, 0xbf,
	0x55, 0x2c, 0xc2, 0x38, 0x92, 0x4a, 0xff, 0x36, 0xfd, 0x56, 0x7b, 0x58, 0xd1, 0xff, 0xad, 0x4a,
	0x29, 0xa7, 0x3e, 0x7f, 0xf5, 0x61, 0xce, 0x58, 0xbd, 0xfa, 0x98, 0x48, 0xbb, 0xaf, 0xce, 0x48,
	0xbb, 0xaf, 0xcd, 0x4e, 0xbb, 0x5f, 0x28, 0xa7, 0xdd, 0xff, 0xb8, 0xf2, 0x55, 0xbc, 0xc4, 0x28,
	0xbd, 0x9d, 0x58, 0x38, 0xf5, 0xed, 0x44, 0x7d, 0xe2, 0xed, 0x44, 0xe9, 0xc9, 0x43, 0xa3, 0xfc,
	0xe4, 0xa1, 0x9f, 0xb0, 0xe5, 0xa2, 0x2e, 0x52, 0xb6, 0x28, 0x2a, 0x13, 0x16, 0xc5, 0x59, 0x9f,
	0x9c, 0x21, 0x97, 0x4f, 0x7d, 0x72, 0xd6, 0xff, 0x71, 0x95, 0x3d, 0x3f, 0x45, 0x5d, 0x99, 0x2f,
	0x3b, 0xa6, 0xc4, 0x13, 0xaa, 0x53, 0xe3, 0x09, 0x1f, 0x4e, 0x79, 0xd0, 0xf6, 0xda, 0x53, 0x68,
	0x4d, 0x67, 0x3c, 0x88, 0x0b, 0x93, 0x07, 0x71, 0x5c, 0x60, 0x8b, 0x52, 0x78, 0xae, 0x32, 0x11,
	0x9e, 0xbb, 0x52, 0x0c, 0xcf, 0x55, 0x33, 0x02, 0x3d, 0x93, 0x12, 0x07, 0xd4, 0x26, 0x38, 0xa0,
	0xff, 0x3b, 0xd5, 0xdc, 0x49, 0x3a, 0xce, 0xf4, 0xb1, 0x6e, 0xec, 0x1f, 0x84, 0x3c, 0x70, 0xe2,
	0x44, 0x8a, 0xf0, 0x20, 0x39, 0x54, 0x47, 0x62, 0x99, 0xe0, 0x3d, 0x85, 0x02, 0x77, 0xaa, 0xfc,
	0x1b, 0x7d, 0x2a, 0x54, 0x31, 0x0f, 0x01, 0xd5, 0xcc, 0x10, 0xd0, 0x37, 0x99, 0x95, 0xc6, 0x62,
	0x98, 0x06, 0x4e, 0xae, 0x2b, 0x64, 0x0e, 0x66, 0xaa, 0xd9, 0xc9, 0x2b, 0xe0, 0x3b, 0x78, 0x50,
	0xa4, 0x25, 0xe1, 0xb0, 0xcc, 0x83, 0x02, 0x61, 0x91, 0xa3, 0x1a, 0x9f, 0x87, 0xa3, 0xfe, 0xab,
	0xf2, 0xff, 0xef, 0xad, 0xd8, 0xe0, 0x0f, 0x9b, 0xa6, 0x23, 0xea, 0x8d, 0x53, 0x1e, 0x63, 0x18,
	0xe9, 0xe1, 0x2a, 0x35, 0x27, 0x4f, 0x0d, 0x9f, 0x6a, 0x6f, 0xd5, 0xbe, 0xb8, 0xbd, 0xb5, 0xc6,
	0x3a, 0x28, 0xf6, 0x1d, 0xca, 0x1d, 0x34, 0xdc, 0xe9, 0x08, 0xef, 0x60, 0x12, 0xe1, 0xaf, 0xe7,
	0xf6, 0x39, 0x49, 0x70, 0x75, 0xc9, 0xd0, 0x05, 0xfa, 0x8d, 0x69, 0x6e, 0xaa, 0xc9, 0xa7, 0xa1,
	0xd4, 0x26, 0xb3, 0xe6, 0x49, 0xee, 0xd3, 0xed, 0xf4, 0xc0, 0xd4, 0x78, 0xf8, 0x58, 0xbf, 0xcb,
	0x99, 0xe1, 0x01, 0x83, 0xae, 0xdf, 0x2a, 0x92, 0x1b, 0xaa, 0xd1, 0x36, 0x94, 0xc1, 0x8c, 0x44,
	0xf7, 0x16, 0x45, 0xdf, 0xa4, 0x88, 0xe1, 0x02, 0x69, 0xce, 0x5c, 0x2e, 0xfa, 0xdc, 0x72, 0x03,
	0xbb, 0x1b, 0x8b, 0xe4, 0x6d, 0x44, 0x6c, 0x04, 0xfa, 0x7f, 0x5c, 0x65, 0xe7, 0xa6, 0xcd, 0x6a,
	0x9a, 0x4c, 0x2e, 0xba, 0x11, 0xcb, 0xfc, 0x5e, 0x9d, 0xe4, 0xf7, 0x49, 0xd5, 0xab, 0xf6, 0xe5,
	0x06, 0x51, 0x9f, 0x9d, 0x62, 0xd5, 0xdf, 0x65, 0xdd, 0xd2, 0x96, 0x00, 0x43, 0xc7, 0xfe, 0xc8,
	0x09, 0xd3, 0xd1, 0xbe, 0x4a, 0x15, 0xa9, 0xd9, 0xed, 0xd8, 0x1f, 0x7d, 0x80, 0x00, 0xba, 0xc1,
	0x0f, 0x85, 0x7b, 0xe4, 0x64, 0x2e, 0xc5, 0xb6, 0xdd, 0x46, 0x64, 0x27, 0xf2, 0x44, 0xff, 0x23,
	0xb6, 0x3a, 0xb1, 0x1f, 0xa7, 0xc7, 0x53, 0xd7, 0x28, 0x57, 0x24, 0x4e, 0x5d, 0x57, 0xc4, 0xe6,
	0xc3, 0x14, 0x16, 0x8b, 0x64, 0x8f, 0xd0, 0xc1, 0x7f, 0x9b, 0x39, 0xa3, 0xaf, 0xef, 0x7f, 0x21,
	0xef, 0xb0, 0x7e, 0x04, 0x55, 0xc8, 0x8f, 0xa6, 0xec, 0x19, 0xb0, 0xe8, 0x1c, 0x33, 0xff, 0x1d,
	0x8f, 0x2c, 0xad, 0xf9, 0xd4, 0x2d, 0xdd, 0xc7, 0x30, 0x0a, 0x26, 0x5b, 0x1b, 0xe7, 0xb6, 0xd8,
	0xde, 0xc8, 0x9c, 0x87, 0xe3, 0xdb, 0xff, 0xf3, 0x1a, 0xbb, 0x7a, 0x5a, 0x9b, 0x69, 0xe9, 0xf5,
	0x95, 0xa9, 0xe9, 0xf5, 0x67, 0x7c, 0x8c, 0x73, 0x89, 0xb5, 0x4e, 0x84, 0x38, 0x72, 0x62, 0x91,
	0x18, 0xce, 0xca, 0x26, 0x60, 0x7b, 0x22, 0x99, 0x96, 0xa4, 0xbf, 0x70, 0x6a, 0x92, 0x7e, 0xbd,
	0x94, 0xa4, 0x7f, 0x5e, 0xbd, 0xa0, 0x69, 0x64, 0xfd, 0xd3, 0x2b, 0x1a, 0x33, 0x45, 0xbf, 0x59,
	0x4c, 0xd1, 0x77, 0xf2, 0x14, 0x7d, 0x72, 0xc4, 0xdc, 0xfd, 0xbc, 0xab, 0x8c, 0x69, 0xfa, 0x19,
	0xa4, 0xd3, 0xfc, 0xfb, 0x6f, 0xb2, 0xa5, 0x42, 0x05, 0xe8, 0xea, 0x87, 0x3c, 0xf4, 0x02, 0xcd,
	0x8a, 0xaa, 0x94, 0x25, 0xe4, 0x57, 0x8d, 0x84, 0xfc, 0xef, 0x9b, 0x09, 0xdb, 0x43, 0x71, 0x8a,
	0x0b, 0x2f, 0xff, 0x1e, 0x77, 0xe4, 0x69, 0x23, 0x32, 0x03, 0x77, 0x46, 0x1e, 0x06, 0x71, 0x40,
	0x13, 0x2e, 0xb0, 0x1e, 0x43, 0x88, 0x78, 0x6f, 0xad, 0xc8, 0xbb, 0x86, 0x64, 0xcf, 0xf9, 0x77,
	0xf0, 0x89, 0x19, 0x0e, 0x7c, 0x7d, 0xee, 0xdf, 0x28, 0x7c, 0xa5, 0x2f, 0xb5, 0xb2, 0x37, 0x1a,
	0x8d, 0xf2, 0x1b, 0x0d, 0x93, 0xf9, 0x9a, 0x67, 0x62, 0xbe, 0xd6, 0x34, 0xe6, 0x33, 0xf9, 0xa8,
	0x3d, 0xf3, 0xa9, 0x07, 0x9b, 0xf7, 0xd4, 0xa3, 0x33, 0xf3, 0xa9, 0x07, 0x2c, 0xe4, 0x57, 0xf7,
	0xd4, 0xe3, 0x6f, 0x1b, 0xe6, 0x1e, 0x9e, 0xf6, 0xd6, 0x23, 0x5f, 0xf3, 0xea, 0x8c, 0xd7, 0x71,
	0x35, 0xe3, 0xd1, 0xda, 0x45, 0xd6, 0x86, 0x9e, 0xcc, 0xf7, 0xa9, 0xb0, 0x6e, 0xc4, 0x61, 0x03,
	0xb6, 0xc4, 0x3d, 0x0f, 0x56, 0x3a, 0x1d, 0x7b, 0xb9, 0xf2, 0xd8, 0xe1, 0x9e, 0xb7, 0x2b, 0x3f,
	0x44, 0xc8, 0xfa, 0xce, 0x84, 0x04, 0x24, 0x67, 0xee, 0xe6, 0xb4, 0x65, 0x73, 0xcb, 0x4a, 0xcb,
	0x7c, 0xe1, 0xf7, 0xc9, 0x02, 0xbb, 0x38, 0x87, 0x7c, 0x0a, 0xc7, 0x56, 0xa6, 0x71, 0xac, 0xc9,
	0x0a, 0xd5, 0x22, 0x2b, 0x3c, 0x33, 0x49, 0x97, 0x71, 0x54, 0x7d, 0x82, 0xa3, 0x1e, 0xe6, 0x1c,
	0x45, 0x4a, 0xcf, 0x9b, 0x9f, 0x63, 0x69, 0xca, 0xdc, 0xa6, 0x7b, 0xdd, 0xba, 0x73, 0x5b, 0xa9,
	0x3d, 0x9f, 0xbb, 0xd7, 0xad, 0x3b, 0xb7, 0xb1, 0xd7, 0xad, 0x3b, 0xb7, 0xbf, 0x34, 0x1e, 0xee,
	0x9f, 0x50, 0xc7, 0x5b, 0x77, 0x6e, 0x5b, 0x7d, 0xd6, 0xca, 0x72, 0x1c, 0x54, 0x02, 0x89, 0x2e,
	0xe3, 0x1b, 0x17, 0x4c, 0x6c, 0x50, 0x1d, 0x62, 0x01, 0xd5, 0x02, 0xb8, 0x84, 0x03, 0x32, 0xa5,
	0x74, 0xb6, 0x3e, 0x4f, 0xf8, 0x3d, 0x32, 0xa3, 0xf4, 0x5b, 0x64, 0x58, 0x8d, 0x05, 0xd4, 0x34,
	0xf0, 0x2d, 0xf2, 0xd6, 0x9d, 0xdb, 0x83, 0xdf, 0x2e, 0xbc, 0x8b, 0x1b, 0x3e, 0xd3, 0xc3, 0x53,
	0x4c, 0xa0, 0x58, 0x98, 0x69, 0x35, 0xc1, 0xb0, 0xd3, 0x13, 0x28, 0x0c, 0x2f, 0x51, 0xbd, 0x10,
	0xcc, 0xfd, 0xa7, 0x4a, 0x21, 0xb1, 0x02, 0x13, 0xf7, 0xb1, 0xe4, 0xa6, 0x79, 0xd2, 0x3f, 0x74,
	0xe2, 0xa6, 0x94, 0xb8, 0x4f, 0xee, 0xfb, 0xd1, 0x28, 0x4f, 0xfa, 0x47, 0xcf, 0xfd, 0x68, 0x64,
	0xbd, 0xca, 0x56, 0x31, 0x93, 0x61, 0xe4, 0xa6, 0x8e, 0x76, 0x61, 0xeb, 0x34, 0x0a, 0xa8, 0xb8,
	0xef, 0xa6, 0xda, 0x11, 0x9a, 0x65, 0x3d, 0x48, 0x9e, 0x79, 0x98, 0xa0, 0x6c, 0x73, 0x7c, 0x9e,
	0xff, 0x3d, 0x21, 0x23, 0x47, 0x08, 0x19, 0x8d, 0x74, 0x8e, 0x3b, 0x20, 0xef, 0x00, 0x90, 0x55,
	0x9b, 0x2f, 0xbe, 0xb1, 0x1a, 0x45, 0xc9, 0x5b, 0xfd, 0x7f, 0xf8, 0xf4, 0x72, 0xe5, 0x27, 0x9f,
	0x5e, 0xae, 0xfc, 0xdb, 0xa7, 0x97, 0x2b, 0x7f, 0xf0, 0xd9, 0xe5, 0xe7, 0x7e, 0xf2, 0xd9, 0xe5,
	0xe7, 0x7e, 0xf6, 0xd9, 0xe5, 0xe7, 0xde, 0xab, 0xec, 0x37, 0xf0, 0xaf, 0x7f, 0x36, 0xff, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x00, 0xb7, 0x73, 0x76, 0x10, 0x48, 0x00, 0x00,
}

func (m *WlstSluF400) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF400) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF400) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SluitemAddr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemAddr))
		i--
		dAtA[i] = 0x20
	}
	if m.Remark != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Remark))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sunset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Sunset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Sunrise != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Sunrise))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Retry != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Reson != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Reson))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Csq != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Csq))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Ecl != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Ecl))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Earfcn != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Earfcn))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Txpower != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Txpower))
		i--
		dAtA[i] = 0x78
	}
	if m.Rsrq != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rsrq))
		i--
		dAtA[i] = 0x70
	}
	if m.Pci != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Pci))
		i--
		dAtA[i] = 0x68
	}
	if m.Snr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Snr))
		i--
		dAtA[i] = 0x60
	}
	if m.Rssi != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rssi))
		i--
		dAtA[i] = 0x58
	}
	if m.Rsrp != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rsrp))
		i--
		dAtA[i] = 0x50
	}
	if m.SluitemPara != nil {
		{
			size, err := m.SluitemPara.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DateTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ResetCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetCount))
		i--
		dAtA[i] = 0x38
	}
	if m.TimeFault != nil {
		{
			size, err := m.TimeFault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SluitemStatus != nil {
		{
			size, err := m.SluitemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LeakageCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeakageCurrent))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.LightData) > 0 {
		for iNdEx := len(m.LightData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ModelInfo != nil {
		{
			size, err := m.ModelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_ModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_ModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_ModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UseLoop))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SluitemType) > 0 {
		i -= len(m.SluitemType)
		copy(dAtA[i:], m.SluitemType)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Model != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Model))
		i--
		dAtA[i] = 0x30
	}
	if m.HasTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasTimer))
		i--
		dAtA[i] = 0x28
	}
	if m.HasTemperature != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasTemperature))
		i--
		dAtA[i] = 0x20
	}
	if m.HasLeakage != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasLeakage))
		i--
		dAtA[i] = 0x18
	}
	if m.PowerSaving != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerSaving))
		i--
		dAtA[i] = 0x10
	}
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_LightData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_LightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_LightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RatedPower != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.RatedPower))
		i--
		dAtA[i] = 0x58
	}
	if m.SluitemPowerTurnon != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemPowerTurnon))
		i--
		dAtA[i] = 0x50
	}
	if m.PowerLevel != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerLevel))
		i--
		dAtA[i] = 0x48
	}
	if m.LightStatus != nil {
		{
			size, err := m.LightStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ActiveTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActiveTime))))
		i--
		dAtA[i] = 0x39
	}
	if m.Electricity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Electricity))))
		i--
		dAtA[i] = 0x31
	}
	if m.ApparentPower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApparentPower))))
		i--
		dAtA[i] = 0x29
	}
	if m.ReactivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReactivePower))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_LightStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_LightStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_LightStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkingOn != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.WorkingOn))
		i--
		dAtA[i] = 0x18
	}
	if m.Fault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Fault))
		i--
		dAtA[i] = 0x10
	}
	if m.Leakage != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Leakage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_SluitemStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_SluitemStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_SluitemStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EnableAlarm))
		i--
		dAtA[i] = 0x10
	}
	if m.FlashFault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.FlashFault))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_TimeFault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_TimeFault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_TimeFault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClockOutAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClockOutAlarm))
		i--
		dAtA[i] = 0x18
	}
	if m.ClockOutFault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClockOutFault))
		i--
		dAtA[i] = 0x10
	}
	if m.ClockFault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClockFault))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3900_SluitemPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3900_SluitemPara) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3900_SluitemPara) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UplinkReply != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UplinkReply))
		i--
		dAtA[i] = 0x30
	}
	if m.AlarmInterval != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AlarmInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.IsRunning != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.IsRunning))
		i--
		dAtA[i] = 0x20
	}
	if m.HasEnableAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasEnableAlarm))
		i--
		dAtA[i] = 0x18
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x11
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7800) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7800) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7800) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DtEnd != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtEnd))
		i--
		dAtA[i] = 0x30
	}
	if m.DtStart != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtStart))
		i--
		dAtA[i] = 0x28
	}
	if m.RecordCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.RecordCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ClassType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClassType))
		i--
		dAtA[i] = 0x18
	}
	if m.EventType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF800) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF800) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF800) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.View_0X25) > 0 {
		for iNdEx := len(m.View_0X25) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X25[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.View_0X24) > 0 {
		for iNdEx := len(m.View_0X24) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X24[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.View_0X23) > 0 {
		for iNdEx := len(m.View_0X23) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X23[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.View_0X22) > 0 {
		for iNdEx := len(m.View_0X22) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X22[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.View_0X21) > 0 {
		for iNdEx := len(m.View_0X21) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X21[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.View_0X20) > 0 {
		for iNdEx := len(m.View_0X20) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.View_0X20[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RecordCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.RecordCount))
		i--
		dAtA[i] = 0x30
	}
	if m.DataIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataIdx))
		i--
		dAtA[i] = 0x28
	}
	if m.DataTotal != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.ClassType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClassType))
		i--
		dAtA[i] = 0x18
	}
	if m.EventType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF800_View0X20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF800_View0X20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF800_View0X20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA7 := make([]byte, len(m.Status)*10)
		var j6 int
		for _, num1 := range m.Status {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if m.DtHappen != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtHappen))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF800_View0X21) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF800_View0X21) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF800_View0X21) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationSource != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationSource))
		i--
		dAtA[i] = 0x30
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x28
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x20
	}
	if m.OperationOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.OperationType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x10
	}
	if m.DtHappen != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtHappen))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF800_View0X23) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF800_View0X23) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF800_View0X23) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SluitemPhyinfo) > 0 {
		dAtA9 := make([]byte, len(m.SluitemPhyinfo)*10)
		var j8 int
		for _, num1 := range m.SluitemPhyinfo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SluitemElectricity) > 0 {
		for iNdEx := len(m.SluitemElectricity) - 1; iNdEx >= 0; iNdEx-- {
			f10 := math.Float64bits(float64(m.SluitemElectricity[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f10))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemElectricity)*8))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SluitemMaxCurrent) > 0 {
		for iNdEx := len(m.SluitemMaxCurrent) - 1; iNdEx >= 0; iNdEx-- {
			f11 := math.Float64bits(float64(m.SluitemMaxCurrent[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f11))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemMaxCurrent)*8))
		i--
		dAtA[i] = 0x52
	}
	if m.SluitemMaxVoltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SluitemMaxVoltage))))
		i--
		dAtA[i] = 0x49
	}
	if len(m.SluitemReactivePower) > 0 {
		for iNdEx := len(m.SluitemReactivePower) - 1; iNdEx >= 0; iNdEx-- {
			f12 := math.Float64bits(float64(m.SluitemReactivePower[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f12))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemReactivePower)*8))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SluitemActivePower) > 0 {
		for iNdEx := len(m.SluitemActivePower) - 1; iNdEx >= 0; iNdEx-- {
			f13 := math.Float64bits(float64(m.SluitemActivePower[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f13))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemActivePower)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SluitemCurrent) > 0 {
		for iNdEx := len(m.SluitemCurrent) - 1; iNdEx >= 0; iNdEx-- {
			f14 := math.Float64bits(float64(m.SluitemCurrent[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f14))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemCurrent)*8))
		i--
		dAtA[i] = 0x32
	}
	if m.SluitemVoltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SluitemVoltage))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.SluitemStatus) > 0 {
		dAtA16 := make([]byte, len(m.SluitemStatus)*10)
		var j15 int
		for _, num1 := range m.SluitemStatus {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AlarmType) > 0 {
		dAtA18 := make([]byte, len(m.AlarmType)*10)
		var j17 int
		for _, num1 := range m.AlarmType {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1a
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x10
	}
	if m.DtHappen != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtHappen))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluEc00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluEc00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluEc00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WlstSlu_6B00) > 0 {
		for iNdEx := len(m.WlstSlu_6B00) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WlstSlu_6B00[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReadCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadCount))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.StartIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6B00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6B00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6B00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CmdPwm != nil {
		{
			size, err := m.CmdPwm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.CmdMix) > 0 {
		dAtA21 := make([]byte, len(m.CmdMix)*10)
		var j20 int
		for _, num1 := range m.CmdMix {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x5a
	}
	if m.CmdType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Addrs) > 0 {
		dAtA23 := make([]byte, len(m.Addrs)*10)
		var j22 int
		for _, num1 := range m.Addrs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x4a
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x40
	}
	if m.TimerOrOffset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerOrOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.OperationOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationOrder))
		i--
		dAtA[i] = 0x30
	}
	if m.OperationType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x28
	}
	if m.DtEnd != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.DtStart != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtStart))
		i--
		dAtA[i] = 0x18
	}
	if m.SetIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6B00_CmdPwm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6B00_CmdPwm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6B00_CmdPwm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if m.Scale != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Scale))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoopCanDo) > 0 {
		dAtA25 := make([]byte, len(m.LoopCanDo)*10)
		var j24 int
		for _, num1 := range m.LoopCanDo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6C00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6C00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6C00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadCount))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.StartIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluD000) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluD000) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluD000) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_2800) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_2800) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_2800) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Alarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Alarm))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_2400) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_2400) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_2400) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.DoFlag != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DoFlag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6E00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6E00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6E00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x30
	}
	if m.PatrolCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PatrolCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PatrolOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PatrolOrder))
		i--
		dAtA[i] = 0x20
	}
	if m.PatrolInterval != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PatrolInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.PatrolStart != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PatrolStart))
		i--
		dAtA[i] = 0x10
	}
	if m.DoFlag != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DoFlag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_3000) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_3000) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_3000) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MacAddr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.MacAddr))
		i--
		dAtA[i] = 0x28
	}
	if m.LowerVoltageLimit != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.LowerVoltageLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.UpperVoltageLimit != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UpperVoltageLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.DomainName != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DomainName))
		i--
		dAtA[i] = 0x10
	}
	if m.Ctrls != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Ctrls))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9A00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9A00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9A00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainNameStatus) > 0 {
		dAtA27 := make([]byte, len(m.DomainNameStatus)*10)
		var j26 int
		for _, num1 := range m.DomainNameStatus {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluCd00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluCd00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluCd00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AlwaysOnline != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AlwaysOnline))
		i--
		dAtA[i] = 0x70
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x68
	}
	if m.Cct != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Cct))
		i--
		dAtA[i] = 0x60
	}
	if m.BluetoothMode != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.BluetoothMode))
		i--
		dAtA[i] = 0x58
	}
	if m.BluetoothPin != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.BluetoothPin))
		i--
		dAtA[i] = 0x50
	}
	if m.CarrierRoutingMode != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CarrierRoutingMode))
		i--
		dAtA[i] = 0x48
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x41
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x39
	}
	if m.AutoMode != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AutoMode))
		i--
		dAtA[i] = 0x30
	}
	if m.PowerRange != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerRange))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentRange != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentRange))))
		i--
		dAtA[i] = 0x21
	}
	if m.CommunicationChannel != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CommunicationChannel))
		i--
		dAtA[i] = 0x18
	}
	if m.PowerFactor != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerFactor))
		i--
		dAtA[i] = 0x10
	}
	if m.CommunicationFailures != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CommunicationFailures))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_1C00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_1C00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_1C00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainName != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DomainName))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_1D00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_1D00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_1D00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataMark != nil {
		{
			size, err := m.DataMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_1D00_DataMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_1D00_DataMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_1D00_DataMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadCtrldata != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadCtrldata))
		i--
		dAtA[i] = 0x40
	}
	if m.ReadTimetable != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadTimetable))
		i--
		dAtA[i] = 0x38
	}
	if m.ReadSunriseset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadSunriseset))
		i--
		dAtA[i] = 0x30
	}
	if m.ReadVer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadVer))
		i--
		dAtA[i] = 0x28
	}
	if m.ReadGroup != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadGroup))
		i--
		dAtA[i] = 0x20
	}
	if m.ReadArgs != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadArgs))
		i--
		dAtA[i] = 0x18
	}
	if m.ReadTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadTimer))
		i--
		dAtA[i] = 0x10
	}
	if m.ReadData != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ReadData))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataContinue != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataContinue))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SetMark != nil {
		{
			size, err := m.SetMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if m.SluitemDataNew != nil {
		{
			size, err := m.SluitemDataNew.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SluitemRuntime) > 0 {
		for iNdEx := len(m.SluitemRuntime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SluitemRuntime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.SluitemSunriseset != nil {
		{
			size, err := m.SluitemSunriseset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SluitemVer != nil {
		{
			size, err := m.SluitemVer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.SluitemGroup) > 0 {
		dAtA34 := make([]byte, len(m.SluitemGroup)*10)
		var j33 int
		for _, num1 := range m.SluitemGroup {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x4a
	}
	if m.SluitemPara != nil {
		{
			size, err := m.SluitemPara.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.SluitemTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemTime))
		i--
		dAtA[i] = 0x38
	}
	if m.SluitemData != nil {
		{
			size, err := m.SluitemData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LoopCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.LoopCount))
		i--
		dAtA[i] = 0x28
	}
	if m.DataMark != nil {
		{
			size, err := m.DataMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SetMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SetMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SetMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetControl != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetControl))
		i--
		dAtA[i] = 0x28
	}
	if m.SetReset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetReset))
		i--
		dAtA[i] = 0x20
	}
	if m.SetGroup != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetGroup))
		i--
		dAtA[i] = 0x18
	}
	if m.SetArgs != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetArgs))
		i--
		dAtA[i] = 0x10
	}
	if m.SetTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetTimer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResetCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.LightStatus) > 0 {
		for iNdEx := len(m.LightStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.SluitemStatus != nil {
		{
			size, err := m.SluitemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TimerError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerError))
		i--
		dAtA[i] = 0x50
	}
	if m.LeakageCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeakageCurrent))))
		i--
		dAtA[i] = 0x49
	}
	if m.Temperature != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Temperature))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TotalElectricity) > 0 {
		for iNdEx := len(m.TotalElectricity) - 1; iNdEx >= 0; iNdEx-- {
			f39 := math.Float64bits(float64(m.TotalElectricity[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f39))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.TotalElectricity)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxCurrent) > 0 {
		for iNdEx := len(m.MaxCurrent) - 1; iNdEx >= 0; iNdEx-- {
			f40 := math.Float64bits(float64(m.MaxCurrent[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f40))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.MaxCurrent)*8))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxVoltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxVoltage))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.ReactivePower) > 0 {
		for iNdEx := len(m.ReactivePower) - 1; iNdEx >= 0; iNdEx-- {
			f41 := math.Float64bits(float64(m.ReactivePower[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f41))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.ReactivePower)*8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivePower) > 0 {
		for iNdEx := len(m.ActivePower) - 1; iNdEx >= 0; iNdEx-- {
			f42 := math.Float64bits(float64(m.ActivePower[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f42))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.ActivePower)*8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Current) > 0 {
		for iNdEx := len(m.Current) - 1; iNdEx >= 0; iNdEx-- {
			f43 := math.Float64bits(float64(m.Current[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f43))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Current)*8))
		i--
		dAtA[i] = 0x12
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemDataNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemDataNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemDataNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnergySaving) > 0 {
		dAtA45 := make([]byte, len(m.EnergySaving)*10)
		var j44 int
		for _, num1 := range m.EnergySaving {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA45[:j44])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0x72
	}
	if m.ResetCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.LightStatus) > 0 {
		for iNdEx := len(m.LightStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.SluitemStatus != nil {
		{
			size, err := m.SluitemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TimerError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerError))
		i--
		dAtA[i] = 0x50
	}
	if m.LeakageCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeakageCurrent))))
		i--
		dAtA[i] = 0x49
	}
	if len(m.TotalElectricity) > 0 {
		for iNdEx := len(m.TotalElectricity) - 1; iNdEx >= 0; iNdEx-- {
			f47 := math.Float64bits(float64(m.TotalElectricity[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f47))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.TotalElectricity)*8))
		i--
		dAtA[i] = 0x3a
	}
	if m.Phase != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RunTime) > 0 {
		dAtA49 := make([]byte, len(m.RunTime)*10)
		var j48 int
		for _, num1 := range m.RunTime {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		i -= j48
		copy(dAtA[i:], dAtA49[:j48])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j48))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivePower) > 0 {
		for iNdEx := len(m.ActivePower) - 1; iNdEx >= 0; iNdEx-- {
			f50 := math.Float64bits(float64(m.ActivePower[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f50))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.ActivePower)*8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Current) > 0 {
		for iNdEx := len(m.Current) - 1; iNdEx >= 0; iNdEx-- {
			f51 := math.Float64bits(float64(m.Current[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f51))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Current)*8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voltage) > 0 {
		for iNdEx := len(m.Voltage) - 1; iNdEx >= 0; iNdEx-- {
			f52 := math.Float64bits(float64(m.Voltage[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f52))
		}
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Voltage)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemPara) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemPara) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UplinkReply != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UplinkReply))
		i--
		dAtA[i] = 0x50
	}
	if m.UplinkTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UplinkTimer))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RatedPower) > 0 {
		dAtA54 := make([]byte, len(m.RatedPower)*10)
		var j53 int
		for _, num1 := range m.RatedPower {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA54[j53] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j53++
			}
			dAtA54[j53] = uint8(num)
			j53++
		}
		i -= j53
		copy(dAtA[i:], dAtA54[:j53])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j53))
		i--
		dAtA[i] = 0x42
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x39
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.SluitemVector) > 0 {
		dAtA56 := make([]byte, len(m.SluitemVector)*10)
		var j55 int
		for _, num1 := range m.SluitemVector {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA56[:j55])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SluitemPowerTurnon) > 0 {
		dAtA58 := make([]byte, len(m.SluitemPowerTurnon)*10)
		var j57 int
		for _, num1 := range m.SluitemPowerTurnon {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		i -= j57
		copy(dAtA[i:], dAtA58[:j57])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j57))
		i--
		dAtA[i] = 0x22
	}
	if m.SluitemEnableAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemEnableAlarm))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemStatus != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.DomainName != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DomainName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemVer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemVer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemVer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SluitemType) > 0 {
		i -= len(m.SluitemType)
		copy(dAtA[i:], m.SluitemType)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemType)))
		i--
		dAtA[i] = 0x32
	}
	if m.TimerModule != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerModule))
		i--
		dAtA[i] = 0x28
	}
	if m.TemperatureModule != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TemperatureModule))
		i--
		dAtA[i] = 0x20
	}
	if m.ElectricLeakageModule != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ElectricLeakageModule))
		i--
		dAtA[i] = 0x18
	}
	if m.EnergySaving != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EnergySaving))
		i--
		dAtA[i] = 0x10
	}
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemSunriseset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemSunriseset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemSunriseset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sunset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Sunset))
		i--
		dAtA[i] = 0x10
	}
	if m.Sunrise != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Sunrise))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_9D00_SluitemRuntime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_9D00_SluitemRuntime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_9D00_SluitemRuntime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rs485Check != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rs485Check))
		i--
		dAtA[i] = 0x60
	}
	if m.Rs485Baudrate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rs485Baudrate))
		i--
		dAtA[i] = 0x58
	}
	if m.PwmBaudrate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PwmBaudrate))
		i--
		dAtA[i] = 0x50
	}
	if m.PwmPower != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PwmPower))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PwmLoop) > 0 {
		dAtA60 := make([]byte, len(m.PwmLoop)*10)
		var j59 int
		for _, num1 := range m.PwmLoop {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		i -= j59
		copy(dAtA[i:], dAtA60[:j59])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j59))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RelayOperate) > 0 {
		dAtA62 := make([]byte, len(m.RelayOperate)*10)
		var j61 int
		for _, num1 := range m.RelayOperate {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		i -= j61
		copy(dAtA[i:], dAtA62[:j61])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j61))
		i--
		dAtA[i] = 0x3a
	}
	if m.OperateOffset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperateOffset))
		i--
		dAtA[i] = 0x30
	}
	if m.OperateTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperateTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DateEnable) > 0 {
		dAtA64 := make([]byte, len(m.DateEnable)*10)
		var j63 int
		for _, num1 := range m.DateEnable {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		i -= j63
		copy(dAtA[i:], dAtA64[:j63])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j63))
		i--
		dAtA[i] = 0x22
	}
	if m.OperateType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperateType))
		i--
		dAtA[i] = 0x18
	}
	if m.OutputType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OutputType))
		i--
		dAtA[i] = 0x10
	}
	if m.DataType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF000) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF000) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF000) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResetMark != nil {
		{
			size, err := m.ResetMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF000_ResetMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF000_ResetMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF000_ResetMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClearArgs != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClearArgs))
		i--
		dAtA[i] = 0x40
	}
	if m.ClearData != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClearData))
		i--
		dAtA[i] = 0x38
	}
	if m.InitAll != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.InitAll))
		i--
		dAtA[i] = 0x30
	}
	if m.ResetCarrier != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetCarrier))
		i--
		dAtA[i] = 0x28
	}
	if m.SoftResetZigbee != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SoftResetZigbee))
		i--
		dAtA[i] = 0x20
	}
	if m.HardResetZigbee != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HardResetZigbee))
		i--
		dAtA[i] = 0x18
	}
	if m.ResetConcentrator != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetConcentrator))
		i--
		dAtA[i] = 0x10
	}
	if m.ClearTask != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ClearTask))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF100) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF100) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF100) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimerStatus != nil {
		{
			size, err := m.TimerStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ForceTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ForceTimer))
		i--
		dAtA[i] = 0x20
	}
	if m.DateTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DateTime))
		i--
		dAtA[i] = 0x18
	}
	if m.OptMark != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OptMark))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF100_TimerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF100_TimerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF100_TimerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeFault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimeFault))
		i--
		dAtA[i] = 0x18
	}
	if m.TimerError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerError))
		i--
		dAtA[i] = 0x10
	}
	if m.DtformatError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DtformatError))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF200) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF200) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF200) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SluitemData) > 0 {
		for iNdEx := len(m.SluitemData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SluitemData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.DataMark != nil {
		{
			size, err := m.DataMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SluitemCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF200_DataMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF200_DataMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF200_DataMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetData != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SetData))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.LoopCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.LoopCount))
		i--
		dAtA[i] = 0x50
	}
	if m.RatedPower != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.RatedPower))
		i--
		dAtA[i] = 0x48
	}
	if m.Vector != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Vector))
		i--
		dAtA[i] = 0x40
	}
	if m.RunStatus != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.RunStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.PowerOnStatus != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerOnStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.Limit != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Order != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x20
	}
	if m.Route != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Route))
		i--
		dAtA[i] = 0x18
	}
	if m.Barcode != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Barcode))
		i--
		dAtA[i] = 0x10
	}
	if m.Group != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF200_ControllerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF200_ControllerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF200_ControllerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UplinkReply != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UplinkReply))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UplinkTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UplinkTimer))
		i--
		dAtA[i] = 0x78
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x71
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x69
	}
	if m.LoopCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.LoopCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RatedPower) > 0 {
		dAtA69 := make([]byte, len(m.RatedPower)*10)
		var j68 int
		for _, num1 := range m.RatedPower {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA69[j68] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j68++
			}
			dAtA69[j68] = uint8(num)
			j68++
		}
		i -= j68
		copy(dAtA[i:], dAtA69[:j68])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j68))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SluitemVector) > 0 {
		dAtA71 := make([]byte, len(m.SluitemVector)*10)
		var j70 int
		for _, num1 := range m.SluitemVector {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA71[j70] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j70++
			}
			dAtA71[j70] = uint8(num)
			j70++
		}
		i -= j70
		copy(dAtA[i:], dAtA71[:j70])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j70))
		i--
		dAtA[i] = 0x52
	}
	if m.SluitemEnableAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemEnableAlarm))
		i--
		dAtA[i] = 0x48
	}
	if m.SluitemStatus != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SluitemPowerTurnon) > 0 {
		dAtA73 := make([]byte, len(m.SluitemPowerTurnon)*10)
		var j72 int
		for _, num1 := range m.SluitemPowerTurnon {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA73[j72] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j72++
			}
			dAtA73[j72] = uint8(num)
			j72++
		}
		i -= j72
		copy(dAtA[i:], dAtA73[:j72])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j72))
		i--
		dAtA[i] = 0x3a
	}
	if m.LowerPowerLimit != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.LowerPowerLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.UpperPowerLimit != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UpperPowerLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.SluitemOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemOrder))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SluitemRoute) > 0 {
		dAtA75 := make([]byte, len(m.SluitemRoute)*10)
		var j74 int
		for _, num1 := range m.SluitemRoute {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA75[j74] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j74++
			}
			dAtA75[j74] = uint8(num)
			j74++
		}
		i -= j74
		copy(dAtA[i:], dAtA75[:j74])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j74))
		i--
		dAtA[i] = 0x1a
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SluitemGroup) > 0 {
		dAtA77 := make([]byte, len(m.SluitemGroup)*10)
		var j76 int
		for _, num1 := range m.SluitemGroup {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA77[j76] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j76++
			}
			dAtA77[j76] = uint8(num)
			j76++
		}
		i -= j76
		copy(dAtA[i:], dAtA77[:j76])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j76))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SluitemAddrs) > 0 {
		dAtA79 := make([]byte, len(m.SluitemAddrs)*10)
		var j78 int
		for _, num1 := range m.SluitemAddrs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA79[j78] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j78++
			}
			dAtA79[j78] = uint8(num)
			j78++
		}
		i -= j78
		copy(dAtA[i:], dAtA79[:j78])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j78))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SluitemPhyinfo) > 0 {
		for iNdEx := len(m.SluitemPhyinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SluitemPhyinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.AssistSluitemData) > 0 {
		for iNdEx := len(m.AssistSluitemData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssistSluitemData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.UnknowSluitem) > 0 {
		for iNdEx := len(m.UnknowSluitem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnknowSluitem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BaseSluitemData) > 0 {
		for iNdEx := len(m.BaseSluitemData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseSluitemData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ConcentratorData != nil {
		{
			size, err := m.ConcentratorData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DataMark != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataMark))
		i--
		dAtA[i] = 0x20
	}
	if m.SluitemCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemStart != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemStart))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_ConcentratorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_ConcentratorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_ConcentratorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommunicationChannel != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CommunicationChannel))
		i--
		dAtA[i] = 0x30
	}
	if m.UnknowSluitemCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UnknowSluitemCount))
		i--
		dAtA[i] = 0x28
	}
	if m.HardwareStatus != nil {
		{
			size, err := m.HardwareStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ArgsStatus != nil {
		{
			size, err := m.ArgsStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RunStatus != nil {
		{
			size, err := m.RunStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResetCount) > 0 {
		dAtA85 := make([]byte, len(m.ResetCount)*10)
		var j84 int
		for _, num1 := range m.ResetCount {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA85[j84] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j84++
			}
			dAtA85[j84] = uint8(num)
			j84++
		}
		i -= j84
		copy(dAtA[i:], dAtA85[:j84])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j84))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableAutochk != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EnableAutochk))
		i--
		dAtA[i] = 0x28
	}
	if m.EnableGprs != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EnableGprs))
		i--
		dAtA[i] = 0x20
	}
	if m.PoweronMark != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PoweronMark))
		i--
		dAtA[i] = 0x18
	}
	if m.EnableAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EnableAlarm))
		i--
		dAtA[i] = 0x10
	}
	if m.Offline != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Offline))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TurnOnoffError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TurnOnoffError))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemArgsError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemArgsError))
		i--
		dAtA[i] = 0x10
	}
	if m.ConcentratorArgsError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ConcentratorArgsError))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimerError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerError))
		i--
		dAtA[i] = 0x28
	}
	if m.BluetoothError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.BluetoothError))
		i--
		dAtA[i] = 0x20
	}
	if m.FramError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.FramError))
		i--
		dAtA[i] = 0x18
	}
	if m.CarrierError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CarrierError))
		i--
		dAtA[i] = 0x10
	}
	if m.ZigbeeError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ZigbeeError))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_BaseSluitemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_BaseSluitemData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_BaseSluitemData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LightData) > 0 {
		for iNdEx := len(m.LightData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LightStatus) > 0 {
		for iNdEx := len(m.LightStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Temperature != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Temperature))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemStatus != nil {
		{
			size, err := m.SluitemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DateTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DateTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TemperatureSensor != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TemperatureSensor))
		i--
		dAtA[i] = 0x38
	}
	if m.EepromError != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.EepromError))
		i--
		dAtA[i] = 0x30
	}
	if m.OffLine != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OffLine))
		i--
		dAtA[i] = 0x28
	}
	if m.NoAlarm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.NoAlarm))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkingArgs != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.WorkingArgs))
		i--
		dAtA[i] = 0x18
	}
	if m.Adjust != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Adjust))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkingOn != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.WorkingOn))
		i--
		dAtA[i] = 0x20
	}
	if m.Fault != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Fault))
		i--
		dAtA[i] = 0x18
	}
	if m.Leakage != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Leakage))
		i--
		dAtA[i] = 0x10
	}
	if m.PowerStatus != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PowerLevel != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerLevel))
		i--
		dAtA[i] = 0x30
	}
	if m.ActiveTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActiveTime))))
		i--
		dAtA[i] = 0x29
	}
	if m.Electricity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Electricity))))
		i--
		dAtA[i] = 0x21
	}
	if m.ActivePower != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActivePower))))
		i--
		dAtA[i] = 0x19
	}
	if m.Current != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Current))))
		i--
		dAtA[i] = 0x11
	}
	if m.Voltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Voltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_UnknowSluitem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_UnknowSluitem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_UnknowSluitem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModelInfo != nil {
		{
			size, err := m.ModelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_AssistSluitemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_AssistSluitemData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_AssistSluitemData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LightData) > 0 {
		for iNdEx := len(m.LightData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeakageCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeakageCurrent))))
		i--
		dAtA[i] = 0x11
	}
	if m.DateTime != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DateTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Electricity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Electricity))))
		i--
		dAtA[i] = 0x19
	}
	if m.MaxCurrent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxCurrent))))
		i--
		dAtA[i] = 0x11
	}
	if m.MaxVoltage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxVoltage))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_SluitemPhyinfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_SluitemPhyinfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_SluitemPhyinfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModelInfo != nil {
		{
			size, err := m.ModelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AllCommunicate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AllCommunicate))
		i--
		dAtA[i] = 0x28
	}
	if m.UsefulCommunicate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.UsefulCommunicate))
		i--
		dAtA[i] = 0x20
	}
	if m.Phase != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x18
	}
	if m.Routing != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Routing))
		i--
		dAtA[i] = 0x10
	}
	if m.SignalStrength != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SignalStrength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7300_ModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7300_ModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7300_ModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SluitemType) > 0 {
		i -= len(m.SluitemType)
		copy(dAtA[i:], m.SluitemType)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.SluitemType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Model != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Model))
		i--
		dAtA[i] = 0x30
	}
	if m.HasTimer != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasTimer))
		i--
		dAtA[i] = 0x28
	}
	if m.HasTemperature != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasTemperature))
		i--
		dAtA[i] = 0x20
	}
	if m.HasLeakage != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.HasLeakage))
		i--
		dAtA[i] = 0x18
	}
	if m.PowerSaving != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.PowerSaving))
		i--
		dAtA[i] = 0x10
	}
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF900) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF900) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF900) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetDomainResult != nil {
		{
			size, err := m.SetDomainResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BluetoothApply != nil {
		{
			size, err := m.BluetoothApply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.SluitemStatusAlarm) > 0 {
		for iNdEx := len(m.SluitemStatusAlarm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SluitemStatusAlarm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ErrorCtrls) > 0 {
		dAtA92 := make([]byte, len(m.ErrorCtrls)*10)
		var j91 int
		for _, num1 := range m.ErrorCtrls {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA92[j91] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j91++
			}
			dAtA92[j91] = uint8(num)
			j91++
		}
		i -= j91
		copy(dAtA[i:], dAtA92[:j91])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j91))
		i--
		dAtA[i] = 0x22
	}
	if m.ConcentratorData != nil {
		{
			size, err := m.ConcentratorData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AlarmType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AlarmType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF900_SluitemStatusAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF900_SluitemStatusAlarm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF900_SluitemStatusAlarm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LightStatus) > 0 {
		for iNdEx := len(m.LightStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LightStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SluitemStatus != nil {
		{
			size, err := m.SluitemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SluitemLoop != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemLoop))
		i--
		dAtA[i] = 0x10
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF900_BluetoothApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF900_BluetoothApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF900_BluetoothApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheckCode) > 0 {
		i -= len(m.CheckCode)
		copy(dAtA[i:], m.CheckCode)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.CheckCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.SimNumber != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SimNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluF900_SetDomainResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluF900_SetDomainResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluF900_SetDomainResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SetSuccess) > 0 {
		dAtA96 := make([]byte, len(m.SetSuccess)*10)
		var j95 int
		for _, num1 := range m.SetSuccess {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA96[j95] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j95++
			}
			dAtA96[j95] = uint8(num)
			j95++
		}
		i -= j95
		copy(dAtA[i:], dAtA96[:j95])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j95))
		i--
		dAtA[i] = 0x12
	}
	if m.DomainName != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DomainName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7B00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7B00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7B00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationData) > 0 {
		for iNdEx := len(m.OperationData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperationData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DataCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SluitemIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.SluitemIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CmdMix) > 0 {
		for iNdEx := len(m.CmdMix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmdMix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CmdType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Addr) > 0 {
		dAtA98 := make([]byte, len(m.Addr)*10)
		var j97 int
		for _, num1 := range m.Addr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		i -= j97
		copy(dAtA[i:], dAtA98[:j97])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j97))
		i--
		dAtA[i] = 0x32
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x28
	}
	if m.TimerOrOffset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerOrOffset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WeekSet) > 0 {
		dAtA100 := make([]byte, len(m.WeekSet)*10)
		var j99 int
		for _, num1 := range m.WeekSet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA100[j99] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j99++
			}
			dAtA100[j99] = uint8(num)
			j99++
		}
		i -= j99
		copy(dAtA[i:], dAtA100[:j99])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j99))
		i--
		dAtA[i] = 0x1a
	}
	if m.OperationType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationOrder))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x10
	}
	if m.Handle != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Handle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSluFe00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSluFe00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSluFe00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SluitemIdx) > 0 {
		dAtA102 := make([]byte, len(m.SluitemIdx)*10)
		var j101 int
		for _, num1 := range m.SluitemIdx {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA102[j101] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j101++
			}
			dAtA102[j101] = uint8(num)
			j101++
		}
		i -= j101
		copy(dAtA[i:], dAtA102[:j101])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j101))
		i--
		dAtA[i] = 0x22
	}
	if m.FaultCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.FaultCount))
		i--
		dAtA[i] = 0x18
	}
	if m.OperationCmd != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationCmd))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7400) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7400) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7400) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CmdPwm != nil {
		{
			size, err := m.CmdPwm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CmdMix) > 0 {
		dAtA105 := make([]byte, len(m.CmdMix)*10)
		var j104 int
		for _, num1 := range m.CmdMix {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA105[j104] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j104++
			}
			dAtA105[j104] = uint8(num)
			j104++
		}
		i -= j104
		copy(dAtA[i:], dAtA105[:j104])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j104))
		i--
		dAtA[i] = 0x52
	}
	if m.CmdType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x48
	}
	if m.TimerOrOffset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerOrOffset))
		i--
		dAtA[i] = 0x40
	}
	if len(m.WeekSet) > 0 {
		dAtA107 := make([]byte, len(m.WeekSet)*10)
		var j106 int
		for _, num1 := range m.WeekSet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA107[j106] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j106++
			}
			dAtA107[j106] = uint8(num)
			j106++
		}
		i -= j106
		copy(dAtA[i:], dAtA107[:j106])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j106))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Addrs) > 0 {
		dAtA109 := make([]byte, len(m.Addrs)*10)
		var j108 int
		for _, num1 := range m.Addrs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA109[j108] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j108++
			}
			dAtA109[j108] = uint8(num)
			j108++
		}
		i -= j108
		copy(dAtA[i:], dAtA109[:j108])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j108))
		i--
		dAtA[i] = 0x32
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x20
	}
	if m.OperationOrder != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.OperationType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7400_CmdPwm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7400_CmdPwm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7400_CmdPwm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if m.Scale != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Scale))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoopCanDo) > 0 {
		dAtA111 := make([]byte, len(m.LoopCanDo)*10)
		var j110 int
		for _, num1 := range m.LoopCanDo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA111[j110] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j110++
			}
			dAtA111[j110] = uint8(num)
			j110++
		}
		i -= j110
		copy(dAtA[i:], dAtA111[:j110])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j110))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7C00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7C00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7C00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationData) > 0 {
		for iNdEx := len(m.OperationData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperationData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AddOrUpdate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddOrUpdate))
		i--
		dAtA[i] = 0x28
	}
	if m.CmdCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x18
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7C00_ConcentratorOperationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cmd_485 != nil {
		{
			size, err := m.Cmd_485.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CmdPwm != nil {
		{
			size, err := m.CmdPwm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CmdMix) > 0 {
		dAtA115 := make([]byte, len(m.CmdMix)*10)
		var j114 int
		for _, num1 := range m.CmdMix {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA115[j114] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j114++
			}
			dAtA115[j114] = uint8(num)
			j114++
		}
		i -= j114
		copy(dAtA[i:], dAtA115[:j114])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j114))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimerOrOffset != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.TimerOrOffset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WeekSet) > 0 {
		dAtA117 := make([]byte, len(m.WeekSet)*10)
		var j116 int
		for _, num1 := range m.WeekSet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA117[j116] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j116++
			}
			dAtA117[j116] = uint8(num)
			j116++
		}
		i -= j116
		copy(dAtA[i:], dAtA117[:j116])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j116))
		i--
		dAtA[i] = 0x1a
	}
	if m.CmdType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x18
	}
	if m.Scale != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Scale))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoopCanDo) > 0 {
		dAtA119 := make([]byte, len(m.LoopCanDo)*10)
		var j118 int
		for _, num1 := range m.LoopCanDo {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA119[j118] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j118++
			}
			dAtA119[j118] = uint8(num)
			j118++
		}
		i -= j118
		copy(dAtA[i:], dAtA119[:j118])
		i = encodeVarintProtocolSlu(dAtA, i, uint64(j118))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data_485) > 0 {
		i -= len(m.Data_485)
		copy(dAtA[i:], m.Data_485)
		i = encodeVarintProtocolSlu(dAtA, i, uint64(len(m.Data_485)))
		i--
		dAtA[i] = 0x22
	}
	if m.DataLength != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.DataLength))
		i--
		dAtA[i] = 0x18
	}
	if m.Check != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Check))
		i--
		dAtA[i] = 0x10
	}
	if m.Baudrate != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Baudrate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6F00) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6F00) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6F00) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.ResetMark != nil {
		{
			size, err := m.ResetMark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocolSlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Addr != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x18
	}
	if m.AddrType != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.AddrType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdIdx != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.CmdIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WlstSlu_6F00_ResetMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WlstSlu_6F00_ResetMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WlstSlu_6F00_ResetMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZeroCount != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ZeroCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ZeroEerom != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ZeroEerom))
		i--
		dAtA[i] = 0x28
	}
	if m.InitRam != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.InitRam))
		i--
		dAtA[i] = 0x20
	}
	if m.InitMcuHardware != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.InitMcuHardware))
		i--
		dAtA[i] = 0x18
	}
	if m.ResetComm != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetComm))
		i--
		dAtA[i] = 0x10
	}
	if m.ResetMcu != 0 {
		i = encodeVarintProtocolSlu(dAtA, i, uint64(m.ResetMcu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocolSlu(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocolSlu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WlstSluF400) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	if m.Remark != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Remark))
	}
	if m.SluitemAddr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemAddr))
	}
	return n
}

func (m *WlstSlu_3900) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.ModelInfo != nil {
		l = m.ModelInfo.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.LightData) > 0 {
		for _, e := range m.LightData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.LeakageCurrent != 0 {
		n += 9
	}
	if m.SluitemStatus != nil {
		l = m.SluitemStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.TimeFault != nil {
		l = m.TimeFault.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.ResetCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetCount))
	}
	if m.DateTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DateTime))
	}
	if m.SluitemPara != nil {
		l = m.SluitemPara.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.Rsrp != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rsrp))
	}
	if m.Rssi != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rssi))
	}
	if m.Snr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Snr))
	}
	if m.Pci != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Pci))
	}
	if m.Rsrq != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rsrq))
	}
	if m.Txpower != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Txpower))
	}
	if m.Earfcn != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Earfcn))
	}
	if m.Ecl != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Ecl))
	}
	if m.Csq != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Csq))
	}
	if m.Reson != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Reson))
	}
	if m.Retry != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Retry))
	}
	if m.Sunrise != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Sunrise))
	}
	if m.Sunset != 0 {
		n += 2 + sovProtocolSlu(uint64(m.Sunset))
	}
	return n
}

func (m *WlstSlu_3900_ModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	if m.PowerSaving != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerSaving))
	}
	if m.HasLeakage != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasLeakage))
	}
	if m.HasTemperature != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasTemperature))
	}
	if m.HasTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasTimer))
	}
	if m.Model != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Model))
	}
	l = len(m.SluitemType)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.UseLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UseLoop))
	}
	return n
}

func (m *WlstSlu_3900_LightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.ReactivePower != 0 {
		n += 9
	}
	if m.ApparentPower != 0 {
		n += 9
	}
	if m.Electricity != 0 {
		n += 9
	}
	if m.ActiveTime != 0 {
		n += 9
	}
	if m.LightStatus != nil {
		l = m.LightStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.PowerLevel != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerLevel))
	}
	if m.SluitemPowerTurnon != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemPowerTurnon))
	}
	if m.RatedPower != 0 {
		n += 1 + sovProtocolSlu(uint64(m.RatedPower))
	}
	return n
}

func (m *WlstSlu_3900_LightStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leakage != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Leakage))
	}
	if m.Fault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Fault))
	}
	if m.WorkingOn != 0 {
		n += 1 + sovProtocolSlu(uint64(m.WorkingOn))
	}
	return n
}

func (m *WlstSlu_3900_SluitemStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlashFault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.FlashFault))
	}
	if m.EnableAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EnableAlarm))
	}
	return n
}

func (m *WlstSlu_3900_TimeFault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClockFault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClockFault))
	}
	if m.ClockOutFault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClockOutFault))
	}
	if m.ClockOutAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClockOutAlarm))
	}
	return n
}

func (m *WlstSlu_3900_SluitemPara) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.HasEnableAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasEnableAlarm))
	}
	if m.IsRunning != 0 {
		n += 1 + sovProtocolSlu(uint64(m.IsRunning))
	}
	if m.AlarmInterval != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AlarmInterval))
	}
	if m.UplinkReply != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UplinkReply))
	}
	return n
}

func (m *WlstSlu_7800) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.EventType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EventType))
	}
	if m.ClassType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClassType))
	}
	if m.RecordCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.RecordCount))
	}
	if m.DtStart != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtStart))
	}
	if m.DtEnd != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtEnd))
	}
	return n
}

func (m *WlstSluF800) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.EventType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EventType))
	}
	if m.ClassType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClassType))
	}
	if m.DataTotal != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataTotal))
	}
	if m.DataIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataIdx))
	}
	if m.RecordCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.RecordCount))
	}
	if len(m.View_0X20) > 0 {
		for _, e := range m.View_0X20 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.View_0X21) > 0 {
		for _, e := range m.View_0X21 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.View_0X22) > 0 {
		for _, e := range m.View_0X22 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.View_0X23) > 0 {
		for _, e := range m.View_0X23 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.View_0X24) > 0 {
		for _, e := range m.View_0X24 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.View_0X25) > 0 {
		for _, e := range m.View_0X25 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSluF800_View0X20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtHappen != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtHappen))
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSluF800_View0X21) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtHappen != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtHappen))
	}
	if m.OperationType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationType))
	}
	if m.OperationOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationOrder))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if m.Addr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Addr))
	}
	if m.OperationSource != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationSource))
	}
	return n
}

func (m *WlstSluF800_View0X23) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtHappen != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtHappen))
	}
	if m.Addr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Addr))
	}
	if len(m.AlarmType) > 0 {
		l = 0
		for _, e := range m.AlarmType {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.SluitemStatus) > 0 {
		l = 0
		for _, e := range m.SluitemStatus {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.SluitemVoltage != 0 {
		n += 9
	}
	if len(m.SluitemCurrent) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.SluitemCurrent)*8)) + len(m.SluitemCurrent)*8
	}
	if len(m.SluitemActivePower) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.SluitemActivePower)*8)) + len(m.SluitemActivePower)*8
	}
	if len(m.SluitemReactivePower) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.SluitemReactivePower)*8)) + len(m.SluitemReactivePower)*8
	}
	if m.SluitemMaxVoltage != 0 {
		n += 9
	}
	if len(m.SluitemMaxCurrent) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.SluitemMaxCurrent)*8)) + len(m.SluitemMaxCurrent)*8
	}
	if len(m.SluitemElectricity) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.SluitemElectricity)*8)) + len(m.SluitemElectricity)*8
	}
	if len(m.SluitemPhyinfo) > 0 {
		l = 0
		for _, e := range m.SluitemPhyinfo {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSluEc00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.StartIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.StartIdx))
	}
	if m.ReadCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadCount))
	}
	if len(m.WlstSlu_6B00) > 0 {
		for _, e := range m.WlstSlu_6B00 {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSlu_6B00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SetIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetIdx))
	}
	if m.DtStart != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtStart))
	}
	if m.DtEnd != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtEnd))
	}
	if m.OperationType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationType))
	}
	if m.OperationOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationOrder))
	}
	if m.TimerOrOffset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerOrOffset))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if len(m.Addrs) > 0 {
		l = 0
		for _, e := range m.Addrs {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.CmdType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdType))
	}
	if len(m.CmdMix) > 0 {
		l = 0
		for _, e := range m.CmdMix {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.CmdPwm != nil {
		l = m.CmdPwm.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_6B00_CmdPwm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopCanDo) > 0 {
		l = 0
		for _, e := range m.LoopCanDo {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.Scale != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Scale))
	}
	if m.Rate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rate))
	}
	return n
}

func (m *WlstSlu_6C00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.StartIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.StartIdx))
	}
	if m.ReadCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadCount))
	}
	return n
}

func (m *WlstSluD000) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_2800) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	if m.Alarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Alarm))
	}
	return n
}

func (m *WlstSlu_2400) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoFlag != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DoFlag))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	return n
}

func (m *WlstSlu_6E00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoFlag != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DoFlag))
	}
	if m.PatrolStart != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PatrolStart))
	}
	if m.PatrolInterval != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PatrolInterval))
	}
	if m.PatrolOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PatrolOrder))
	}
	if m.PatrolCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PatrolCount))
	}
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	return n
}

func (m *WlstSlu_3000) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ctrls != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Ctrls))
	}
	if m.DomainName != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DomainName))
	}
	if m.UpperVoltageLimit != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UpperVoltageLimit))
	}
	if m.LowerVoltageLimit != 0 {
		n += 1 + sovProtocolSlu(uint64(m.LowerVoltageLimit))
	}
	if m.MacAddr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.MacAddr))
	}
	return n
}

func (m *WlstSlu_9A00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DomainNameStatus) > 0 {
		l = 0
		for _, e := range m.DomainNameStatus {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSluCd00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommunicationFailures != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CommunicationFailures))
	}
	if m.PowerFactor != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerFactor))
	}
	if m.CommunicationChannel != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CommunicationChannel))
	}
	if m.CurrentRange != 0 {
		n += 9
	}
	if m.PowerRange != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerRange))
	}
	if m.AutoMode != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AutoMode))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.CarrierRoutingMode != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CarrierRoutingMode))
	}
	if m.BluetoothPin != 0 {
		n += 1 + sovProtocolSlu(uint64(m.BluetoothPin))
	}
	if m.BluetoothMode != 0 {
		n += 1 + sovProtocolSlu(uint64(m.BluetoothMode))
	}
	if m.Cct != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Cct))
	}
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.AlwaysOnline != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AlwaysOnline))
	}
	return n
}

func (m *WlstSlu_1C00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.DomainName != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DomainName))
	}
	return n
}

func (m *WlstSlu_1D00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.DataMark != nil {
		l = m.DataMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_1D00_DataMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadData != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadData))
	}
	if m.ReadTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadTimer))
	}
	if m.ReadArgs != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadArgs))
	}
	if m.ReadGroup != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadGroup))
	}
	if m.ReadVer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadVer))
	}
	if m.ReadSunriseset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadSunriseset))
	}
	if m.ReadTimetable != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadTimetable))
	}
	if m.ReadCtrldata != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ReadCtrldata))
	}
	return n
}

func (m *WlstSlu_9D00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.DataMark != nil {
		l = m.DataMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.LoopCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.LoopCount))
	}
	if m.SluitemData != nil {
		l = m.SluitemData.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.SluitemTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemTime))
	}
	if m.SluitemPara != nil {
		l = m.SluitemPara.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.SluitemGroup) > 0 {
		l = 0
		for _, e := range m.SluitemGroup {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.SluitemVer != nil {
		l = m.SluitemVer.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.SluitemSunriseset != nil {
		l = m.SluitemSunriseset.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.SluitemRuntime) > 0 {
		for _, e := range m.SluitemRuntime {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.SluitemDataNew != nil {
		l = m.SluitemDataNew.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	if m.SetMark != nil {
		l = m.SetMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.DataContinue != 0 {
		n += 2 + sovProtocolSlu(uint64(m.DataContinue))
	}
	return n
}

func (m *WlstSlu_9D00_SetMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetTimer))
	}
	if m.SetArgs != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetArgs))
	}
	if m.SetGroup != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetGroup))
	}
	if m.SetReset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetReset))
	}
	if m.SetControl != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SetControl))
	}
	return n
}

func (m *WlstSlu_9D00_SluitemData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if len(m.Current) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.Current)*8)) + len(m.Current)*8
	}
	if len(m.ActivePower) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.ActivePower)*8)) + len(m.ActivePower)*8
	}
	if len(m.ReactivePower) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.ReactivePower)*8)) + len(m.ReactivePower)*8
	}
	if m.MaxVoltage != 0 {
		n += 9
	}
	if len(m.MaxCurrent) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.MaxCurrent)*8)) + len(m.MaxCurrent)*8
	}
	if len(m.TotalElectricity) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.TotalElectricity)*8)) + len(m.TotalElectricity)*8
	}
	if m.Temperature != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Temperature))
	}
	if m.LeakageCurrent != 0 {
		n += 9
	}
	if m.TimerError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerError))
	}
	if m.SluitemStatus != nil {
		l = m.SluitemStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.LightStatus) > 0 {
		for _, e := range m.LightStatus {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.ResetCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetCount))
	}
	return n
}

func (m *WlstSlu_9D00_SluitemDataNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Voltage) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.Voltage)*8)) + len(m.Voltage)*8
	}
	if len(m.Current) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.Current)*8)) + len(m.Current)*8
	}
	if len(m.ActivePower) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.ActivePower)*8)) + len(m.ActivePower)*8
	}
	if len(m.RunTime) > 0 {
		l = 0
		for _, e := range m.RunTime {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.Phase != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Phase))
	}
	if len(m.TotalElectricity) > 0 {
		n += 1 + sovProtocolSlu(uint64(len(m.TotalElectricity)*8)) + len(m.TotalElectricity)*8
	}
	if m.LeakageCurrent != 0 {
		n += 9
	}
	if m.TimerError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerError))
	}
	if m.SluitemStatus != nil {
		l = m.SluitemStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.LightStatus) > 0 {
		for _, e := range m.LightStatus {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.ResetCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetCount))
	}
	if len(m.EnergySaving) > 0 {
		l = 0
		for _, e := range m.EnergySaving {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSlu_9D00_SluitemPara) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainName != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DomainName))
	}
	if m.SluitemStatus != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemStatus))
	}
	if m.SluitemEnableAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemEnableAlarm))
	}
	if len(m.SluitemPowerTurnon) > 0 {
		l = 0
		for _, e := range m.SluitemPowerTurnon {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.SluitemVector) > 0 {
		l = 0
		for _, e := range m.SluitemVector {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if len(m.RatedPower) > 0 {
		l = 0
		for _, e := range m.RatedPower {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.UplinkTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UplinkTimer))
	}
	if m.UplinkReply != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UplinkReply))
	}
	return n
}

func (m *WlstSlu_9D00_SluitemVer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	if m.EnergySaving != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EnergySaving))
	}
	if m.ElectricLeakageModule != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ElectricLeakageModule))
	}
	if m.TemperatureModule != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TemperatureModule))
	}
	if m.TimerModule != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerModule))
	}
	l = len(m.SluitemType)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_9D00_SluitemSunriseset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sunrise != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Sunrise))
	}
	if m.Sunset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Sunset))
	}
	return n
}

func (m *WlstSlu_9D00_SluitemRuntime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataType))
	}
	if m.OutputType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OutputType))
	}
	if m.OperateType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperateType))
	}
	if len(m.DateEnable) > 0 {
		l = 0
		for _, e := range m.DateEnable {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.OperateTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperateTime))
	}
	if m.OperateOffset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperateOffset))
	}
	if len(m.RelayOperate) > 0 {
		l = 0
		for _, e := range m.RelayOperate {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.PwmLoop) > 0 {
		l = 0
		for _, e := range m.PwmLoop {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.PwmPower != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PwmPower))
	}
	if m.PwmBaudrate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PwmBaudrate))
	}
	if m.Rs485Baudrate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rs485Baudrate))
	}
	if m.Rs485Check != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rs485Check))
	}
	return n
}

func (m *WlstSluF000) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.ResetMark != nil {
		l = m.ResetMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSluF000_ResetMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearTask != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClearTask))
	}
	if m.ResetConcentrator != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetConcentrator))
	}
	if m.HardResetZigbee != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HardResetZigbee))
	}
	if m.SoftResetZigbee != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SoftResetZigbee))
	}
	if m.ResetCarrier != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetCarrier))
	}
	if m.InitAll != 0 {
		n += 1 + sovProtocolSlu(uint64(m.InitAll))
	}
	if m.ClearData != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClearData))
	}
	if m.ClearArgs != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ClearArgs))
	}
	return n
}

func (m *WlstSluF100) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.OptMark != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OptMark))
	}
	if m.DateTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DateTime))
	}
	if m.ForceTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ForceTimer))
	}
	if m.TimerStatus != nil {
		l = m.TimerStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSluF100_TimerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DtformatError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DtformatError))
	}
	if m.TimerError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerError))
	}
	if m.TimeFault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimeFault))
	}
	return n
}

func (m *WlstSluF200) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.SluitemCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemCount))
	}
	if m.DataMark != nil {
		l = m.DataMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.SluitemData) > 0 {
		for _, e := range m.SluitemData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	return n
}

func (m *WlstSluF200_DataMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Group))
	}
	if m.Barcode != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Barcode))
	}
	if m.Route != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Route))
	}
	if m.Order != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Order))
	}
	if m.Limit != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Limit))
	}
	if m.PowerOnStatus != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerOnStatus))
	}
	if m.RunStatus != 0 {
		n += 1 + sovProtocolSlu(uint64(m.RunStatus))
	}
	if m.Vector != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Vector))
	}
	if m.RatedPower != 0 {
		n += 1 + sovProtocolSlu(uint64(m.RatedPower))
	}
	if m.LoopCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.LoopCount))
	}
	if m.SetData != 0 {
		n += 2 + sovProtocolSlu(uint64(m.SetData))
	}
	return n
}

func (m *WlstSluF200_ControllerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SluitemGroup) > 0 {
		l = 0
		for _, e := range m.SluitemGroup {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if len(m.SluitemRoute) > 0 {
		l = 0
		for _, e := range m.SluitemRoute {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.SluitemOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemOrder))
	}
	if m.UpperPowerLimit != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UpperPowerLimit))
	}
	if m.LowerPowerLimit != 0 {
		n += 1 + sovProtocolSlu(uint64(m.LowerPowerLimit))
	}
	if len(m.SluitemPowerTurnon) > 0 {
		l = 0
		for _, e := range m.SluitemPowerTurnon {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.SluitemStatus != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemStatus))
	}
	if m.SluitemEnableAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemEnableAlarm))
	}
	if len(m.SluitemVector) > 0 {
		l = 0
		for _, e := range m.SluitemVector {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.RatedPower) > 0 {
		l = 0
		for _, e := range m.RatedPower {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.LoopCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.LoopCount))
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.UplinkTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UplinkTimer))
	}
	if m.UplinkReply != 0 {
		n += 2 + sovProtocolSlu(uint64(m.UplinkReply))
	}
	return n
}

func (m *WlstSlu_7300) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemStart != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemStart))
	}
	if m.SluitemCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemCount))
	}
	if m.DataMark != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataMark))
	}
	if m.ConcentratorData != nil {
		l = m.ConcentratorData.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.BaseSluitemData) > 0 {
		for _, e := range m.BaseSluitemData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.UnknowSluitem) > 0 {
		for _, e := range m.UnknowSluitem {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.AssistSluitemData) > 0 {
		for _, e := range m.AssistSluitemData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.SluitemPhyinfo) > 0 {
		for _, e := range m.SluitemPhyinfo {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.SluitemAddrs) > 0 {
		l = 0
		for _, e := range m.SluitemAddrs {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSlu_7300_ConcentratorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResetCount) > 0 {
		l = 0
		for _, e := range m.ResetCount {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.RunStatus != nil {
		l = m.RunStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.ArgsStatus != nil {
		l = m.ArgsStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.HardwareStatus != nil {
		l = m.HardwareStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.UnknowSluitemCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UnknowSluitemCount))
	}
	if m.CommunicationChannel != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CommunicationChannel))
	}
	return n
}

func (m *WlstSlu_7300_ConcentratorData_RunStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offline != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Offline))
	}
	if m.EnableAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EnableAlarm))
	}
	if m.PoweronMark != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PoweronMark))
	}
	if m.EnableGprs != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EnableGprs))
	}
	if m.EnableAutochk != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EnableAutochk))
	}
	return n
}

func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConcentratorArgsError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ConcentratorArgsError))
	}
	if m.SluitemArgsError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemArgsError))
	}
	if m.TurnOnoffError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TurnOnoffError))
	}
	return n
}

func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZigbeeError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ZigbeeError))
	}
	if m.CarrierError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CarrierError))
	}
	if m.FramError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.FramError))
	}
	if m.BluetoothError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.BluetoothError))
	}
	if m.TimerError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerError))
	}
	return n
}

func (m *WlstSlu_7300_BaseSluitemData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DateTime))
	}
	if m.SluitemStatus != nil {
		l = m.SluitemStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.Temperature != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Temperature))
	}
	if len(m.LightStatus) > 0 {
		for _, e := range m.LightStatus {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if len(m.LightData) > 0 {
		for _, e := range m.LightData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	return n
}

func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	if m.Adjust != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Adjust))
	}
	if m.WorkingArgs != 0 {
		n += 1 + sovProtocolSlu(uint64(m.WorkingArgs))
	}
	if m.NoAlarm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.NoAlarm))
	}
	if m.OffLine != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OffLine))
	}
	if m.EepromError != 0 {
		n += 1 + sovProtocolSlu(uint64(m.EepromError))
	}
	if m.TemperatureSensor != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TemperatureSensor))
	}
	return n
}

func (m *WlstSlu_7300_BaseSluitemData_LightStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PowerStatus != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerStatus))
	}
	if m.Leakage != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Leakage))
	}
	if m.Fault != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Fault))
	}
	if m.WorkingOn != 0 {
		n += 1 + sovProtocolSlu(uint64(m.WorkingOn))
	}
	return n
}

func (m *WlstSlu_7300_BaseSluitemData_LightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 9
	}
	if m.Current != 0 {
		n += 9
	}
	if m.ActivePower != 0 {
		n += 9
	}
	if m.Electricity != 0 {
		n += 9
	}
	if m.ActiveTime != 0 {
		n += 9
	}
	if m.PowerLevel != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerLevel))
	}
	return n
}

func (m *WlstSlu_7300_UnknowSluitem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.ModelInfo != nil {
		l = m.ModelInfo.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_7300_AssistSluitemData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateTime != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DateTime))
	}
	if m.LeakageCurrent != 0 {
		n += 9
	}
	if len(m.LightData) > 0 {
		for _, e := range m.LightData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	return n
}

func (m *WlstSlu_7300_AssistSluitemData_LightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxVoltage != 0 {
		n += 9
	}
	if m.MaxCurrent != 0 {
		n += 9
	}
	if m.Electricity != 0 {
		n += 9
	}
	return n
}

func (m *WlstSlu_7300_SluitemPhyinfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalStrength != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SignalStrength))
	}
	if m.Routing != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Routing))
	}
	if m.Phase != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Phase))
	}
	if m.UsefulCommunicate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.UsefulCommunicate))
	}
	if m.AllCommunicate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AllCommunicate))
	}
	if m.ModelInfo != nil {
		l = m.ModelInfo.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_7300_ModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	if m.PowerSaving != 0 {
		n += 1 + sovProtocolSlu(uint64(m.PowerSaving))
	}
	if m.HasLeakage != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasLeakage))
	}
	if m.HasTemperature != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasTemperature))
	}
	if m.HasTimer != 0 {
		n += 1 + sovProtocolSlu(uint64(m.HasTimer))
	}
	if m.Model != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Model))
	}
	l = len(m.SluitemType)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSluF900) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.AlarmType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AlarmType))
	}
	if m.ConcentratorData != nil {
		l = m.ConcentratorData.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.ErrorCtrls) > 0 {
		l = 0
		for _, e := range m.ErrorCtrls {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.SluitemStatusAlarm) > 0 {
		for _, e := range m.SluitemStatusAlarm {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	if m.BluetoothApply != nil {
		l = m.BluetoothApply.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.SetDomainResult != nil {
		l = m.SetDomainResult.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSluF900_SluitemStatusAlarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.SluitemLoop != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemLoop))
	}
	if m.SluitemStatus != nil {
		l = m.SluitemStatus.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if len(m.LightStatus) > 0 {
		for _, e := range m.LightStatus {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSluF900_BluetoothApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimNumber != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SimNumber))
	}
	l = len(m.CheckCode)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSluF900_SetDomainResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainName != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DomainName))
	}
	if len(m.SetSuccess) > 0 {
		l = 0
		for _, e := range m.SetSuccess {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSlu_7B00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.SluitemIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.SluitemIdx))
	}
	if m.DataCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataCount))
	}
	if len(m.OperationData) > 0 {
		for _, e := range m.OperationData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationOrder))
	}
	if m.OperationType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationType))
	}
	if len(m.WeekSet) > 0 {
		l = 0
		for _, e := range m.WeekSet {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.TimerOrOffset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerOrOffset))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if len(m.Addr) > 0 {
		l = 0
		for _, e := range m.Addr {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.CmdType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdType))
	}
	if len(m.CmdMix) > 0 {
		for _, e := range m.CmdMix {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Handle))
	}
	if m.Rate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rate))
	}
	return n
}

func (m *WlstSluFe00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.OperationCmd != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationCmd))
	}
	if m.FaultCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.FaultCount))
	}
	if len(m.SluitemIdx) > 0 {
		l = 0
		for _, e := range m.SluitemIdx {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	return n
}

func (m *WlstSlu_7400) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.OperationType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationType))
	}
	if m.OperationOrder != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationOrder))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if len(m.Addrs) > 0 {
		l = 0
		for _, e := range m.Addrs {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if len(m.WeekSet) > 0 {
		l = 0
		for _, e := range m.WeekSet {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.TimerOrOffset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerOrOffset))
	}
	if m.CmdType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdType))
	}
	if len(m.CmdMix) > 0 {
		l = 0
		for _, e := range m.CmdMix {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.CmdPwm != nil {
		l = m.CmdPwm.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_7400_CmdPwm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopCanDo) > 0 {
		l = 0
		for _, e := range m.LoopCanDo {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.Scale != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Scale))
	}
	if m.Rate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rate))
	}
	return n
}

func (m *WlstSlu_7C00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if m.Addr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Addr))
	}
	if m.CmdCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdCount))
	}
	if m.AddOrUpdate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddOrUpdate))
	}
	if len(m.OperationData) > 0 {
		for _, e := range m.OperationData {
			l = e.Size()
			n += 1 + l + sovProtocolSlu(uint64(l))
		}
	}
	return n
}

func (m *WlstSlu_7C00_ConcentratorOperationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.OperationType))
	}
	if m.CmdType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdType))
	}
	if len(m.WeekSet) > 0 {
		l = 0
		for _, e := range m.WeekSet {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.TimerOrOffset != 0 {
		n += 1 + sovProtocolSlu(uint64(m.TimerOrOffset))
	}
	if len(m.CmdMix) > 0 {
		l = 0
		for _, e := range m.CmdMix {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.CmdPwm != nil {
		l = m.CmdPwm.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.Cmd_485 != nil {
		l = m.Cmd_485.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoopCanDo) > 0 {
		l = 0
		for _, e := range m.LoopCanDo {
			l += sovProtocolSlu(uint64(e))
		}
		n += 1 + sovProtocolSlu(uint64(l)) + l
	}
	if m.Scale != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Scale))
	}
	if m.Rate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Rate))
	}
	return n
}

func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baudrate != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Baudrate))
	}
	if m.Check != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Check))
	}
	if m.DataLength != 0 {
		n += 1 + sovProtocolSlu(uint64(m.DataLength))
	}
	l = len(m.Data_485)
	if l > 0 {
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	return n
}

func (m *WlstSlu_6F00) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovProtocolSlu(uint64(m.CmdIdx))
	}
	if m.AddrType != 0 {
		n += 1 + sovProtocolSlu(uint64(m.AddrType))
	}
	if m.Addr != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Addr))
	}
	if m.ResetMark != nil {
		l = m.ResetMark.Size()
		n += 1 + l + sovProtocolSlu(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProtocolSlu(uint64(m.Status))
	}
	return n
}

func (m *WlstSlu_6F00_ResetMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetMcu != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetMcu))
	}
	if m.ResetComm != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ResetComm))
	}
	if m.InitMcuHardware != 0 {
		n += 1 + sovProtocolSlu(uint64(m.InitMcuHardware))
	}
	if m.InitRam != 0 {
		n += 1 + sovProtocolSlu(uint64(m.InitRam))
	}
	if m.ZeroEerom != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ZeroEerom))
	}
	if m.ZeroCount != 0 {
		n += 1 + sovProtocolSlu(uint64(m.ZeroCount))
	}
	return n
}

func sovProtocolSlu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocolSlu(x uint64) (n int) {
	return sovProtocolSlu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WlstSluF400) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f400: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f400: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			m.Remark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemAddr", wireType)
			}
			m.SluitemAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemAddr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_3900: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_3900: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelInfo == nil {
				m.ModelInfo = &WlstSlu_3900_ModelInfo{}
			}
			if err := m.ModelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightData = append(m.LightData, &WlstSlu_3900_LightData{})
			if err := m.LightData[len(m.LightData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeakageCurrent = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemStatus == nil {
				m.SluitemStatus = &WlstSlu_3900_SluitemStatus{}
			}
			if err := m.SluitemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeFault == nil {
				m.TimeFault = &WlstSlu_3900_TimeFault{}
			}
			if err := m.TimeFault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCount", wireType)
			}
			m.ResetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			m.DateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPara", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemPara == nil {
				m.SluitemPara = &WlstSlu_3900_SluitemPara{}
			}
			if err := m.SluitemPara.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrp", wireType)
			}
			m.Rsrp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rsrp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rssi", wireType)
			}
			m.Rssi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rssi |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snr", wireType)
			}
			m.Snr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Snr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			m.Pci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pci |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrq", wireType)
			}
			m.Rsrq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rsrq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txpower", wireType)
			}
			m.Txpower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Txpower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earfcn", wireType)
			}
			m.Earfcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Earfcn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecl", wireType)
			}
			m.Ecl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ecl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csq", wireType)
			}
			m.Csq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Csq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reson", wireType)
			}
			m.Reson = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reson |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunrise", wireType)
			}
			m.Sunrise = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunrise |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunset", wireType)
			}
			m.Sunset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_ModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSaving", wireType)
			}
			m.PowerSaving = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerSaving |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLeakage", wireType)
			}
			m.HasLeakage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasLeakage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTemperature", wireType)
			}
			m.HasTemperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasTemperature |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTimer", wireType)
			}
			m.HasTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoop", wireType)
			}
			m.UseLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_LightData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Light_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Light_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReactivePower = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApparentPower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApparentPower = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Electricity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Electricity = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActiveTime = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LightStatus == nil {
				m.LightStatus = &WlstSlu_3900_LightStatus{}
			}
			if err := m.LightStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerLevel", wireType)
			}
			m.PowerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPowerTurnon", wireType)
			}
			m.SluitemPowerTurnon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemPowerTurnon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatedPower", wireType)
			}
			m.RatedPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatedPower |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_LightStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Light_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Light_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leakage", wireType)
			}
			m.Leakage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leakage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fault", wireType)
			}
			m.Fault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingOn", wireType)
			}
			m.WorkingOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_SluitemStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashFault", wireType)
			}
			m.FlashFault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlashFault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAlarm", wireType)
			}
			m.EnableAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_TimeFault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time_fault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time_fault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockFault", wireType)
			}
			m.ClockFault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockFault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockOutFault", wireType)
			}
			m.ClockOutFault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockOutFault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockOutAlarm", wireType)
			}
			m.ClockOutAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockOutAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3900_SluitemPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_para: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_para: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEnableAlarm", wireType)
			}
			m.HasEnableAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasEnableAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRunning", wireType)
			}
			m.IsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRunning |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmInterval", wireType)
			}
			m.AlarmInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkReply", wireType)
			}
			m.UplinkReply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkReply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7800) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_7800: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_7800: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			m.ClassType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordCount", wireType)
			}
			m.RecordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			m.DtStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEnd", wireType)
			}
			m.DtEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF800) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f800: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f800: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			m.ClassType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataTotal", wireType)
			}
			m.DataTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIdx", wireType)
			}
			m.DataIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordCount", wireType)
			}
			m.RecordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X20", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X20 = append(m.View_0X20, &WlstSluF800_View0X20{})
			if err := m.View_0X20[len(m.View_0X20)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X21", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X21 = append(m.View_0X21, &WlstSluF800_View0X21{})
			if err := m.View_0X21[len(m.View_0X21)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X22", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X22 = append(m.View_0X22, &WlstSluF800_View0X20{})
			if err := m.View_0X22[len(m.View_0X22)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X23", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X23 = append(m.View_0X23, &WlstSluF800_View0X23{})
			if err := m.View_0X23[len(m.View_0X23)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X24", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X24 = append(m.View_0X24, &WlstSluF800_View0X20{})
			if err := m.View_0X24[len(m.View_0X24)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View_0X25", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View_0X25 = append(m.View_0X25, &WlstSluF800_View0X20{})
			if err := m.View_0X25[len(m.View_0X25)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF800_View0X20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: View0x20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: View0x20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtHappen", wireType)
			}
			m.DtHappen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtHappen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF800_View0X21) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: View0x21: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: View0x21: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtHappen", wireType)
			}
			m.DtHappen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtHappen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationOrder", wireType)
			}
			m.OperationOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationSource", wireType)
			}
			m.OperationSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationSource |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF800_View0X23) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: View0x23: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: View0x23: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtHappen", wireType)
			}
			m.DtHappen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtHappen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AlarmType = append(m.AlarmType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AlarmType) == 0 {
					m.AlarmType = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AlarmType = append(m.AlarmType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmType", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemStatus = append(m.SluitemStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemStatus) == 0 {
					m.SluitemStatus = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemStatus = append(m.SluitemStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemVoltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SluitemVoltage = float64(math.Float64frombits(v))
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SluitemCurrent = append(m.SluitemCurrent, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SluitemCurrent) == 0 {
					m.SluitemCurrent = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SluitemCurrent = append(m.SluitemCurrent, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemCurrent", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SluitemActivePower = append(m.SluitemActivePower, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SluitemActivePower) == 0 {
					m.SluitemActivePower = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SluitemActivePower = append(m.SluitemActivePower, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemActivePower", wireType)
			}
		case 8:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SluitemReactivePower = append(m.SluitemReactivePower, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SluitemReactivePower) == 0 {
					m.SluitemReactivePower = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SluitemReactivePower = append(m.SluitemReactivePower, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemReactivePower", wireType)
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemMaxVoltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SluitemMaxVoltage = float64(math.Float64frombits(v))
		case 10:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SluitemMaxCurrent = append(m.SluitemMaxCurrent, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SluitemMaxCurrent) == 0 {
					m.SluitemMaxCurrent = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SluitemMaxCurrent = append(m.SluitemMaxCurrent, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemMaxCurrent", wireType)
			}
		case 11:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SluitemElectricity = append(m.SluitemElectricity, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SluitemElectricity) == 0 {
					m.SluitemElectricity = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SluitemElectricity = append(m.SluitemElectricity, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemElectricity", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemPhyinfo = append(m.SluitemPhyinfo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemPhyinfo) == 0 {
					m.SluitemPhyinfo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemPhyinfo = append(m.SluitemPhyinfo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPhyinfo", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluEc00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_ec00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_ec00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIdx", wireType)
			}
			m.StartIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WlstSlu_6B00", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WlstSlu_6B00 = append(m.WlstSlu_6B00, &WlstSlu_6B00{})
			if err := m.WlstSlu_6B00[len(m.WlstSlu_6B00)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6B00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_6b00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_6b00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetIdx", wireType)
			}
			m.SetIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtStart", wireType)
			}
			m.DtStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEnd", wireType)
			}
			m.DtEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationOrder", wireType)
			}
			m.OperationOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerOrOffset", wireType)
			}
			m.TimerOrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerOrOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addrs = append(m.Addrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addrs) == 0 {
					m.Addrs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addrs = append(m.Addrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CmdMix = append(m.CmdMix, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CmdMix) == 0 {
					m.CmdMix = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CmdMix = append(m.CmdMix, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMix", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdPwm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmdPwm == nil {
				m.CmdPwm = &WlstSlu_6B00_CmdPwm{}
			}
			if err := m.CmdPwm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6B00_CmdPwm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd_pwm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd_pwm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopCanDo = append(m.LoopCanDo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopCanDo) == 0 {
					m.LoopCanDo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopCanDo = append(m.LoopCanDo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCanDo", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			m.Scale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scale |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6C00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_6c00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_6c00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIdx", wireType)
			}
			m.StartIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluD000) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_d000: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_d000: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_2800) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_2800: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_2800: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarm", wireType)
			}
			m.Alarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_2400) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_2400: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_2400: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoFlag", wireType)
			}
			m.DoFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6E00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_6e00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_6e00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoFlag", wireType)
			}
			m.DoFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatrolStart", wireType)
			}
			m.PatrolStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatrolStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatrolInterval", wireType)
			}
			m.PatrolInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatrolInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatrolOrder", wireType)
			}
			m.PatrolOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatrolOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatrolCount", wireType)
			}
			m.PatrolCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatrolCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_3000) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_3000: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_3000: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctrls", wireType)
			}
			m.Ctrls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctrls |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			m.DomainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperVoltageLimit", wireType)
			}
			m.UpperVoltageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperVoltageLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerVoltageLimit", wireType)
			}
			m.LowerVoltageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerVoltageLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			m.MacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9A00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_9a00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_9a00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DomainNameStatus = append(m.DomainNameStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DomainNameStatus) == 0 {
					m.DomainNameStatus = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DomainNameStatus = append(m.DomainNameStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainNameStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluCd00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_cd00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_cd00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationFailures", wireType)
			}
			m.CommunicationFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationFailures |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFactor", wireType)
			}
			m.PowerFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationChannel", wireType)
			}
			m.CommunicationChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationChannel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRange", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentRange = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRange", wireType)
			}
			m.PowerRange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerRange |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMode", wireType)
			}
			m.AutoMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierRoutingMode", wireType)
			}
			m.CarrierRoutingMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarrierRoutingMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BluetoothPin", wireType)
			}
			m.BluetoothPin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BluetoothPin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BluetoothMode", wireType)
			}
			m.BluetoothMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BluetoothMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cct", wireType)
			}
			m.Cct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cct |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysOnline", wireType)
			}
			m.AlwaysOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlwaysOnline |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_1C00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_1c00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_1c00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			m.DomainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_1D00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_1d00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_1d00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataMark == nil {
				m.DataMark = &WlstSlu_1D00_DataMark{}
			}
			if err := m.DataMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_1D00_DataMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data_mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data_mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadData", wireType)
			}
			m.ReadData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadData |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadTimer", wireType)
			}
			m.ReadTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadArgs", wireType)
			}
			m.ReadArgs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadArgs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadGroup", wireType)
			}
			m.ReadGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadVer", wireType)
			}
			m.ReadVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadSunriseset", wireType)
			}
			m.ReadSunriseset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadSunriseset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadTimetable", wireType)
			}
			m.ReadTimetable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadTimetable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCtrldata", wireType)
			}
			m.ReadCtrldata = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCtrldata |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_9d00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_9d00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataMark == nil {
				m.DataMark = &WlstSlu_1D00_DataMark{}
			}
			if err := m.DataMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCount", wireType)
			}
			m.LoopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemData == nil {
				m.SluitemData = &WlstSlu_9D00_SluitemData{}
			}
			if err := m.SluitemData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemTime", wireType)
			}
			m.SluitemTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPara", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemPara == nil {
				m.SluitemPara = &WlstSlu_9D00_SluitemPara{}
			}
			if err := m.SluitemPara.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemGroup = append(m.SluitemGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemGroup) == 0 {
					m.SluitemGroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemGroup = append(m.SluitemGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemGroup", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemVer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemVer == nil {
				m.SluitemVer = &WlstSlu_9D00_SluitemVer{}
			}
			if err := m.SluitemVer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemSunriseset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemSunriseset == nil {
				m.SluitemSunriseset = &WlstSlu_9D00_SluitemSunriseset{}
			}
			if err := m.SluitemSunriseset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemRuntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemRuntime = append(m.SluitemRuntime, &WlstSlu_9D00_SluitemRuntime{})
			if err := m.SluitemRuntime[len(m.SluitemRuntime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemDataNew", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemDataNew == nil {
				m.SluitemDataNew = &WlstSlu_9D00_SluitemDataNew{}
			}
			if err := m.SluitemDataNew.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetMark == nil {
				m.SetMark = &WlstSlu_9D00_SetMark{}
			}
			if err := m.SetMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataContinue", wireType)
			}
			m.DataContinue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataContinue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SetMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set_mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set_mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetTimer", wireType)
			}
			m.SetTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetArgs", wireType)
			}
			m.SetArgs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetArgs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetGroup", wireType)
			}
			m.SetGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetReset", wireType)
			}
			m.SetReset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetReset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetControl", wireType)
			}
			m.SetControl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetControl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Current = append(m.Current, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Current) == 0 {
					m.Current = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Current = append(m.Current, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ActivePower = append(m.ActivePower, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ActivePower) == 0 {
					m.ActivePower = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ActivePower = append(m.ActivePower, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
		case 4:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ReactivePower = append(m.ReactivePower, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ReactivePower) == 0 {
					m.ReactivePower = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ReactivePower = append(m.ReactivePower, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactivePower", wireType)
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVoltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxVoltage = float64(math.Float64frombits(v))
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.MaxCurrent = append(m.MaxCurrent, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.MaxCurrent) == 0 {
					m.MaxCurrent = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.MaxCurrent = append(m.MaxCurrent, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCurrent", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.TotalElectricity = append(m.TotalElectricity, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.TotalElectricity) == 0 {
					m.TotalElectricity = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.TotalElectricity = append(m.TotalElectricity, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalElectricity", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			m.Temperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Temperature |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeakageCurrent = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerError", wireType)
			}
			m.TimerError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemStatus == nil {
				m.SluitemStatus = &WlstSlu_7300_BaseSluitemData_SluitemStatus{}
			}
			if err := m.SluitemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightStatus = append(m.LightStatus, &WlstSlu_7300_BaseSluitemData_LightStatus{})
			if err := m.LightStatus[len(m.LightStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCount", wireType)
			}
			m.ResetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemDataNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_data_new: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_data_new: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Voltage = append(m.Voltage, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Voltage) == 0 {
					m.Voltage = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Voltage = append(m.Voltage, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Current = append(m.Current, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Current) == 0 {
					m.Current = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Current = append(m.Current, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ActivePower = append(m.ActivePower, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ActivePower) == 0 {
					m.ActivePower = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ActivePower = append(m.ActivePower, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RunTime = append(m.RunTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RunTime) == 0 {
					m.RunTime = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RunTime = append(m.RunTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RunTime", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.TotalElectricity = append(m.TotalElectricity, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.TotalElectricity) == 0 {
					m.TotalElectricity = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.TotalElectricity = append(m.TotalElectricity, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalElectricity", wireType)
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeakageCurrent = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerError", wireType)
			}
			m.TimerError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemStatus == nil {
				m.SluitemStatus = &WlstSlu_7300_BaseSluitemData_SluitemStatus{}
			}
			if err := m.SluitemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightStatus = append(m.LightStatus, &WlstSlu_7300_BaseSluitemData_LightStatus{})
			if err := m.LightStatus[len(m.LightStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCount", wireType)
			}
			m.ResetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnergySaving = append(m.EnergySaving, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnergySaving) == 0 {
					m.EnergySaving = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnergySaving = append(m.EnergySaving, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergySaving", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_para: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_para: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			m.DomainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			m.SluitemStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemEnableAlarm", wireType)
			}
			m.SluitemEnableAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemEnableAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemPowerTurnon = append(m.SluitemPowerTurnon, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemPowerTurnon) == 0 {
					m.SluitemPowerTurnon = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemPowerTurnon = append(m.SluitemPowerTurnon, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPowerTurnon", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemVector = append(m.SluitemVector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemVector) == 0 {
					m.SluitemVector = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemVector = append(m.SluitemVector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemVector", wireType)
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RatedPower = append(m.RatedPower, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RatedPower) == 0 {
					m.RatedPower = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RatedPower = append(m.RatedPower, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RatedPower", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkTimer", wireType)
			}
			m.UplinkTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkReply", wireType)
			}
			m.UplinkReply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkReply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemVer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_ver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_ver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergySaving", wireType)
			}
			m.EnergySaving = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergySaving |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectricLeakageModule", wireType)
			}
			m.ElectricLeakageModule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectricLeakageModule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemperatureModule", wireType)
			}
			m.TemperatureModule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemperatureModule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerModule", wireType)
			}
			m.TimerModule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerModule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemSunriseset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_sunriseset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_sunriseset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunrise", wireType)
			}
			m.Sunrise = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunrise |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunset", wireType)
			}
			m.Sunset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_9D00_SluitemRuntime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_runtime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_runtime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputType", wireType)
			}
			m.OutputType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateType", wireType)
			}
			m.OperateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DateEnable = append(m.DateEnable, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DateEnable) == 0 {
					m.DateEnable = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DateEnable = append(m.DateEnable, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DateEnable", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateTime", wireType)
			}
			m.OperateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperateTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateOffset", wireType)
			}
			m.OperateOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperateOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RelayOperate = append(m.RelayOperate, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RelayOperate) == 0 {
					m.RelayOperate = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RelayOperate = append(m.RelayOperate, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayOperate", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PwmLoop = append(m.PwmLoop, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PwmLoop) == 0 {
					m.PwmLoop = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PwmLoop = append(m.PwmLoop, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PwmLoop", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PwmPower", wireType)
			}
			m.PwmPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PwmPower |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PwmBaudrate", wireType)
			}
			m.PwmBaudrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PwmBaudrate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs485Baudrate", wireType)
			}
			m.Rs485Baudrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rs485Baudrate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs485Check", wireType)
			}
			m.Rs485Check = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rs485Check |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF000) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f000: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f000: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResetMark == nil {
				m.ResetMark = &WlstSluF000_ResetMark{}
			}
			if err := m.ResetMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF000_ResetMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reset_mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reset_mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearTask", wireType)
			}
			m.ClearTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClearTask |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetConcentrator", wireType)
			}
			m.ResetConcentrator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetConcentrator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardResetZigbee", wireType)
			}
			m.HardResetZigbee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardResetZigbee |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftResetZigbee", wireType)
			}
			m.SoftResetZigbee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftResetZigbee |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCarrier", wireType)
			}
			m.ResetCarrier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetCarrier |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitAll", wireType)
			}
			m.InitAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitAll |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearData", wireType)
			}
			m.ClearData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClearData |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearArgs", wireType)
			}
			m.ClearArgs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClearArgs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF100) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f100: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f100: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptMark", wireType)
			}
			m.OptMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			m.DateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceTimer", wireType)
			}
			m.ForceTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimerStatus == nil {
				m.TimerStatus = &WlstSluF100_TimerStatus{}
			}
			if err := m.TimerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF100_TimerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timer_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timer_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtformatError", wireType)
			}
			m.DtformatError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DtformatError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerError", wireType)
			}
			m.TimerError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFault", wireType)
			}
			m.TimeFault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF200) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f200: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f200: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemCount", wireType)
			}
			m.SluitemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataMark == nil {
				m.DataMark = &WlstSluF200_DataMark{}
			}
			if err := m.DataMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemData = append(m.SluitemData, &WlstSluF200_ControllerData{})
			if err := m.SluitemData[len(m.SluitemData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF200_DataMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data_mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data_mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			m.Barcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Barcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			m.Route = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Route |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerOnStatus", wireType)
			}
			m.PowerOnStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerOnStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStatus", wireType)
			}
			m.RunStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			m.Vector = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vector |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatedPower", wireType)
			}
			m.RatedPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatedPower |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCount", wireType)
			}
			m.LoopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetData", wireType)
			}
			m.SetData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetData |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF200_ControllerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Controller_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Controller_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemGroup = append(m.SluitemGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemGroup) == 0 {
					m.SluitemGroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemGroup = append(m.SluitemGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemGroup", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemRoute = append(m.SluitemRoute, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemRoute) == 0 {
					m.SluitemRoute = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemRoute = append(m.SluitemRoute, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemRoute", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemOrder", wireType)
			}
			m.SluitemOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperPowerLimit", wireType)
			}
			m.UpperPowerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperPowerLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerPowerLimit", wireType)
			}
			m.LowerPowerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerPowerLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemPowerTurnon = append(m.SluitemPowerTurnon, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemPowerTurnon) == 0 {
					m.SluitemPowerTurnon = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemPowerTurnon = append(m.SluitemPowerTurnon, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPowerTurnon", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			m.SluitemStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemEnableAlarm", wireType)
			}
			m.SluitemEnableAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemEnableAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemVector = append(m.SluitemVector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemVector) == 0 {
					m.SluitemVector = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemVector = append(m.SluitemVector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemVector", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RatedPower = append(m.RatedPower, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RatedPower) == 0 {
					m.RatedPower = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RatedPower = append(m.RatedPower, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RatedPower", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCount", wireType)
			}
			m.LoopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkTimer", wireType)
			}
			m.UplinkTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkReply", wireType)
			}
			m.UplinkReply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkReply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_7300: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_7300: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStart", wireType)
			}
			m.SluitemStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemCount", wireType)
			}
			m.SluitemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMark", wireType)
			}
			m.DataMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcentratorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConcentratorData == nil {
				m.ConcentratorData = &WlstSlu_7300_ConcentratorData{}
			}
			if err := m.ConcentratorData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSluitemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSluitemData = append(m.BaseSluitemData, &WlstSlu_7300_BaseSluitemData{})
			if err := m.BaseSluitemData[len(m.BaseSluitemData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnknowSluitem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnknowSluitem = append(m.UnknowSluitem, &WlstSlu_7300_UnknowSluitem{})
			if err := m.UnknowSluitem[len(m.UnknowSluitem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistSluitemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssistSluitemData = append(m.AssistSluitemData, &WlstSlu_7300_AssistSluitemData{})
			if err := m.AssistSluitemData[len(m.AssistSluitemData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemPhyinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemPhyinfo = append(m.SluitemPhyinfo, &WlstSlu_7300_SluitemPhyinfo{})
			if err := m.SluitemPhyinfo[len(m.SluitemPhyinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemAddrs = append(m.SluitemAddrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemAddrs) == 0 {
					m.SluitemAddrs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemAddrs = append(m.SluitemAddrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemAddrs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_ConcentratorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Concentrator_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Concentrator_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResetCount = append(m.ResetCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ResetCount) == 0 {
					m.ResetCount = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResetCount = append(m.ResetCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetCount", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunStatus == nil {
				m.RunStatus = &WlstSlu_7300_ConcentratorData_RunStatus{}
			}
			if err := m.RunStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgsStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArgsStatus == nil {
				m.ArgsStatus = &WlstSlu_7300_ConcentratorData_ArgsStatus{}
			}
			if err := m.ArgsStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HardwareStatus == nil {
				m.HardwareStatus = &WlstSlu_7300_ConcentratorData_HardwareStatus{}
			}
			if err := m.HardwareStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnknowSluitemCount", wireType)
			}
			m.UnknowSluitemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnknowSluitemCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationChannel", wireType)
			}
			m.CommunicationChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationChannel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_ConcentratorData_RunStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Run_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Run_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			m.Offline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offline |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAlarm", wireType)
			}
			m.EnableAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoweronMark", wireType)
			}
			m.PoweronMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoweronMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGprs", wireType)
			}
			m.EnableGprs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableGprs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAutochk", wireType)
			}
			m.EnableAutochk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableAutochk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_ConcentratorData_ArgsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Args_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Args_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcentratorArgsError", wireType)
			}
			m.ConcentratorArgsError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConcentratorArgsError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemArgsError", wireType)
			}
			m.SluitemArgsError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemArgsError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnOnoffError", wireType)
			}
			m.TurnOnoffError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TurnOnoffError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_ConcentratorData_HardwareStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hardware_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hardware_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZigbeeError", wireType)
			}
			m.ZigbeeError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZigbeeError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierError", wireType)
			}
			m.CarrierError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarrierError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramError", wireType)
			}
			m.FramError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BluetoothError", wireType)
			}
			m.BluetoothError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BluetoothError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerError", wireType)
			}
			m.TimerError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_BaseSluitemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base_sluitem_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base_sluitem_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			m.DateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemStatus == nil {
				m.SluitemStatus = &WlstSlu_7300_BaseSluitemData_SluitemStatus{}
			}
			if err := m.SluitemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			m.Temperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Temperature |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightStatus = append(m.LightStatus, &WlstSlu_7300_BaseSluitemData_LightStatus{})
			if err := m.LightStatus[len(m.LightStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightData = append(m.LightData, &WlstSlu_7300_BaseSluitemData_LightData{})
			if err := m.LightData[len(m.LightData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_BaseSluitemData_SluitemStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adjust", wireType)
			}
			m.Adjust = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adjust |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingArgs", wireType)
			}
			m.WorkingArgs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingArgs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAlarm", wireType)
			}
			m.NoAlarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoAlarm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffLine", wireType)
			}
			m.OffLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffLine |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EepromError", wireType)
			}
			m.EepromError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EepromError |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemperatureSensor", wireType)
			}
			m.TemperatureSensor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemperatureSensor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_BaseSluitemData_LightStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Light_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Light_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerStatus", wireType)
			}
			m.PowerStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leakage", wireType)
			}
			m.Leakage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leakage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fault", wireType)
			}
			m.Fault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingOn", wireType)
			}
			m.WorkingOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingOn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_BaseSluitemData_LightData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Light_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Light_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Voltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Current = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActivePower = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Electricity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Electricity = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActiveTime = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerLevel", wireType)
			}
			m.PowerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_UnknowSluitem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unknow_sluitem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unknow_sluitem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelInfo == nil {
				m.ModelInfo = &WlstSlu_7300_ModelInfo{}
			}
			if err := m.ModelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_AssistSluitemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assist_sluitem_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assist_sluitem_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			m.DateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeakageCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeakageCurrent = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightData = append(m.LightData, &WlstSlu_7300_AssistSluitemData_LightData{})
			if err := m.LightData[len(m.LightData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_AssistSluitemData_LightData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Light_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Light_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVoltage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxVoltage = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxCurrent = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Electricity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Electricity = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_SluitemPhyinfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_phyinfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_phyinfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalStrength", wireType)
			}
			m.SignalStrength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalStrength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routing", wireType)
			}
			m.Routing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Routing |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsefulCommunicate", wireType)
			}
			m.UsefulCommunicate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsefulCommunicate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCommunicate", wireType)
			}
			m.AllCommunicate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllCommunicate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelInfo == nil {
				m.ModelInfo = &WlstSlu_7300_ModelInfo{}
			}
			if err := m.ModelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7300_ModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSaving", wireType)
			}
			m.PowerSaving = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerSaving |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLeakage", wireType)
			}
			m.HasLeakage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasLeakage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTemperature", wireType)
			}
			m.HasTemperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasTemperature |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTimer", wireType)
			}
			m.HasTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasTimer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF900) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_f900: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_f900: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmType", wireType)
			}
			m.AlarmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlarmType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcentratorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConcentratorData == nil {
				m.ConcentratorData = &WlstSlu_7300_ConcentratorData{}
			}
			if err := m.ConcentratorData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ErrorCtrls = append(m.ErrorCtrls, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ErrorCtrls) == 0 {
					m.ErrorCtrls = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ErrorCtrls = append(m.ErrorCtrls, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCtrls", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatusAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SluitemStatusAlarm = append(m.SluitemStatusAlarm, &WlstSluF900_SluitemStatusAlarm{})
			if err := m.SluitemStatusAlarm[len(m.SluitemStatusAlarm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BluetoothApply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BluetoothApply == nil {
				m.BluetoothApply = &WlstSluF900_BluetoothApply{}
			}
			if err := m.BluetoothApply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDomainResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetDomainResult == nil {
				m.SetDomainResult = &WlstSluF900_SetDomainResult{}
			}
			if err := m.SetDomainResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF900_SluitemStatusAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sluitem_status_alarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sluitem_status_alarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemLoop", wireType)
			}
			m.SluitemLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemLoop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SluitemStatus == nil {
				m.SluitemStatus = &WlstSlu_7300_BaseSluitemData_SluitemStatus{}
			}
			if err := m.SluitemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightStatus = append(m.LightStatus, &WlstSlu_7300_BaseSluitemData_LightStatus{})
			if err := m.LightStatus[len(m.LightStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF900_BluetoothApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bluetooth_apply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bluetooth_apply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimNumber", wireType)
			}
			m.SimNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluF900_SetDomainResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set_domain_result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set_domain_result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			m.DomainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SetSuccess = append(m.SetSuccess, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SetSuccess) == 0 {
					m.SetSuccess = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SetSuccess = append(m.SetSuccess, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SetSuccess", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7B00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_7b00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_7b00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
			m.SluitemIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SluitemIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCount", wireType)
			}
			m.DataCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationData = append(m.OperationData, &WlstSlu_7B00_ReadConcentratorOperationData{})
			if err := m.OperationData[len(m.OperationData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Read_concentrator_operation_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Read_concentrator_operation_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationOrder", wireType)
			}
			m.OperationOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WeekSet = append(m.WeekSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WeekSet) == 0 {
					m.WeekSet = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WeekSet = append(m.WeekSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekSet", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerOrOffset", wireType)
			}
			m.TimerOrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerOrOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addr = append(m.Addr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addr) == 0 {
					m.Addr = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addr = append(m.Addr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmdMix = append(m.CmdMix, &WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation{})
			if err := m.CmdMix[len(m.CmdMix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7B00_ReadConcentratorOperationData_CmdOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd_operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd_operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSluFe00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_fe00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_fe00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCmd", wireType)
			}
			m.OperationCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationCmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultCount", wireType)
			}
			m.FaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SluitemIdx = append(m.SluitemIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SluitemIdx) == 0 {
					m.SluitemIdx = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SluitemIdx = append(m.SluitemIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SluitemIdx", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7400) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_7400: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_7400: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationOrder", wireType)
			}
			m.OperationOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addrs = append(m.Addrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addrs) == 0 {
					m.Addrs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addrs = append(m.Addrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WeekSet = append(m.WeekSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WeekSet) == 0 {
					m.WeekSet = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WeekSet = append(m.WeekSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekSet", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerOrOffset", wireType)
			}
			m.TimerOrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerOrOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CmdMix = append(m.CmdMix, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CmdMix) == 0 {
					m.CmdMix = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CmdMix = append(m.CmdMix, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMix", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdPwm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmdPwm == nil {
				m.CmdPwm = &WlstSlu_7400_CmdPwm{}
			}
			if err := m.CmdPwm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7400_CmdPwm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd_pwm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd_pwm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopCanDo = append(m.LoopCanDo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopCanDo) == 0 {
					m.LoopCanDo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopCanDo = append(m.LoopCanDo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCanDo", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			m.Scale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scale |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7C00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_7c00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_7c00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdCount", wireType)
			}
			m.CmdCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrUpdate", wireType)
			}
			m.AddOrUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOrUpdate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationData = append(m.OperationData, &WlstSlu_7C00_ConcentratorOperationData{})
			if err := m.OperationData[len(m.OperationData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7C00_ConcentratorOperationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Concentrator_operation_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Concentrator_operation_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WeekSet = append(m.WeekSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WeekSet) == 0 {
					m.WeekSet = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WeekSet = append(m.WeekSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekSet", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerOrOffset", wireType)
			}
			m.TimerOrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerOrOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CmdMix = append(m.CmdMix, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CmdMix) == 0 {
					m.CmdMix = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CmdMix = append(m.CmdMix, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdMix", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdPwm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmdPwm == nil {
				m.CmdPwm = &WlstSlu_7C00_ConcentratorOperationData_CmdPwm{}
			}
			if err := m.CmdPwm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd_485", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cmd_485 == nil {
				m.Cmd_485 = &WlstSlu_7C00_ConcentratorOperationData_Cmd_485{}
			}
			if err := m.Cmd_485.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7C00_ConcentratorOperationData_CmdPwm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd_pwm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd_pwm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoopCanDo = append(m.LoopCanDo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolSlu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocolSlu
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoopCanDo) == 0 {
					m.LoopCanDo = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolSlu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoopCanDo = append(m.LoopCanDo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopCanDo", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			m.Scale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scale |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_7C00_ConcentratorOperationData_Cmd_485) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd_485: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd_485: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baudrate", wireType)
			}
			m.Baudrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baudrate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			m.Check = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Check |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLength", wireType)
			}
			m.DataLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data_485", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data_485 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6F00) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wlst_slu_6f00: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wlst_slu_6f00: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			m.AddrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResetMark == nil {
				m.ResetMark = &WlstSlu_6F00_ResetMark{}
			}
			if err := m.ResetMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WlstSlu_6F00_ResetMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reset_mark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reset_mark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetMcu", wireType)
			}
			m.ResetMcu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetMcu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetComm", wireType)
			}
			m.ResetComm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetComm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMcuHardware", wireType)
			}
			m.InitMcuHardware = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitMcuHardware |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitRam", wireType)
			}
			m.InitRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitRam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroEerom", wireType)
			}
			m.ZeroEerom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZeroEerom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroCount", wireType)
			}
			m.ZeroCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZeroCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolSlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocolSlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocolSlu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocolSlu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolSlu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocolSlu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocolSlu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocolSlu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocolSlu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocolSlu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocolSlu = fmt.Errorf("proto: unexpected end of group")
)
