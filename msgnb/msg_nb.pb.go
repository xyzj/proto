// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_nb.proto

package wlst_nbiot

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgNBiot struct {
	CmdIdx int64 `protobuf:"varint,1,opt,name=cmd_idx,json=cmdIdx,proto3" json:"cmd_idx,omitempty"`
	// GoWork or GoWorkTask
	CmdName string `protobuf:"bytes,2,opt,name=cmd_name,json=cmdName,proto3" json:"cmd_name,omitempty"`
	// 0xdad9 or 0xdad0
	CmdFlag int32   `protobuf:"varint,3,opt,name=cmd_flag,json=cmdFlag,proto3" json:"cmd_flag,omitempty"`
	Imei    []int64 `protobuf:"varint,4,rep,packed,name=imei,proto3" json:"imei,omitempty"`
	// hex string
	RawData []int32 `protobuf:"varint,5,rep,packed,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *MsgNBiot) Reset()         { *m = MsgNBiot{} }
func (m *MsgNBiot) String() string { return proto.CompactTextString(m) }
func (*MsgNBiot) ProtoMessage()    {}
func (*MsgNBiot) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_nb_c299f0257acb7933, []int{0}
}
func (m *MsgNBiot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNBiot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNBiot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MsgNBiot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNBiot.Merge(dst, src)
}
func (m *MsgNBiot) XXX_Size() int {
	return m.Size()
}
func (m *MsgNBiot) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNBiot.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNBiot proto.InternalMessageInfo

func (m *MsgNBiot) GetCmdIdx() int64 {
	if m != nil {
		return m.CmdIdx
	}
	return 0
}

func (m *MsgNBiot) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *MsgNBiot) GetCmdFlag() int32 {
	if m != nil {
		return m.CmdFlag
	}
	return 0
}

func (m *MsgNBiot) GetImei() []int64 {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *MsgNBiot) GetRawData() []int32 {
	if m != nil {
		return m.RawData
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgNBiot)(nil), "wlst.nbiot.MsgNBiot")
}
func (m *MsgNBiot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNBiot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgNb(dAtA, i, uint64(m.CmdIdx))
	}
	if len(m.CmdName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgNb(dAtA, i, uint64(len(m.CmdName)))
		i += copy(dAtA[i:], m.CmdName)
	}
	if m.CmdFlag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsgNb(dAtA, i, uint64(m.CmdFlag))
	}
	if len(m.Imei) > 0 {
		dAtA2 := make([]byte, len(m.Imei)*10)
		var j1 int
		for _, num1 := range m.Imei {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsgNb(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.RawData) > 0 {
		dAtA4 := make([]byte, len(m.RawData)*10)
		var j3 int
		for _, num1 := range m.RawData {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsgNb(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func encodeVarintMsgNb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgNBiot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdIdx != 0 {
		n += 1 + sovMsgNb(uint64(m.CmdIdx))
	}
	l = len(m.CmdName)
	if l > 0 {
		n += 1 + l + sovMsgNb(uint64(l))
	}
	if m.CmdFlag != 0 {
		n += 1 + sovMsgNb(uint64(m.CmdFlag))
	}
	if len(m.Imei) > 0 {
		l = 0
		for _, e := range m.Imei {
			l += sovMsgNb(uint64(e))
		}
		n += 1 + sovMsgNb(uint64(l)) + l
	}
	if len(m.RawData) > 0 {
		l = 0
		for _, e := range m.RawData {
			l += sovMsgNb(uint64(e))
		}
		n += 1 + sovMsgNb(uint64(l)) + l
	}
	return n
}

func sovMsgNb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgNb(x uint64) (n int) {
	return sovMsgNb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNBiot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNBiot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNBiot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdIdx", wireType)
			}
			m.CmdIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmdName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdFlag", wireType)
			}
			m.CmdFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdFlag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgNb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Imei = append(m.Imei, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgNb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgNb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Imei) == 0 {
					m.Imei = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgNb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Imei = append(m.Imei, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgNb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RawData = append(m.RawData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgNb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgNb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RawData) == 0 {
					m.RawData = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgNb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RawData = append(m.RawData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgNb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgNb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgNb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgNb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgNb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgNb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgNb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgNb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_nb.proto", fileDescriptor_msg_nb_c299f0257acb7933) }

var fileDescriptor_msg_nb_c299f0257acb7933 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x2d, 0x4e, 0x8f,
	0xcf, 0x4b, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0xcf, 0x29, 0x2e, 0xd1, 0xcb,
	0x4b, 0xca, 0xcc, 0x2f, 0x51, 0xea, 0x60, 0xe4, 0xe2, 0xf0, 0x2d, 0x4e, 0xf7, 0x73, 0xca, 0xcc,
	0x2f, 0x11, 0x12, 0xe7, 0x62, 0x4f, 0xce, 0x4d, 0x89, 0xcf, 0x4c, 0xa9, 0x90, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0e, 0x62, 0x4b, 0xce, 0x4d, 0xf1, 0x4c, 0xa9, 0x10, 0x92, 0xe4, 0xe2, 0x00, 0x49,
	0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x14, 0xfa, 0x25, 0xe6,
	0xa6, 0xc2, 0xa4, 0xd2, 0x72, 0x12, 0xd3, 0x25, 0x98, 0x15, 0x18, 0x35, 0x58, 0xc1, 0x52, 0x6e,
	0x39, 0x89, 0xe9, 0x42, 0x42, 0x5c, 0x2c, 0x99, 0xb9, 0xa9, 0x99, 0x12, 0x2c, 0x0a, 0xcc, 0x1a,
	0xcc, 0x41, 0x60, 0x36, 0x48, 0x79, 0x51, 0x62, 0x79, 0x7c, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0xab,
	0x02, 0x33, 0x48, 0x79, 0x51, 0x62, 0xb9, 0x4b, 0x62, 0x49, 0xa2, 0x93, 0xd4, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7,
	0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x78, 0x30, 0x26, 0xb1, 0x81, 0x5d, 0x6e, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0xb5, 0xf2, 0xee, 0xc9, 0x00, 0x00, 0x00,
}
